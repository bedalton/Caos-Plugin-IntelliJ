{
	parserClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.parser.CaosDefParser"
	parserUtilClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.parser.CaosDefParserUtil"
	implements="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
	extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefCompositeElementImpl"
	elementTypeHolderClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.lexer.CaosDefTypes"
	elementTypePrefix="CaosDef_"
	elementTypeClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.types.CaosDefElementType"
	tokenTypeClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.lexer.CaosDefTokenType"
	psiClassPrefix="CaosDef"
	psiImplClassSuffix="Impl"
	psiPackage="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api"
	psiImplPackage="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl"
	elementTypeFactory("command_def_element|doc_comment|parameter|values_list_element|values_list_value|doc_comment_hashtag")="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.types.CaosDefElementTypeFactory.factory"
	psiImplUtilClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.util.CaosDefPsiImplUtil"
	generateTokenAccessors=true
	tokens = [
		DOC_COMMENT_LITERAL = "regexp:/\*[*]*.*(?=[*][/])[*][/]";
		DOC_COMMENT_OPEN = 'regexp:/[*]+';
		DOC_COMMENT_CLOSE = 'regexp:[*]+/'
		LINE_COMMENT = "regexp://[^\n]*"
		EXCLUSIVE = "regexp:[!][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]"
		REGION_HEADING_LITERAL = "regexp:[#][^\n]+"
		WORD = "regexp:[a-zA-Z_][a-zA-Z0-9#!$_]{3}"
		ID = "regexp:[_a-zA-Z][_a-zA-Z0-9]*";
		EQ = "=";
		COMMA = ',';
		COLON = ':';
		SEMI = ';'
		SINGLE_QUO = "'";
		DOUBLE_QUO = '"';
		OPEN_PAREN = '(';
		CLOSE_PAREN = ")";
		space = "regexp:\s+";
		OPEN_BRACKET = '[';
		CLOSE_BRACKET = ']';
		OPEN_BRACE = '{';
		CLOSE_BRACE = '}';
		LEADING_ASTRISK = '*';
		DASH = '-';
		CODE_BLOCK_OPEN_BRACE = '#{';
		TYPE_LINK_LITERAL = 'regexp:@\{[a-zA-Z_0-9#$!]+}'
		AT_RVALUE = "regexp:[@][rR][vV][aA][lL][uU][eE]";
		AT_LVALUE = "regexp:[@][lL][vV][aA][lL][uU][eE]";
		AT_PARAM = "regexp:[@][pP][aA][rR][aA][mM]"
		AT_RETURN = "regexp:[@][rR][eE][tT][uU][rR][nN][sS]?"
		AT_OWNR = "regexp:[Oo][Ww][Nn][Rr]"

		AT_ID = "regexp:[@][a-zA-Z_][a-zA-Z_0-9]";
		AT_FILE = "regexp:[@][Ff][Ii][Ll][Ee][.][a-zA-Z_][a-zA-Z_0-9/]+"
		SINGLE_QUO_STRING = "regexp:'[^\n']*'";
		DOUBLE_QUO_STRING = 'regexp:"[^\n"]*"';
		STRING_LITERAL_TYPE
		space = "regexp:\s+"
	]
}

def	::= header? (!<<eof>> def_element)*
	;

header
	::=  version_tag? AT_VARIANT '(' variant (',' variant)* ')'
	{
		methods = [
			isVariant
			getVariants
		]
	}
	;

private def_element
	::= command_def_element end_of_statement
	|	values_list_element
	| 	comment
	| 	NEWLINE
	| 	end_of_statement
	;


command_def_element
	::= doc_comment? command return_type arguments_list?
	{
		pin = 2;
		stubClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.stubs.api.CaosDefCommandDefinitionStub"
		extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefStubBasedElementImpl<?>"
		implements = [
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"

		]
		methods = [
			isCommand
			isRvalue
			isLvalue
			getEnclosingDocComment
			getComment
			getNamespace
			getCommandName
			getCommandWords
			getParameterStructs
			getReturnTypeString
			getReturnTypeStruct
			getSimpleReturnType
			getVariants
			isVariant
			getParameterStruct
			getFullCommandHeader
			getRequiresOwner
		]
	}
	;

private arguments_list
	::= parameter+
	{
		recoverWhile = arguments_list_recover
	}
	;
private arguments_list_recover
	::= !(';'|NEWLINE|DOC_COMMENT_LITERAL|LINE_COMMENT)
	;


values_list_element
	::= doc_comment? values_list_name type_note_statement? values_list_body
	{
		pin=2;
		stubClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.stubs.api.CaosDefValuesListStub"
		extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefStubBasedElementImpl<?>"
		implements = [
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getTypeName
			getValuesListValues
			getValueForKey
			getAllKeys
			getTypeNoteString
			isBitflags
		]
	}
	;

values_list_value
	::= values_list_value_key '=' values_list_value_name (DASH values_list_value_description)?
	{
		pin=2;
		stubClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.stubs.api.CaosDefValuesListValueStub"
		extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefStubBasedElementImpl<?>"
		implements = [
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"

		]
		methods = [
			toStruct
			getKey
			getValue
			getDescription
			getEquality
			getPresentation
			getPresentationText
		]
	}
	;
private values_list_body
	::= OPEN_BRACE values_list_values? CLOSE_BRACE
	{
		pin=1;
	}
	;

private values_list_values
	::= values_list_statement+
	{
		//recoverWhile=values_list_recover
	}
	;
private values_list_statement
	::=	values_list_value
	|	region_heading
	//|	values_list_exclusives
	;

region_heading
	::= REGION_HEADING_LITERAL
	;

parameter
	::= variable_name variable_type
	{
		pin = 2;
		stubClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.stubs.api.CaosDefParameterStub"
		extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefStubBasedElementImpl<?>"
		implements = [
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"

		]
		methods = [
			getParameterName
			getParameterType
			toStruct
			getSimpleType
		]
	}
	;

variable_name
	::= ID
	|	WORD
	{
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getName
			setName
		]
	}
	;

return_type
	::= variable_type
	{
		pin = 1
	}
	;

variable_type
	::= '(' type_literal ')'
	|	bracket_string
	{
		methods = [
			getSimpleType
		]
	}
	;

type_literal
	::= ID
	|	WORD
	;
bracket_string
	::= '[' string_label ']'
	;

string_label
	::= (ID|WORD)+
	;

command
	::= command_word+
	{
	}
	;

command_word
	::= WORD
	{
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.psi.api.CaosScriptIsCommandToken"
		]
		methods = [
			getName
			setName
			getIndex
			getReference
			isVariant
			getPresentation
			getCommandString
			isEquivalentTo
		]
	}
	;

values_list_name
	::= AT_ID
	{
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getName
			setName
			getReference
		]
	}
	;

values_list_value_key
	::= VALUES_LIST_VALUE_KEY_LITERAL
	{
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getName
			setName
			getPresentationText
			getReference
		]
	}
	;

values_list_value_name
	::= VALUES_LIST_VALUE_NAME_LITERAL
	;

values_list_value_description
	::= values_list_value_description_element+
	;
values_list_value_description_element
	::= TEXT_LITERAL
	|	word_link
	;
doc_comment
	::= DOC_COMMENT_OPEN doc_comment_body? DOC_COMMENT_CLOSE
	{
		pin=1;
		stubClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.stubs.api.CaosDefDocCommentStub"
		extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefStubBasedElementImpl<?>"
		implements = [
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getParameterStruct
			getParameterStructs
			getReturnTypeStruct
			getRequiresOwner
		]
	}
	;

private doc_comment_body
	::= (doc_comment_front_comment doc_comment_element*)
	|	doc_comment_element+
	{
		recoverWhile=doc_comment_body_recover
	}
	;

doc_comment_front_comment
	::= (doc_comment_line comment_end_of_line?)+
	;

private doc_comment_body_recover
	::= !(DOC_COMMENT_CLOSE)
	;

private doc_comment_element
	::= doc_comment_param comment_end_of_line?
	|	doc_comment_return comment_end_of_line?
	|	doc_comment_line comment_end_of_line?
	|	doc_comment_hashtag_set comment_end_of_line?
	|	doc_comment_with_tag
	|	rvalue comment_end_of_line?
	|	lvalue comment_end_of_line?
	|	ownr comment_end_of_line?
	|	LEADING_ASTRISK
	|	comment_end_of_line
	{
		pin(".*")=1;
	}
	;



private doc_comment_hashtag_set
	::= doc_comment_hashtag+
	;

doc_comment_hashtag
	::= HASH_TAG
	{
		stubClass="com.badahori.creatures.plugins.intellij.agenteering.caos.def.stubs.api.CaosDefDocCommentHashtagStub"
		extends="com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.impl.CaosDefStubBasedElementImpl<?>"
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getName
			setName
			getReference
			isVariant
			getVariants
			getPresentation
		]
	}
	;

doc_comment_with_tag
	::= at_tag (doc_comment_line comment_end_of_line)?
	;

at_tag
	::= AT_ID
	;

doc_comment_line
	::= doc_comment_line_items doc_comment_line_items*
	{
		pin=1;
	}
	;

private doc_comment_line_items
	::= code_block
	|	word_link
	|	variable_link
	|	type_link
	|	comment_text
	|	comment_line_item_misc
	;

comment_text
	::= COMMENT_TEXT_LITERAL
	;

comment_line_item_misc
	::= '['
	|	WORD
	|	']'
	;

word_link
	::= '[' command ']'
	;
type_link
	::= TYPE_LINK_LITERAL
	;
code_block
	::= CODE_BLOCK_OPEN_BRACE (command_word|code_block_primitive)* CLOSE_BRACE
	{
		implements = [
			"com.intellij.psi.PsiLanguageInjectionHost"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			isValidHost
			updateText
			createLiteralTextEscaper
		]
	}
	;

code_block_primitive
	::= CODE_BLOCK_NUMBER
	|	CODE_BLOCK_EQ
	|	CODE_BLOCK_STRING
	|	CODE_BLOCK_ANIMATION
	| 	CODE_BLOCK_AND_OR
	|	CODE_BLOCK_COMMENT
	;

rvalue
	::= AT_RVALUE
	;

lvalue
	::= AT_LVALUE lvalue_return?
	;

private lvalue_return
	::= OPEN_PAREN lvalue_return_name CLOSE_PAREN
	;

lvalue_return_name
	::= ID
	;

ownr
	::= AT_OWNR
	;

doc_comment_return
	::= returnElement doc_comment_variable_type doc_comment_param_text?
	{
		pin=1;
		methods = [
			toStruct
		]
	}
	;

returnElement
	::= AT_RETURN
	;

doc_comment_param
	::= AT_PARAM variable_link doc_comment_variable_type? doc_comment_param_text?
	{
		pin=1;
		methods = [
			getParameterStruct
		]
	}
	;

variable_link
	::= VARIABLE_LINK_LITERAL
	{
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.badahori.creatures.plugins.intellij.agenteering.caos.def.psi.api.CaosDefCompositeElement"
		]
		methods = [
			getVariableNameTextRangeInLink
			getVariableName
			getName
			setName
			getTextOffset
			getReference
			getOffsetRange
		]
	}
	;

doc_comment_param_text
	::= COMMENT_TEXT_LITERAL
	;

doc_comment_variable_type
	::= '(' type_literal variable_type_tail? ')'
	|	bracket_string
	{
		pin=1;
		methods = [
			toStruct
		]
	}
	;

private variable_type_tail
	::= values_list_name
	|	type_note_statement
	|	variable_tail_limits
	|	variable_file_type
	;

variable_file_type
	::= AT_FILE
	;

type_note_statement
	::= COLON type_note
	{
		pin=1
	}
	;

type_note
	::= ID | VALUES_LIST_VALUE_KEY_LITERAL // Values list key overrides ID in some lexer contexts
	;

private variable_tail_limits
	::= '[' variable_tail_prime ']'
	{
		pin=1;
	}
	;

private variable_tail_prime
	::= from_until
	|	from_to
	|	variable_length
	{
		//recoverWhile=variable_tail_prime_recover
	}
	;

variable_length
	::= int
	{
		methods = [
			getIntValue
		]
	}
	;

from_to
	::= int TO int
	{
		pin=2;
		methods = [
			getIntRange
			fromInt="/int[0]"
			toInt="/int[1]"
		]
	}
	;

from_until
	::= int UNTIL int
	{
		pin=2;
		methods = [
			getIntRange
			fromInt="/int[0]"
			untilInt="/int[1]"
		]
	}
	;

int
	::= INT_LITERAL
	{
		methods = [
			getIntValue
		]
	}
	;



end_of_statement
	::= <<eol>>
	|	';'
	|	<<eos>>
	|	<<eof>>
	;

comment
	::= DOC_COMMENT_LITERAL
	|	LINE_COMMENT
	;

private comment_end_of_line
	::= line_terminator
	|	SEMI
	|	LEADING_ASTRISK
	;

private line_terminator
	::= NEWLINE
	|	<<eol>>
	;



variant
	::= variantCode ('=' variant_name)?
	;

variantCode
	::= ID
	;

variant_name
	::= VARIANT_NAME_LITERAL
	;

version_tag
	::= REGION_HEADING_LITERAL
	;