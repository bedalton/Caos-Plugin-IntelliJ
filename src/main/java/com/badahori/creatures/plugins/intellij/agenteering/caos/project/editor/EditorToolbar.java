package com.badahori.creatures.plugins.intellij.agenteering.caos.project.editor;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;
import java.lang.reflect.Method;
import java.util.ResourceBundle;
import java.util.logging.Logger;

public class EditorToolbar {
    private JComboBox<String> variant;
    private JButton trimSpaces;
    private JPanel panel;
    private JButton docsButton;
    private JButton injectButton;

    public JPanel getPanel() {
        return panel;
    }

    public void setVariantIsVisible(boolean visible) {
        variant.setVisible(visible);
    }

    public void addVariantListener(ItemListener itemListener) {
        variant.addItemListener(itemListener);
    }

    public void addDocsButtonClickListener(ActionListener actionListener) {
        docsButton.addActionListener(actionListener);
    }

    public void addInjectionHandler(ActionListener listener) {
        injectButton.addActionListener(listener);
    }

    public void showInjectionButton(boolean show) {
        injectButton.setVisible(show);
    }

    public void removeInjectionHandler(ActionListener listener) {
        injectButton.removeActionListener(listener);
    }

    public void setInjectButtonEnabled(boolean enable) {
        injectButton.setEnabled(enable);
    }

    public void setDocsButtonEnabled(boolean enabled) {
        docsButton.setEnabled(enabled);
    }

    public void selectVariant(String variantString) {
        variant.setSelectedItem(variantString);
    }

    public void selectVariant(int variantIndex) {
        variant.setSelectedIndex(variantIndex);
    }

    public String getSelectedVariant() {
        return (String) variant.getSelectedItem();
    }

    public void addTrimSpacesListener(ActionListener actionListener) {
        trimSpaces.addActionListener(actionListener);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), - 1, - 1));
        panel.setBackground(new Color(- 1));
        variant = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("C1");
        defaultComboBoxModel1.addElement("C2");
        defaultComboBoxModel1.addElement("CV");
        defaultComboBoxModel1.addElement("C3");
        defaultComboBoxModel1.addElement("DS");
        variant.setModel(defaultComboBoxModel1);
        variant.setToolTipText(this.$$$getMessageFromBundle$$$("com/badahori/creatures/plugins/intellij/caos-bundle", "caos.toolbar.varaint-tool-tip"));
        panel.add(variant, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        trimSpaces = new JButton();
        this.$$$loadButtonText$$$(trimSpaces, this.$$$getMessageFromBundle$$$("com/badahori/creatures//plugins/intellij/caos-bundle", "caos.toolbar.trim-error-spaces"));
        panel.add(trimSpaces, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        docsButton = new JButton();
        docsButton.setText("Docs");
        panel.add(docsButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        injectButton = new JButton();
        injectButton.setText("Inject");
        panel.add(injectButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = - 1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) {
                    break;
                }
                if (! haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
