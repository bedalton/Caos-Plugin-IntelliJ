package com.badahori.creatures.plugins.intellij.agenteering.caos.project.module;

import com.badahori.creatures.plugins.intellij.agenteering.caos.libs.CaosVariant;
import com.intellij.openapi.ui.ComboBox;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import javax.swing.text.JTextComponent;
import java.awt.*;
import java.util.List;

public class CaosProjectGeneratorPeerImpl {
    private JPanel mainPanel;
    private JComboBox<CaosVariant> variantComboBox;
    private JTextArea ignoredFileName;
    private JTextArea injectorGameNames;

    public JComponent getComponent() {
        return mainPanel;
    }

    public CaosVariant getSelectedVariant() {
        return (CaosVariant) variantComboBox.getSelectedItem();
    }

    public JComboBox<CaosVariant> getVariantComboBox() {
        return variantComboBox;
    }

    public void setSelectedVariant(CaosVariant variant) {
        variantComboBox.setSelectedItem(variant);
    }

    public void setIgnoredFileNames(final List<String> filenames) {
        set(ignoredFileName, filenames);
    }

    public String[] getIgnoredFileNames() {
        return get(ignoredFileName);
    }

    public void setInjectorGameNames(final List<String> items) {
        set(injectorGameNames, items);
    }

    public String[] getInjectorGameNames() {
        return get(injectorGameNames);
    }

    public void set(final JTextComponent field, final List<String> items) {
        final StringBuilder builder = new StringBuilder();
        for (String item : items) {
            builder.append(item).append("\n");
        }
        field.setText(builder.toString());
    }

    public String[] get(final JTextComponent field) {
        return field.getText().trim().split("\n");
    }

    private void createUIComponents() {
        variantComboBox = new ComboBox<>(new CaosVariant[]{
                CaosVariant.C1.INSTANCE,
                CaosVariant.C2.INSTANCE,
                CaosVariant.CV.INSTANCE,
                CaosVariant.C3.INSTANCE,
                CaosVariant.DS.INSTANCE,
                CaosVariant.SM.INSTANCE
        });
        variantComboBox.setToolTipText("CAOS Variant");
        variantComboBox.setRenderer((list, value, index, isSelected, cellHasFocus) -> {
            if (value == null) {
                return new JLabel("UNKNOWN");
            } else {
                return new JLabel(value.getFullName());
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("fill:d:grow", "center:d:noGrow,top:3dlu:noGrow,center:d:grow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:d:grow"));
        mainPanel.setMinimumSize(new Dimension(184, 300));
        mainPanel.setPreferredSize(new Dimension(178, 400));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        CellConstraints cc = new CellConstraints();
        mainPanel.add(panel1, cc.xy(1, 1));
        final JLabel label1 = new JLabel();
        label1.setText("CAOS Variant");
        panel1.add(label1);
        panel1.add(variantComboBox);
        final JSeparator separator1 = new JSeparator();
        separator1.setInheritsPopupMenu(false);
        separator1.setMaximumSize(new Dimension(32767, 3));
        separator1.setMinimumSize(new Dimension(1, 3));
        separator1.setPreferredSize(new Dimension(0, 3));
        separator1.setRequestFocusEnabled(false);
        mainPanel.add(separator1, cc.xy(1, 3, CellConstraints.LEFT, CellConstraints.TOP));
        ignoredFileName = new JTextArea();
        mainPanel.add(ignoredFileName, cc.xy(1, 7, CellConstraints.FILL, CellConstraints.FILL));
        final JLabel label2 = new JLabel();
        label2.setText("Ignored File Names:");
        mainPanel.add(label2, cc.xy(1, 5, CellConstraints.FILL, CellConstraints.TOP));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
