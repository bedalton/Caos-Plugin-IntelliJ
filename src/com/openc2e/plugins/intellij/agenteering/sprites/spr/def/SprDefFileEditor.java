package com.openc2e.plugins.intellij.agenteering.sprites.spr.def;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.ComboBox;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.ui.JBColor;
import com.intellij.ui.components.JBList;
import com.openc2e.plugins.intellij.agenteering.sprites.spr.def.SprDefParseResult.SprDefParseData;

import javax.swing.*;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

public class SprDefFileEditor {
    private JPanel main;
    private JList<SprDefImageData> imageList;
    private JComboBox backgroundColor;
    private JComboBox scale;
    private final List<SprDefImageData> images = new ArrayList<>();
    private final Project project;
    private final VirtualFile virtualFile;
    public static final String TRANSPARENT = "Transparent";
    public static final String BLACK = "Black";
    public static final String LIGHT_GREY = "Light Grey";
    public static final String DARK_GREY = "Dark Grey";
    public static final String WHITE = "White";
    public static final String RED = "Red";
    public static final String BLUE = "Blue";
    public static final String GREEN = "Green";


    SprDefFileEditor(Project project, VirtualFile file) {
        this.virtualFile = file;
        this.project = project;
        SprDefParseResult result = SprDef.readSprData(project, file);
        if (result instanceof SprDefParseData) {
            this.images.addAll(((SprDefParseData) result).getImages());
        }
        $$$setupUI$$$();
        backgroundColor.addItemListener((itemEvent) -> {
            final String color = (String) itemEvent.getItem();
            SprDefImageDataCellRenderer.INSTANCE.setColorName(color);
            switch (color) {
                case TRANSPARENT:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(new Color(0, 0, 0, 0));
                    break;
                case BLACK:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.BLACK);
                    break;
                case DARK_GREY:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.DARK_GRAY);
                    break;
                case WHITE:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.WHITE);
                    break;

                case LIGHT_GREY:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.LIGHT_GRAY);
                    break;
                case RED:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.RED);
                    break;
                case BLUE:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.BLUE);
                    break;
                case GREEN:
                    SprDefImageDataCellRenderer.INSTANCE.setColor(JBColor.GREEN);
                    break;
            }
            imageList.updateUI();
        });
        imageList.updateUI();
        scale.addItemListener((e) -> {
            final String value = (String) Objects.requireNonNull(scale.getSelectedItem());
            final float newScale = Float.parseFloat(value.substring(0, value.length() - 1));
            SprDefImageDataCellRenderer.INSTANCE.setScale(newScale);
            imageList.updateUI();
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        main = new JPanel();
        main.setLayout(new BorderLayout(10, 0));
        final JScrollPane scrollPane1 = new JScrollPane();
        main.add(scrollPane1, BorderLayout.CENTER);
        scrollPane1.setViewportView(imageList);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        main.add(panel1, BorderLayout.NORTH);
        final JLabel label1 = new JLabel();
        label1.setText("Background Color");
        panel1.add(label1);
        panel1.add(backgroundColor);
        final JLabel label2 = new JLabel();
        label2.setText("Scale");
        panel1.add(label2);
        panel1.add(scale);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

    private void createUIComponents() {
        imageList = new JBList<>(images);
        initDragAndDrop(imageList);
        imageList.setCellRenderer(SprDefImageDataCellRenderer.INSTANCE);
        backgroundColor = new ComboBox<>(new String[]{
                TRANSPARENT,
                BLACK,
                WHITE,
                DARK_GREY,
                LIGHT_GREY,
                RED,
                GREEN,
                BLUE
        });
        backgroundColor.setSelectedItem(SprDefImageDataCellRenderer.INSTANCE.getColorName());
        scale = new ComboBox<>(new String[]{
                "1x",
                "1.25x",
                "1.5x",
                "2x",
                "2.5x",
                "3x",
                "4x",
                "5x"
        });
        scale.setSelectedItem(SprDefImageDataCellRenderer.INSTANCE.getScale() + "x");
    }

    private void initDragAndDrop(JList<SprDefImageData> dndList) {
        dndList.setDragEnabled(true);
        dndList.setDropMode(DropMode.INSERT);
        dndList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        dndList.setTransferHandler(new TransferHandler() {
            private int[] selectedIndices;
            private int insertIndex;
            private boolean beforeIndex = false; //Start with `false` therefore if it is removed from or added to the list it still works

            @Override
            public int getSourceActions(JComponent comp) {
                return MOVE;
            }

            @Override
            public Transferable createTransferable(JComponent comp) {
                selectedIndices = dndList.getSelectedIndices();
                return new SprImageDataTransferable(dndList.getSelectedValuesList());
            }

            @Override
            public void exportDone(JComponent comp, Transferable trans, int action) {
                int movement = (int) Arrays.stream(selectedIndices).filter((i) -> i > insertIndex).count();
                if (action == MOVE) {
                    for (int index : selectedIndices) {
                        if (beforeIndex) {
                            images.remove(index + movement);
                        } else {
                            images.remove(index);
                        }
                    }
                    selectedIndices = new int[0];
                }
            }

            @Override
            public boolean canImport(TransferSupport support) {
                return support.isDataFlavorSupported(DataFlavor.javaFileListFlavor) || support.isDataFlavorSupported(SprImageDataTransferableKt.getSprImageDataFlavor());
            }

            @Override
            public boolean importData(TransferSupport support) {
                List<SprDefImageData> data = SprDefEditorUtil.parseTransferable(project, virtualFile, support.getTransferable(), images.size());
                if (data == null) {
                    return false;
                }
                JList.DropLocation dl = (JList.DropLocation) support.getDropLocation();
                images.addAll(dl.getIndex(), data);
                insertIndex = dl.getIndex();
                return true;
            }
        });
    }

    private void writeVirtualFileContents() {

    }

    public void addImages(List<SprDefImageData> images) {
        images.addAll(images);
        imageList.updateUI();
    }

    public List<SprDefImageData> getImageData() {
        return images;
    }
}
