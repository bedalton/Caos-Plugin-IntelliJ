@variant(CV = Creatures Village)

/*
 * Returns the agent [OWNR]'s attention was on when the current script was entered. This is only
 * valid if [OWNR] is a creature. Compare [IITT].
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
_IT_ (agent);

/*
 * First macro script parameters specified in command [MESG WRT+]]
 * #Caos
 *
 * @rvalue
 * @return (any)
 */
_P1_ (any);

/*
 * Second macro script parameters specified in command [MESG WRT+]]
 * #Caos
 *
 * @rvalue
 * @return (any)
 */
_P2_ (any);

/*
 * Returns the value of the UP constant.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
_UP_ (integer);

/*
 * Set a variable to its absolute value, so if var is negative var = 0 - {var}, otherwise {var} is
 * left alone.
 * #Variables
 *
 * @param {var} (variable)
 *
 */
ABSV (command) var (variable);

/*
 * Set acceleration due to gravity in pixels per tick squared.
 * #Motion
 *
 * @param {acceleration} (float)
 *
 */
ACCG (command) acceleration (float);

/*
 * Returns target's acceleration due to gravity in pixels per tick squared.
 * #Motion
 *
 * @rvalue
 * @return (float)
 */
ACCG (float);

/*
 * Returns arccosine of {x} in degrees.
 * #Variables
 *
 * @rvalue
 * @param {x} (float)
 * @return (float)
 *
 */
ACOS (float) x (float);

/*
 * Add a new background to the given metaroom. Use [BKGD] to change the current displayed
 * background.
 * #Map
 *
 * @param {metaroomId} (integer)
 * @param {backgroundFile} (string)
 *
 */
ADDB (command) metaroomId (integer) backgroundFile (string);

/*
 * Creates a new metaroom with the given coordinates. Specifies the starting background file.
 * Returns the id of the new metaroom.
 * #Map
 *
 * @rvalue
 * @param {x} (integer)
 * @param {y} (integer)
 * @param {width} (integer)
 * @param {height} (integer)
 * @param {background} (string)
 * @return (integer)
 *
 */
ADDM (integer) x (integer) y (integer) width (integer) height (integer) background (string);

/*
 * Creates a new room within a metaroom. Rooms have vertical left and right walls, but potentially
 * sloped floors and ceilings. The coordinates specify the exact shape. Returns the id of the new
 * room.
 * #Map
 *
 * @rvalue
 * @param {metaroomId} (integer)
 * @param {xLeft} (integer)
 * @param {xRight} (integer)
 * @param {yLeftCeiling} (integer)
 * @param {yRightCeiling} (integer)
 * @param {yLeftFloor} (integer)
 * @param {yRightFloor} (integer)
 * @return (integer)
 *
 */
ADDR (integer) metaroomId (integer) xLeft (integer) xRight (integer) yLeftCeiling (integer) yRightCeiling (integer) yLeftFloor (integer) yRightFloor (integer);

/*
 * Concatenates two strings, so {var} = {var} + {append}.
 * #Variables
 *
 * @param {var} (variable)
 * @param {append} (string)
 *
 */
ADDS (command) var (variable) append (string);

/*
 * Adds two integers or floats, so {var} = {var} + {sum}.
 * #Variables
 *
 * @param {var} (variable)
 * @param {sum} (decimal)
 *
 */
ADDV (command) var (variable) sum (decimal);

/*
 * Set aerodynamic factor as a percentage. The velocity is reduced by this factor each tick.
 * #Motion
 *
 * @param {aerodynamics} (integer)
 *
 */
AERO (command) aerodynamics (integer);

/*
 * Returns aerodynamic factor as a percentage.
 * #Motion
 *
 * @rvalue
 * @return (integer)
 */
AERO (integer);

/*
 * Forces a creature to age the given number of times. See also [CAGE].
 * #Creatures
 *
 * @param {times} (integer)
 *
 */
AGES (command) times (integer);

/*
 * Given a unique identifier, returns the corresponding agent. Returns [NULL] if the agent no
 * longer exists. [UNID] extracts the unique id. NOTE: This should only be used for external
 * programs to persistently refer to an agent during a session. Variables can use [SETA] to store
 * agent r-values directly for internal use. Unique identifiers can change across saved sessions.
 * #Debug
 *
 * @rvalue
 * @param {uniqueId} (integer)
 * @return (agent)
 *
 */
AGNT (agent) uniqueId (integer);

/*
 * Tell the agent to draw the current sprite with alpha channeling (send 1 as first parameter) or
 * normally (send 0 as first parameter). The second parameter is the intensity 0 being no blending
 * and 255 being maximum blending. For a compound agent remember to set the [PART] number.
 * #AgentSprites
 *
 * @param {onOff} (integer)
 * @param {alphaValue} (integer)
 *
 */
ALPH (command) onOff (integer) alphaValue (integer);

/*
 * Directly adjusts the level of a CA in a room. Specify an identifier of -1 to use the room of
 * the midpoint of the target agent.
 * #Map
 *
 * @param {roomId} (integer)
 * @param {caIndex} (integer)
 * @param {caDelta} (float)
 *
 */
ALTR (command) roomId (integer) caIndex (integer) caDelta (float);

/*
 * Peform a bitwise AND on an integer variable, so {var} = {var} & {value}.
 * #Variables
 *
 * @param {var} (variable)
 * @param {value} (integer)
 *
 */
ANDV (command) var (variable) value (integer);

/*
 * Specify a list of [POSE]s such as [1 2 3] to animate the current agent/part. Put 255 at the end
 * to continually loop. The first number after the 255 is an index into the animation string where
 * the looping restarts from - this defaults to 0 if not specified. e.g. [0 1 2 10 11 12 255 3]
 * would loop just the 10, 11, 12 section.
 * #AgentSprites
 *
 * @param {poseList} [anim]
 *
 */
ANIM (command) poseList [anim];

/*
 * This is like [ANIM], only it reads the poses from a string such as "3 4 5 255". Use this when
 * you need to dynamically construct animations. Use [ANIM] in general as it is quicker to execute,
 * although they are the same speed once the animation is underway.
 * #AgentSprites
 *
 * @param {animString} (string)
 *
 */
ANMS (command) animString (string);

/*
 * Creature approaches the [_IT_] agent. If there is no [_IT_] agent, the creature follows the CA
 * smell to find an agent of that category. The script resumes when it gets there, or if it can't
 * get any further.
 * #Creatures
 *
 */
APPR (command);

/*
 * Lists all command names whose help contains the text.
 * #Debug
 *
 * @param {searchText} (string)
 *
 */
APRO (command) searchText (string);

/*
 * Returns arcsine of {x} in degrees.
 * #Variables
 *
 * @rvalue
 * @param {x} (float)
 * @return (float)
 *
 */
ASIN (float) x (float);

/*
 * Make the creature asleep or awake. 1 for asleep, 0 for awake.
 * #Creatures
 *
 * @param {asleep} (integer)
 *
 */
ASLP (command) asleep (integer);

/*
 * Returns 1 if the creature is asleep, 0 otherwise.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
ASLP (integer);

/*
 * Returns arctangent of {x} in degrees.
 * #Variables
 *
 * @rvalue
 * @param {x} (float)
 * @return (float)
 *
 */
ATAN (float) x (float);

/*
 * Returns the current focus of attention id.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
ATTN (integer);

/*
 * Set attributes of target. Sum the values in the Attribute Flags table to get the attribute
 * value to pass into this command.
 * #AgentAttributes
 *
 * @param {attributes} (integer)
 *
 */
ATTR (command) attributes (integer);

/*
 * Return attributes of target.
 * #AgentAttributes
 *
 * @rvalue
 * @return (integer)
 */
ATTR (integer);

/*
 * This is the OVnn variable of the agent passed in. It is equivalent to target agent, OVnn, but
 * means that you don't need to target it first :) You can also use them to implement primitive
 * arrays.
 * #Variables
 *
 * @lvalue
 * @rvalue
 * @param {agent} (agent)
 * @param {index} (integer)
 * @return (variable)
 *
 */
AVAR (variable) agent (agent) index (integer);

/*
 * Set the base image for this agent or part. The index is relative to the first_image specified
 * in the NEW: ] command. Future [POSE]/[ANIM] commands and any [ANIM] in progress are relative
 * to this new base.
 * #AgentSprites
 *
 * @param {index} (integer)
 *
 */
BASE (command) index (integer);

/*
 * Returns the BASE image for the current agent/part. Returns -1 if an invalid part.
 * #AgentSprites
 *
 * @rvalue
 * @return (integer)
 */
BASE (integer);

/*
 * Sets the creature permissions for target. Sum the entries in the Creature Permissions table to
 * get the value to use.
 * #AgentAttributes
 *
 * @param {permissions} (integer)
 *
 */
BHVR (command) permissions (integer);

/*
 * Returns the creature permissions for the target agent.
 * #AgentAttributes
 *
 * @rvalue
 * @return (integer)
 */
BHVR (integer);

/*
 * Returns a string containing all the background names for the specified metaroom in a comma
 * seperated list.
 * #Map
 *
 * @rvalue
 * @param {metaroomId} (integer)
 * @return (string)
 *
 */
BKDS (string) metaroomId (integer);

/*
 * Change the current background displayed for the selected camera (with [SCAM]). Transition is as
 * for [META]. The background must have been specified with the [ADDM] or [ADDB] command first.
 * #Camera
 *
 * @param {metaroomId} (integer)
 * @param {background} (string)
 * @param {transition} (integer)
 *
 */
BKGD (command) metaroomId (integer) background (string) transition (integer);

/*
 * Returns the name of the background file currently shown by the given camera.
 * #Camera
 *
 * @rvalue
 * @param {metaroomId} (integer)
 * @return (string)
 *
 */
BKGD (string) metaroomId (integer);

/*
 * Saves an image from the [TARG] agent's sprite file as a bitmap. The file will be saved using the
 * specified name to the My Pictures folder.
 * #AgentSprites
 *
 * @param {pose} (integer)
 * @param {filename} (string)
 *
 */
BMPS (command) pose (integer) filename (string);

/*
 * Similar to [WEAR], only puts the given set of clothes on every body part. This only works for the
 * non tintable overlay file
 * #Creatures
 *
 * @param {setNumber} (integer)
 * @param {layer} (integer)
 *
 */
BODY (command) setNumber (integer) layer (integer);

/*
 * Return the set number of the outfit the norn is wearing on the outer most layer or -1 if it is
 * not wearing anything
 * #Creatures
 *
 * @rvalue
 * @param {bodypart} (integer)
 * @return (integer)
 *
 */
BODY (integer) bodypart (integer);

/*
 * Signals the target creature as having been born - this sends a birth event, and sets the [TAGE]
 * ticking.
 * #Creatures
 *
 */
BORN (command);

/*
 * Returns the variant number for the appearance of the specified body part of the [TARG] creature
 * #Creatures
 *
 * @rvalue
 * @param {bodyPartIndex} (integer)
 * @return (integer)
 *
 */
BRED (integer) bodyPartIndex (integer);

/*
 * Sets the Map's Metaroom and Room index bases for adding new rooms/metarooms.
 * #Camera
 *
 * @param {metaroomBase} (integer)
 * @param {roomBase} (integer)
 *
 */
BRMI (command) metaroomBase (integer) roomBase (integer);

/*
 * Dumps the sizes of the binary data dumps for current lobes and tracts.
 * #Brain
 *
 */
BRN: DMPB (command);

/*
 * Dumps a dendrite as binary data.
 * #Brain
 *
 * @param {tractNumber} (integer)
 * @param {dendriteNumber} (integer)
 *
 */
BRN: DMPD (command) tractNumber (integer) dendriteNumber (integer);

/*
 * Dumps a lobe as binary data.
 * #Brain
 *
 * @param {lobeNumber} (integer)
 *
 */
BRN: DMPL (command) lobeNumber (integer);

/*
 * Dumps a neuron as binary data.
 * #Brain
 *
 * @param {lobeNumber} (integer)
 * @param {neuronNumber} (integer)
 *
 */
BRN: DMPN (command) lobeNumber (integer) neuronNumber (integer);

/*
 * Dumps a tract as binary data.
 * #Brain
 *
 * @param {tractNumber} (integer)
 *
 */
BRN: DMPT (command) tractNumber (integer);

/*
 * Sets a dendrite weight.
 * #Brain
 *
 * @param {tractNumber} (integer)
 * @param {dendriteNumber} (integer)
 * @param {weightNumber} (integer)
 * @param {newValue} (float)
 *
 */
BRN: SETD (command) tractNumber (integer) dendriteNumber (integer) weightNumber (integer) newValue (float);

/*
 * Sets a lobe's SV rule float value.
 * #Brain
 *
 * @param {lobeNumber} (integer)
 * @param {lineNumber} (integer)
 * @param {newValue} (float)
 *
 */
BRN: SETL (command) lobeNumber (integer) lineNumber (integer) newValue (float);

/*
 * Sets a neuron weight.
 * #Brain
 *
 * @param {lobeNumber} (integer)
 * @param {neuronNumber} (integer)
 * @param {stateNumber} (integer)
 * @param {newValue} (float)
 *
 */
BRN: SETN (command) lobeNumber (integer) neuronNumber (integer) stateNumber (integer) newValue (float);

/*
 * Sets a tract's SV rule float value.
 * #Brain
 *
 * @param {tractNumber} (integer)
 * @param {lineNumber} (integer)
 * @param {newValue} (float)
 *
 */
BRN: SETT (command) tractNumber (integer) lineNumber (integer) newValue (float);

/*
 * Returns the variant number for target creature.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
BVAR (integer);

/*
 * Returns 1 if the creature is within reach of the IT agent, or 0 if it isn't.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
BYIT (integer);

/*
 * Returns relative position of bottom side of cabin.
 * #Vehicles
 *
 * @rvalue
 * @return (integer)
 */
CABB (integer);

/*
 * Returns relative position of left side of cabin.
 * #Vehicles
 *
 * @rvalue
 * @return (integer)
 */
CABL (integer);

/*
 * Set a vehicles cabin rectangle. The cabin is the area in which agents inside the vehicle are
 * kept. The rectangle is relative to the position of the vehicle. Default cabin is the bounding
 * rectangle of part 0. You might want to use [ATTR] to set attribute Greedy Cabin, on the vehicle.
 * This will make it automatically pick up items which are dropped in the cabin.
 * #Vehicles
 *
 * @param {left} (integer)
 * @param {top} (integer)
 * @param {right} (integer)
 * @param {bottom} (integer)
 *
 */
CABN (command) left (integer) top (integer) right (integer) bottom (integer);

/*
 * Set the plane that vehicle passengers are at. This is relative to the vehicle's plane.
 * #Vehicles
 *
 * @param {plane} (integer)
 *
 */
CABP (command) plane (integer);

/*
 * Returns the plane that passengers of the vehicle are at.
 * #Vehicles
 *
 * @rvalue
 * @return (integer)
 */
CABP (integer);

/*
 * Returns relative position of right side of cabin.
 * #Vehicles
 *
 * @rvalue
 * @return (integer)
 */
CABR (integer);

/*
 * Returns relative position of topside of cabin.
 * #Vehicles
 *
 * @rvalue
 * @return (integer)
 */
CABT (integer);

/*
 * Sets the room number which things in the cabin think they are in. By default, the value is -1,
 * and the room is the one underneath wherever the agent happens to be. Make sure you set this if
 * the vehicle ever remotely leaves the room system. This command effects values returned from
 * [ROOM] and [GRID]. It won't apply to some aspects of Creatures in the vehicle.
 * #Vehicles
 *
 * @param {cabinRoomId} (integer)
 *
 */
CABV (command) cabinRoomId (integer);

/*
 * Returns the cabin room number.
 * #Vehicles
 *
 * @rvalue
 * @return (integer)
 */
CABV (integer);

/*
 * Set the capacity or width of the cabin. This will determine how many passengers the cabin can
 * hold, each passenger will be on a separate plane within the cabin. Use [CABP] to set the plane of
 * the first agent relative to the cabin. The default width is zero, this means that the cabin
 * will accept any number of passengers and will place them all on the same plane.
 * #Vehicles
 *
 * @param {cabinCapacity} (integer)
 *
 */
CABW (command) cabinCapacity (integer);

/*
 * This associates the classification specified with the CA specified. This allows the linking of
 * CA's to classifiers within creatures' brains.
 * #Map
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {caIndex} (integer)
 *
 */
CACL (command) family (integer) genus (integer) species (integer) caIndex (integer);

/*
 * Returns life stage of target creature. See also [AGES].
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
CAGE (integer);

/*
 * Executes the specified CAOS commands instantly. The local environment ([_IT_] VAxx TARG OWNR
 * etc.) will be promoted to the script's environment if inline is non-zero. If state_trans is
 * non-zero, then [FROM] and [OWNR] are propogated, if zero, then the script is run orphaned. CAOS
 * returns the output of the script. As you can put multiple scripts through in one call, the
 * output is potentially concatenated. Note that all sets of scripts are executed in the same
 * virtual machine if inline is non-zero, otherwise the virtual machine is reset before each
 * script is passed. The params _p0_ and _p1_ are passed in as the parameters to the script, even
 * when inline. You can execute "outv 7 endm scrp 3 7 11 6 outv 3 endm outv 9", which will make a
 * script 3 7 11 6 and return "79".
 * If throws is non-zero then the system will throw exceptions, otherwise it will return "***"
 * with report set to the exception sid in the CAOS catalogue TAG. If catches is non-zero then the
 * system will catch any run errors encountered and return them in report, having set the return
 * value to "###" first.
 * #Scripts
 *
 * @rvalue
 * @param {inline} (integer)
 * @param {stateTrans} (integer)
 * @param {p1} (any)
 * @param {p2} (any)
 * @param {commands} (string)
 * @param {throws} (integer)
 * @param {catches} (integer)
 * @param {report} (variable)
 * @return (string)
 *
 */
CAOS (string) inline (integer) stateTrans (integer) p1 (any) p2 (any) commands (string) throws (integer) catches (integer) report (variable);

/*
 * Returns the the agent currently holding the target, or [NULL] if there is none.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
CARR (agent);

/*
 * Return the category id for the given classifier. The catalogue tag "Agent Classifiers"
 * specifies these, and you can have more than 40. They are tested in order until the first match
 * is found. 39 (or "unclassified") is always returned if none match.
 * #Agents
 *
 * @rvalue
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @return (integer)
 *
 */
CATI (integer) family (integer) genus (integer) species (integer);

/*
 * Returns the name of the given category. For example, "toy" or "bad bug". The catalogue tag
 * "Agent Categories" stores these. If the id is out of range, CATX returns an empty string.
 * #Agents
 *
 * @rvalue
 * @param {categoryId} (integer)
 * @return (string)
 *
 */
CATX (string) categoryId (integer);

/*
 * Returns the last character received by the currently selected character translator.
 * #CompoundAgents
 *
 * @rvalue
 * @return (string)
 */
CHAR (string);

/*
 * Sets a character in a string. String indices begin at 1.
 * #Variables
 *
 * @param {string} (variable)
 * @param {index} (integer)
 * @param {character} (integer)
 *
 */
CHAR (command) string (variable) index (integer) character (integer);

/*
 * Returns a character from a string. String indicies begin at 1.
 * #Variables
 *
 * @rvalue
 * @param {string} (string)
 * @param {index} (integer)
 * @return (integer)
 *
 */
CHAR (integer) string (string) index (integer);

/*
 * Adjusts chemical (0 to 255) by concentration -1.0 to +1.0 in the target creature's bloodstream.
 * #Creatures
 *
 * @param {chemical} (integer)
 * @param {adjustment} (float)
 *
 */
CHEM (command) chemical (integer) adjustment (float);

/*
 * Returns concentration (0.0 to 1.0) of chemical (1 to 255) in the target creature's bloodstream.
 * #Creatures
 *
 * @rvalue
 * @param {chemical} (integer)
 * @return (float)
 *
 */
CHEM (float) chemical (integer);

/*
 * Set the click action, which is the identifier of the message sent to the agent when it is
 * clicked on, provided attribute Activateable is set. Default is activate 1. Use -1 to prevent it
 * sending a message. Also overriden by [CLIK]. Remember that the early Message Numbers differ
 * slightly from Script Numbers.
 * #Input
 *
 * @param {message} (integer)
 *
 */
CLAC (command) message (integer);

/*
 * This returns the CLAC action of the [TARG] object. If the [TARG] is in [CLIK] mode, then the return
 * value is -2. Otherwise it is the CLAC action.
 * #AgentInteractions
 *
 * @rvalue
 * @return (integer)
 */
CLAC (integer);

/*
 * Sets a chain of three message ids to cycle through as the agent is clicked on. Entries of -1
 * are ignored. Overriden by [CLAC].
 * #Input
 *
 * @param {message1} (integer)
 * @param {message2} (integer)
 * @param {message3} (integer)
 *
 */
CLIK (command) message1 (integer) message2 (integer) message3 (integer);

/*
 * This returns the CLIK action of the [TARG] object. If the object is in [CLAC] mode, then it returns
 * -2, else the return values are as follows:
 * 0 -> Current click action number (1,2,3)
 * 1 -> First CLIK action.
 * 2 -> Second CLIK action.
 * 3 -> Third CLIK action
 * #AgentInteractions
 *
 * @rvalue
 * @param {whichValue} (integer)
 * @return (integer)
 *
 */
CLIK (integer) whichValue (integer);

/*
 * Move current camera so top left corner of view is at world coordinate x y. Set pan 0 to jump
 * straight to location, pan 1 to smoothly scroll there (unless in a different meta room).
 * #Camera
 *
 * @param {x} (integer)
 * @param {y} (integer)
 * @param {pan} (integer)
 *
 */
CMRA (command) x (integer) y (integer) pan (integer);

/*
 * Centre current camera on world coordinate x y. Set pan 0 to jump straight to location, pan 1 to
 * smoothly scroll there (unless in different meta room), and pan 2 to smoothly scroll only if the
 * destination is already visible.
 * #Camera
 *
 * @param {x} (integer)
 * @param {y} (integer)
 * @param {pan} (integer)
 *
 */
CMRP (command) x (integer) y (integer) pan (integer);

/*
 * Centre current camera on target. Set pan 0 to jump straight to location, pan 1 to smoothly
 * scroll there (unless in different meta room), and pan 2 to smoothly scroll only if the
 * destination is already visible.
 * #Camera
 *
 * @param {pan} (integer)
 *
 */
CMRT (command) pan (integer);

/*
 * Returns the x coordinate of the centre of the current camera.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
CMRX (integer);

/*
 * Returns the y coordinate of the centre of the current camera.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
CMRY (integer);

/*
 * Returns event script number currently being run by target. Returns -1 if not running anything.
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
CODE (integer);

/*
 * Returns family of script currently being run by target. Returns -1 if not running anything.
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
CODF (integer);

/*
 * Returns genus of script currently being run by target. Returns -1 if not running anything.
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
CODG (integer);

/*
 * Returns the offset into the source code of the next instruction to be executed by the target.
 * Use [SORC] to get the source code. Returns -1 if not running anything.
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
CODP (integer);

/*
 * Returns species of script currently being run by target. Returns -1 if not running anything.
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
CODS (integer);

/*
 * Returns cosine of theta. Theta should be in degrees.
 * #Math
 *
 * @rvalue
 * @param {theta} (float)
 * @return (float)
 *
 */
COS_ (float) theta (float);

/*
 * Returns 1 if the agent is a creature, 0 if not.
 * #Creatures
 *
 * @rvalue
 * @param {agent} (agent)
 * @return (integer)
 *
 */
CREA (integer) agent (agent);

/*
 * Returns the day within the current season, from 0 to [GAME] "engine_LengthOfSeasonInDays" - 1.
 * See also [HIST DATE].
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
DATE (integer);

/*
 * Returns the current day of the month
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
DAYT (integer);

/*
 * Confirms that a condition is true. If it isn't, it displays a runtime error dialog.
 * #Debug
 *
 * @param {condition} (condition)
 *
 */
DBG: ASRT (command) condition (condition);

/*
 * Clears agent profiling information. Measurements output with [DBG: PROF] start here.
 * #Debug
 *
 */
DBG: CPRO (command);

/*
 * This flushes the system's input buffers - usually only useful if [DBG: PAWS]ed.
 * #Debug
 *
 */
DBG: FLSH (command);

/*
 * Sends [CAOS] documentation to the output stream. Sort order is 0 for alphabetical, 1 for
 * categorical.
 * #Debug
 *
 * @param {sortOrder} (integer)
 *
 */
DBG: HTML (command) sortOrder (integer);

/*
 * Send a string to the debug log - use [DBG: POLL] to retrieve.
 * #Debug
 *
 * @param {value} (string)
 *
 */
DBG: OUTS (command) value (string);

/*
 * Send a number to the debug log - use [DBG: POLL] to retrieve.
 * #Debug
 *
 * @param {value} (decimal)
 *
 */
DBG: OUTV (command) value (decimal);

/*
 * This pauses everything in the game. No game driven ticks will occur until a [DBG: PLAY] command
 * is issued, so this command is only useful for debugging. Use [PAUS] for pausing of specific
 * agents, which you can use to implement a pause button.
 * #Debug
 *
 */
DBG: PAWS (command);

/*
 * This command undoes a previously given [DBG: PAWS] and allows game time to flow as normal.
 * #Debug
 *
 */
DBG: PLAY (command);

/*
 * This takes all of the [DBG: OUTV] and [DBG: OUTS] output to date and writes it to the output
 * stream.
 * #Debug
 *
 */
DBG: POLL (command);

/*
 * Sends agent profile information to the output stream. This gives you data about the time the
 * engine spends running the update and message handling code for each classifier. The data is
 * measured from engine startup, or the point marked with [DBG: CPRO]. It's output in comma
 * separated value (CSV) format, so you can load it into a spreadsheet (e.g. Gnumeric or Excel)
 * for sorting and summing.
 * #Debug
 *
 */
DBG: PROF (command);

/*
 * Pauses the game when the given agent next executes a single line of [CAOS] code. This pause is
 * mid-tick, and awaits incoming requests, or the pause key. Either another DBG: TACK or a DBG:
 * PLAY command will make the engine carry on. Any other incoming requests will be processed as
 * normal. However, the virtual machine of the tacking agent is effectively in mid-processing, so
 * some [CAOS] commands may cause unpredictable results, and even crash the engine. In particular,
 * you shouldn't [KILL] the tacking agent. You can see which agent is being tracked with [TACK].
 * #Debug
 *
 * @param {follow} (agent)
 *
 */
DBG: TACK (command) follow (agent);

/*
 * This command forces a tick to occur. It is useful in external apps to drive the game according
 * to a different clock instead of the game clock.
 * #Debug
 *
 */
DBG: TOCK (command);

/*
 * Changes the world tick [WTIK] to the given value. This should only be used for debugging, as it
 * will potentially leave confusing information in the creature history, and change the time when
 * delayed messages are processed. Its main use is to jump to different seasons and times of day.
 * #Debug
 *
 * @param {newWorldTick} (integer)
 *
 */
DBG: WTIK (command) newWorldTick (integer);

/*
 * Dumps debug information for the virtual machine of target. Whatever the type of the variable, a
 * string is output.
 * Variable can be:
 * -1 : Whether in [INST] or not
 * -2 : Whether in [LOCK] or not
 * -3 : Current [TARG] of virtual machine
 * -4 : [OWNR] - should be the same as our outer [TARG]
 * -5 : [FROM] - who sent the message which is being run
 * -6 : IT - if a Creature, where their attention was
 * -7 : [PART] - part number being worked on for compound agents
 * -8 : [_P1_] - first parameter of message, if in a message
 * -9 : [_P2_] - second parameter of message, if in a mesesage
 * 0 to 99 : Local variables VA00 to VA99
 * #Debug
 *
 * @rvalue
 * @param {variable} (integer)
 * @return (string)
 *
 */
DBG# (string) variable (integer);

/*
 * Dumps debug information for target. Whatever the type of the variable, a string is output.
 * Variable can be:
 * 0 to 99 : agent variables OV00 to OV99
 * -1 : Counter for timer tick
 * #Debug
 *
 * @rvalue
 * @param {variable} (integer)
 * @return (string)
 *
 */
DBGA (string) variable (integer);

/*
 * Makes the target creature die, triggering Die script and history events, closing its eyes, and
 * stopping brain and biochemistry updates. Not to be confused with [KILL], which you will have to
 * use later to remove the actual body.
 * #Creatures
 *
 */
DEAD (command);

/*
 * Returns 1 if target creature is dead, or 0 if alive.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
DEAD (integer);

/*
 * Returns the current focus of decision id.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
DECN (integer);

/*
 * Deletes the specified [GAME] variable.
 * #Variables
 *
 * @param {variableName} (string)
 *
 */
DELG (command) variableName (string);

/*
 * Deletes the specified metaroom from the map.
 * #Map
 *
 * @param {metaroomId} (integer)
 *
 */
DELM (command) metaroomId (integer);

/*
 * Deletes the specified room from the map.
 * #Map
 *
 * @param {roomId} (integer)
 *
 */
DELR (command) roomId (integer);

/*
 * Deletes the specified world directory.
 * #World
 *
 * @param {worldName} (string)
 *
 */
DELW (command) worldName (string);

/*
 * Returns X coordinate of creature's down foot.
 * #Creatures
 *
 * @rvalue
 * @return (float)
 */
DFTX (float);

/*
 * Returns Y coordinate of creature's down foot.
 * #Creatures
 *
 * @rvalue
 * @return (float)
 */
DFTY (float);

/*
 * Change creature to face a different direction. North 0, South 1, East 2, West 3.
 * #Creatures
 *
 * @param {direction} (integer)
 *
 */
DIRN (command) direction (integer);

/*
 * Returns the direction that target creature is facing. North 0, South 1, East 2, West 3.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
DIRN (integer);

/*
 * Returns the square of the distance between the centre points of the target agent, and the other
 * agent. It is quicker to compare this square against a squared constant directly, or if you need
 * the actual distance use [SQRT].
 * #Math
 *
 * @rvalue
 * @param {other} (agent)
 * @return (float)
 *
 */
DISQ (float) other (agent);

/*
 * Divides a variable by an integer or float, so var = var / div. Uses integer division if both
 * numbers are integers, or floating point division otherwise.
 * #Math
 *
 * @param {var} (variable)
 * @param {div} (decimal)
 *
 */
DIVV (command) var (variable) div (decimal);

/*
 * Set to 1 to turn the debug map image on, 0 to turn it off. The debug map includes vehicle cabin
 * lines.
 * #Map
 *
 * @param {debugMap} (integer)
 *
 */
DMAP (command) debugMap (integer);

/*
 * Updates all CAs the specified number of times.
 * #Map
 *
 * @param {noOfUpdates} (integer)
 *
 */
DOCA (command) noOfUpdates (integer);

/*
 * Execute a block of code if the condition is true. The code block ends at the next [ELSE], [ELIF] or
 * [ENDI]. A condition is composed of one or more comparisons joined by AND or OR. A comparison
 * compares two values with EQ, NE, GT, GE, LT, LE, or alternatively =, <>, >, >=, <, <=.
 * #{
 * 	DOIF ov00 GE 5 AND ov00 LT 10
 * 	*--- code block 1 ---
 * 	[ELIF] ov00 GE 10 OR ov00 LT 100
 * 	*--- code block 2 ---
 * 	[ELSE]
 * 	*--- code block 3 ---
 * 	[ENDI]
 * }
 * Conditions are evaluated simply from left to right, so "a AND b OR c" is the same as "(a AND b)
 * OR c", not "a AND ( b OR c )".
 * Conditional statements may not work correctly with commands overloaded by rvalue.
 * #Flow
 *
 * @param {condition} (condition)
 *
 */
DOIF (command) condition (condition);

/*
 * Stops the targetted creature doing any involuntary actions.
 * #Creatures
 *
 */
DONE (command);

/*
 * Sets the permiability of the door between two rooms. This is used for both CAs and physical
 * motion. See also [PERM].
 * #Map
 *
 * @param {room1Id} (integer)
 * @param {room2Id} (integer)
 * @param {permiability} (integer)
 *
 */
DOOR (command) room1Id (integer) room2Id (integer) permiability (integer);

/*
 * Returns the door permiability between two rooms.
 * #Map
 *
 * @rvalue
 * @param {room1Id} (integer)
 * @param {room2Id} (integer)
 * @return (integer)
 *
 */
DOOR (integer) room1Id (integer) room2Id (integer);

/*
 * Returns the value of the down constant.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
DOWN (integer);

/*
 * Drop all passengers matching classifier.
 * #Vehicles
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
DPAS (command) family (integer) genus (integer) species (integer);

/*
 * Set to 1 to make the creature fall asleep and dream, 0 to stop the creature dreaming. When
 * dreaming, a creature's instincts are processed. See also [ASLP].
 * #Creatures
 *
 * @param {dream} (integer)
 *
 */
DREA (command) dream (integer);

/*
 * Returns 1 if the creature is asleep and dreaming, 0 otherwise.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
DREA (integer);

/*
 * Adjusts the level of the given drive by the specified amount - can be positive or negative.
 * #Creatures
 *
 * @param {drive} (integer)
 * @param {adjustment} (float)
 *
 */
DRIV (command) drive (integer) adjustment (float);

/*
 * Returns the value (0.0 to 1.0) of the specified drive.
 * DRV! (integer)
 * Returns the id of the highest drive for the target creature.
 * #Creatures
 *
 * @rvalue
 * @param {drive} (integer)
 * @return (float)
 *
 */
DRIV (float) drive (integer);

/*
 * Force the [TARG] to drop what it is carrying. this will try to find a safe place for the agent to
 * fall.
 * #Agents
 *
 */
DROP (command);

/*
 * Sets a layer of clothing on part of the creature. The overlay_file is the index of the overlay
 * gallery. Currently there is also one tintable gallery available which is index 1. The
 * set_number is the type of clothing to put on from the overlay file - think of it as an outfit
 * number. layer 0 is the actual body of the creature, so unless you want to replace the body part
 * itself use a higher layer. Higher layers are on top of lower ones. e.g. 0 for a face, 1 for
 * measels spots, 2 for a fencing mask. See also [BODY] and [NUDE].
 * #Creatures
 *
 * @param {bodyId} (integer)
 * @param {overlayFile} (integer)
 * @param {setNumber} (integer)
 * @param {layer} (integer)
 *
 */
DYED (command) bodyId (integer) overlayFile (integer) setNumber (integer) layer (integer);

/*
 * Starts an enumeration across all the agents in a connective system, where agent is any agent
 * within the connective system.
 * #Ports
 *
 * @param {agent} (agent)
 *
 */
ECON (command) agent (agent);

/*
 * Set the elasticity percentage. An agent with elasticity 100 will bounce perfectly, one with
 * elasticity 0 won't bounce at all.
 * #Motion
 *
 * @param {elasticity} (integer)
 *
 */
ELAS (command) elasticity (integer);

/*
 * Return the elasticity percentage.
 * #Motion
 *
 * @rvalue
 * @return (integer)
 */
ELAS (integer);

/*
 * ELseIF command to follow a [DOIF]. If the condition in a [DOIF] is false, each following ELIF
 * command will be evaluated in turn. Only the first true condition will have its code block
 * executed.
 * #Flow
 *
 * @param {condition} (condition)
 *
 */
ELIF (command) condition (condition);

/*
 *
 * #Flow
 *
 */
ELSE (command);

/*
 * Returns a string containing all the metaroom ids in the world seperated by spaces.
 * #Map
 *
 * @rvalue
 * @return (string)
 */
EMID (string);

/*
 * Target now constantly emits an amount of a CA into the room it is in.
 * #Map
 *
 * @param {caIndex} (integer)
 * @param {amount} (float)
 *
 */
EMIT (command) caIndex (integer) amount (float);

/*
 * Closes a [DOIF]...[ELIF]...[ELSE]... set.
 * #Flow
 *
 */
ENDI (command);

/*
 * Iterate through each agent which conforms to the given classification, setting [TARG] to point to
 * each valid agent in turn. family, genus and/or species can be zero to act as wildcards. [NEXT]
 * terminates the block of code which is executed with each [TARG]. After an ENUM, [TARG] is set to
 * [OWNR].
 * #Enums
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
ENUM (command) family (integer) genus (integer) species (integer);

/*
 * Enumerate over owner vehicle's passengers which match the given classifier. Similar to [ENUM].
 * #Enums
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
EPAS (command) family (integer) genus (integer) species (integer);

/*
 * Returns a string containing all the room ids in the specified metaroom separated by spaces.
 * Returns all rooms in the world if metaroom_id is -1.
 * #Map
 *
 * @rvalue
 * @param {metaroomId} (integer)
 * @return (string)
 *
 */
ERID (string) metaroomId (integer);

/*
 * As [ENUM], except only enumerates through agents which [OWNR] can see. An agent can see another if
 * it is within [RNGE], its [PERM] allows it to see through all intervening walls, and for creatures
 * [ATTR] Invisible isn't set. See also [STAR] and [SEEE]. In install scripts, when there is no [OWNR],
 * [TARG] is used instead.
 * #Enums
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
ESEE (command) family (integer) genus (integer) species (integer);

/*
 * As [ENUM], except only enumerates through agents which [OWNR] is touching. Agents are said to be
 * touching if their bounding rectangles overlap. See also [TTAR]. In install scripts, when there is
 * no [OWNR], [TARG] is used instead.
 * #Enums
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
ETCH (command) family (integer) genus (integer) species (integer);

/*
 * Returns the number of ticks since the engine was loaded in.
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
ETIK (integer);

/*
 * Forms the end of a [LOOP]..EVER loop, which just loops forever.
 * #Flow
 *
 */
EVER (command);

/*
 * This sets the animated expression for a creatures, these are facial expressions requiring more
 * than one frame and lasting a specified number of ticks, for example laughing or eating.
 * Animated expression indexes are as follows: 0 - laugh 1 - cry 2 - eat
 * #Creatures
 *
 * @param {animatedExpressionIndex} (integer)
 * @param {ticks} (integer)
 *
 */
EXPR (command) animatedExpressionIndex (integer) ticks (integer);

/*
 * Returns the current facial expression index for the creature. Expressions are as follows:
 * EXPR_NORMAL = 0, EXPR_HAPPY =1, EXPR_SAD = 2, EXPR_ANGRY= 3, EXPR_SURPRISE = 4, EXPR_SLEEPY =
 * 5, EXPR_VERY_SLEEPY = 6, EXPR_VERY_HAPPY = 7, EXPR_MISCHEVIOUS = 8, EXPR_SCARED = 9, EXPR_ILL =
 * 10, EXPR_HUNGRY = 11
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
EXPR (integer);

/*
 * Sets a facial expression on target creature.
 * #Creatures
 *
 * @param {setNumber} (integer)
 *
 */
FACE (command) setNumber (integer);

/*
 * Returns the front facing pose for the current facial expression. See the FACE string rvalue.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
FACE (integer);

/*
 * Returns the name of the sprite file for the target creature's face. Currently automatically
 * gives you the youngest age version of the gallery but soon will work in the following way: If
 * you set the parameter to -1 you will get the name of the file the creature is currently using.
 * Note that when the creature ages, this file name will change (the [GALL] command could be useful
 * here). If you set the parameter to a particular age then the filename returned will be the
 * gallery that best matches that age. Use the FACE integer rvalue to get the pose number for
 * facing forwards.
 * #Creatures
 *
 * @rvalue
 * @return (string)
 */
FACE (string);

/*
 * Fade out a controlled sound.
 * #Sounds
 *
 */
FADE (command);

/*
 * Returns 1 if target is moving under the influence of gravity, or 0 if it is at rest.
 * #Motion
 *
 * @rvalue
 * @return (integer)
 */
FALL (integer);

/*
 * Set keyboard focus to the current [PART] of the targetted agent. The part should be a [PAT: TEXT].
 * If you TARG NULL first, then no part will have the focus.
 * #CompoundAgents
 *
 */
FCUS (command);

/*
 * Launches an executable
 * #Files
 *
 * @param {directory} (integer)
 * @param {filename} (string)
 *
 */
FILE EXEC (command) directory (integer) filename (string);

/*
 * This globs a journal directory (0 for world one, 1 for main one) for the filespec provided. As
 * all this can do is list files, it does not worry about where you look relative to the journal
 * directory in question. Use this with care.
 * Having globbed a directory, the listing is available on the input stream as a number, followed
 * by the names of each file. To read - ise [INOK], [INNI] and [INNL]. Once you have finished, remember
 * to do a [FILE ICLO] to remove the glob output from the VM.
 * #Files
 *
 * @param {directory} (integer)
 * @param {filespec} (string)
 *
 */
FILE GLOB (command) directory (integer) filespec (string);

/*
 * Disconnects anything which is attached to the input stream. If this is a file, then the file is
 * closed.
 * #Files
 *
 */
FILE ICLO (command);

/*
 * Sets the file for the input stream of the current virtual machine - there is a virtual machine
 * for each agent, so this is much the same as setting it for [OWNR]. Use [INNL], [INNI] and [INNF] to get
 * data from the stream, and [INOK] to check validity of the stream. The filename should include any
 * file extension.
 * You should use [FILE ICLO] to close the file, although this happens automatically if you set a
 * new file, if the virtual machine is destroyed, or if the engine exits.
 * Directory is 0 for the current world's journal directory, 1 for the main journal directory, or
 * 2 for the [GAME] engine_other_world world's journal directory.
 * #Files
 *
 * @param {directory} (integer)
 * @param {filename} (string)
 *
 */
FILE IOPE (command) directory (integer) filename (string);

/*
 * This deletes the file (filename) specified from the journal directory specified. If directory
 * is zero, this is the current world's journal directory, otherwise it is the main journal
 * directory. It deletes the file immediately, rather than marking it for the attic.
 * #Files
 *
 * @param {directory} (integer)
 * @param {filename} (string)
 *
 */
FILE JDEL (command) directory (integer) filename (string);

/*
 * Disconnects anything which is attached to the output stream. If this is a file, then the file
 * is closed.
 * #Files
 *
 */
FILE OCLO (command);

/*
 * Flush output stream. If it is attached to a disk file, this will force any data in the buffer
 * to be written to disk.
 * #Files
 *
 */
FILE OFLU (command);

/*
 * Sets the file for the output stream of the current virtual machine - there is a virtual machine
 * for each agent, so this is much the same as setting it for [OWNR]. Use [OUTV] and [OUTS] or various
 * other commands to send text data to the stream. The filename should include any file extension.
 * You should use [FILE OCLO] to close the file, although this happens automatically if you set a
 * new file, if the virtual machine is destroyed, or if the engine exits.
 * Directory is 0 for the current world's journal directory, 1 for the main journal directory, or
 * 2 for the [GAME] engine_other_world world's journal directory. Set append to 1 to add to the end
 * of the file, or 0 to replace any existing file.
 * #Files
 *
 * @param {directory} (integer)
 * @param {filename} (string)
 * @param {append} (integer)
 *
 */
FILE OOPE (command) directory (integer) filename (string) append (integer);

/*
 * Move the top left corner of target to either the given screen coordinates, or the given
 * coordinates relative to the agent it is [FREL] to. Useful for floating agents.
 * #Motion
 *
 * @param {screenX} (float)
 * @param {screenY} (float)
 *
 */
FLTO (command) screenX (float) screenY (float);

/*
 * This returns the X position of the [TARG] object's floating vector.
 * #Agents
 *
 * @rvalue
 * @return (float)
 */
FLTX (float);

/*
 * This returns the Y position of the [TARG] object's floating vector.
 * #Agents
 *
 * @rvalue
 * @return (float)
 */
FLTY (float);

/*
 * Returns family of target. See also [GNUS], [SPCS].
 * #AgentAttributes
 *
 * @rvalue
 * @return (integer)
 */
FMLY (integer);

/*
 * Set the friends or foe lobe to learn from the creature.
 * #Creatures
 *
 * @param {creatureToLearnAbout} (agent)
 *
 */
FORF (command) creatureToLearnAbout (agent);

/*
 * This command sets the frame rate on the [TARG] agent. If it is a compound agent, then the part
 * affected can be set with the [PART] command. Valid rates are from 1 to 255. 1 is Normal rate, 2
 * is half speed etc...
 * #Agents
 *
 * @param {framerate} (integer)
 *
 */
FRAT (command) framerate (integer);

/*
 * Sets an agent for target to float relative to. To make target actually float, you need to set
 * attribute Floatable as well. Set FREL to [NULL] to make the target float relative to the main
 * camera - this is the default. Use [FLTO] to set the relative position of the top left corner of
 * the floating agent to the top left corner of the agent it is floating relative to.
 * #Motion
 *
 * @param {relative} (agent)
 *
 */
FREL (command) relative (agent);

/*
 * Return physics friction percentage.
 * #Motion
 *
 * @rvalue
 * @return (integer)
 */
FRIC (integer);

/*
 * Set physics friction percentage, normally from 0 to 100. Speed is lost by this amount when an
 * agent slides along the floor.
 * #Motion
 *
 * @param {friction} (integer)
 *
 */
FRIC (command) friction (integer);

/*
 * Use this command to alter the appearance of the current text part. The line and character
 * spacing values are expressed in number of extra pixels to insert between characters. Values for
 * justification are 0 - Left, 1 - Right, 2 - Center, 4 - Bottom, 8 - Middle (you may add mutually
 * compatible numbers). The default format values are 8 8 8 8 0 0 0.
 * #CompoundAgents
 *
 * @param {leftMargin} (integer)
 * @param {topMargin} (integer)
 * @param {rightMargin} (integer)
 * @param {bottomMargin} (integer)
 * @param {lineSpacing} (integer)
 * @param {characterSpacing} (integer)
 * @param {justification} (integer)
 *
 */
FRMT (command) leftMargin (integer) topMargin (integer) rightMargin (integer) bottomMargin (integer) lineSpacing (integer) characterSpacing (integer) justification (integer);

/*
 * If we're processing a message, this is the [OWNR] who sent the message. [NULL] if the message was
 * sent from an injected script or an install script.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
FROM (agent);

/*
 * Refreshes the main view port.
 * #Camera
 *
 */
FRSH (command);

/*
 * Converts a floating-point value into its integer equivalent.
 * #Variables
 *
 * @rvalue
 * @param {numberToConvert} (float)
 * @return (integer)
 *
 */
FTOI (integer) numberToConvert (float);

/*
 * This returns a guaranteed-safe filename for use in world names, jornal file names, etc.
 * #Files
 *
 * @rvalue
 * @param {name} (string)
 * @return (string)
 *
 */
FVWM (string) name (string);

/*
 * Specifies the current gait for a creature. The gaits are genetically defined. It sets the gait
 * of the creature agent stored in [TARG].
 * #Agents
 *
 * @param {gaitNumber} (integer)
 *
 */
GAIT (command) gaitNumber (integer);

/*
 * Changes the gallery (sprite file) used by an agent. This works for simple and compound agents
 * (using the current [PART]). The current [POSE] is kept the same in both galleries.
 * #AgentSprites
 *
 * @param {spriteFile} (string)
 * @param {firstImage} (integer)
 *
 */
GALL (command) spriteFile (string) firstImage (integer);

/*
 * A game variable is a global variable which can be referenced by name.
 * eg: SETV GAME "pi" 3.142
 * Game variables are stored as part of the world and so will be saved out in the world file. If a
 * script uses a non-existant game variable, that variable will be created automatically (with
 * undefined contents). Agents, integers, floats and strings can be stored in game variables.
 * Variable names are case sensitive.
 * There are some conventions for the variable names:
 * engine_ for Creatures Engine
 * cav_ for Creatures Adventures
 * c3_ for Creatures 3
 * It's important to follow these, as 3rd party developers will just use whatever names they
 * fancy. [DELG] deletes a game variable. See also the table of engine Game Variables.
 * #Variables
 *
 * @lvalue
 * @rvalue
 * @param {variableName} (string)
 * @return (variable)
 *
 */
GAME (variable) variableName (string);

/*
 * Enumerates through game variable names. Pass in an empty string to find the first one, and then
 * the previous one to find the next. Empty string is returned at the end.
 * #Variables
 *
 * @rvalue
 * @param {previous} (string)
 * @return (string)
 *
 */
GAMN (string) previous (string);

/*
 * Clones a genome, creating a new moniker and copying the genetics file.
 * #Genetics
 *
 * @param {destAgent} (agent)
 * @param {destSlot} (integer)
 * @param {sourceAgent} (agent)
 * @param {sourceSlot} (integer)
 *
 */
GENE CLON (command) destAgent (agent) destSlot (integer) sourceAgent (agent) sourceSlot (integer);

/*
 * Crosses two genomes with mutation, and fills in a child geneme slot. Mutation variables may be
 * in the range of 0 to 255.
 * #Genetics
 *
 * @param {childAgent} (agent)
 * @param {childSlot} (integer)
 * @param {mumAgent} (agent)
 * @param {mumSlot} (integer)
 * @param {dadAgent} (agent)
 * @param {dadSlot} (integer)
 * @param {mumChanceOfMutation} (integer)
 * @param {mumDegreeOfMutation} (integer)
 * @param {dadChanceOfMutation} (integer)
 * @param {dadDegreeOfMutation} (integer)
 *
 */
GENE CROS (command) childAgent (agent) childSlot (integer) mumAgent (agent) mumSlot (integer) dadAgent (agent) dadSlot (integer) mumChanceOfMutation (integer) mumDegreeOfMutation (integer) dadChanceOfMutation (integer) dadDegreeOfMutation (integer);

/*
 * Clears a genome slot.
 * #Genetics
 *
 * @param {agent} (agent)
 * @param {slot} (integer)
 *
 */
GENE KILL (command) agent (agent) slot (integer);

/*
 * Loads an engineered gene file into a slot. Slot 0 is a special slot used only for creatures,
 * and contains the moniker they express. Only the [NEW: CREA] command fills it in. Other slot
 * numbers are used in pregnant creatures, in eggs, or to temporarily store a genome before
 * expressing it with [NEW: CREA]. You can use them as general purpose genome stores.
 * The gene file can have any name, and is loaded from the main genetics file. A new moniker is
 * generated, and a copy of the gene file put in the world directory. You can use * and ?
 * wildcards in the name, and a random matching file will be used.
 * You can also load monikered files from the world genetics directory with this command. If so,
 * the file is copied and a new moniker generated. Wildcards are matched first in the main
 * genetics directory, and only if none match is the world genetics directory searched.
 * #Genetics
 *
 * @param {agent} (agent)
 * @param {slot} (integer)
 * @param {geneFile} (string)
 *
 */
GENE LOAD (command) agent (agent) slot (integer) geneFile (string);

/*
 * Moves a genome from one slot to another.
 * #Genetics
 *
 * @param {destAgent} (agent)
 * @param {destSlot} (integer)
 * @param {sourceAgent} (agent)
 * @param {sourceSlot} (integer)
 *
 */
GENE MOVE (command) destAgent (agent) destSlot (integer) sourceAgent (agent) sourceSlot (integer);

/*
 * Output the genus numbers for which there are scripts in the scriptorium for the given family.
 * List is space delimited.
 * #Scripts
 *
 * @param {family} (integer)
 *
 */
GIDS FMLY (command) family (integer);

/*
 * Output the species numbers for which there are scripts in the scriptorium for the given family
 * and genus. List is space delimited.
 * #Scripts
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 *
 */
GIDS GNUS (command) family (integer) genus (integer);

/*
 * Output the family numbers for which there are scripts in the scriptorium. List is space
 * delimited.
 * #Scripts
 *
 */
GIDS ROOT (command);

/*
 * Output the event numbers of scripts in the scriptorium for the given classifier. List is space
 * delimited.
 * #Scripts
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
GIDS SPCS (command) family (integer) genus (integer) species (integer);

/*
 * Returns the metaroom id at point x,y on the map. If the point is outside the room system, it
 * returns -1.
 * #Map
 *
 * @rvalue
 * @param {x} (float)
 * @param {y} (float)
 * @return (integer)
 *
 */
GMAP (integer) x (float) y (float);

/*
 * Returns the game name. For example "Creatures 3".
 * #Variables
 *
 * @rvalue
 * @return (string)
 */
GNAM (string);

/*
 * Returns genus of target. See also [FMLY], [SPCS].
 * #AgentAttributes
 *
 * @rvalue
 * @return (integer)
 */
GNUS (integer);

/*
 * Don't use this command. It jumps directly to a label defined by [SUBR]. This command is only here
 * because it is used implicitly by [DOIF] blocks. This is a really dangerous command to use
 * manually, because if you jump out of a block of code (eg a [LOOP]...[EVER] block), the stack frame
 * will no longer be correct, and the script will most likely crash. Don't use it! See [SUBR].
 * #Flow
 *
 * @param {destination} (token)
 *
 */
GOTO (command) destination (token);

/*
 * Collect all nearby agents matching the classifier as passengers.
 * {rectToUse} = 0 : Nearby means touching bounding rectangle of agent
 * {rectToUse} = 1 : Nearby means touching cabin rectangle
 * #Vehicles
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {rectToUse} (integer)
 *
 */
GPAS (command) family (integer) genus (integer) species (integer) rectToUse (integer);

/*
 * Returns the room id at point x,y on the map. If the point is outside the room system, it
 * returns -1.
 * #Map
 *
 * @rvalue
 * @param {x} (float)
 * @param {y} (float)
 * @return (integer)
 *
 */
GRAP (integer) x (float) y (float);

/*
 * Returns the ID of a room adjacent to the agent in the given direction. A straight line is drawn
 * from the centre of the agent until it hits a room. Directions are [LEFT], [RGHT], [_UP_], or [DOWN]. A
 * value of -1 is returned if no room can be found.
 * #Map
 *
 * @rvalue
 * @param {agent} (agent)
 * @param {direction} (integer)
 * @return (integer)
 *
 */
GRID (integer) agent (agent) direction (integer);

/*
 * Add a line to a graph (previously created with [PAT: GRPH]). The first line you add will be line
 * 0.
 * #CompoundAgents
 *
 * @param {red} (integer)
 * @param {green} (integer)
 * @param {blue} (integer)
 * @param {minY} (float)
 * @param {maxY} (float)
 *
 */
GRPL (command) red (integer) green (integer) blue (integer) minY (float) maxY (float);

/*
 * Add a value to a line on a graph. after you have added a value to each line on the graph, it
 * will be updated by scrolling the current values to the left
 * #CompoundAgents
 *
 * @param {lineIndex} (integer)
 * @param {value} (float)
 *
 */
GRPV (command) lineIndex (integer) value (float);

/*
 * Jumps to a subroutine defined by [SUBR]. Execution will continue at the instruction after the
 * GSUB when the subroutine hits a [RETN] command.
 * #Flow
 *
 * @param {destination} (token)
 *
 */
GSUB (command) destination (token);

/*
 * Returns the target's moniker in the given gene variable slot. This universally unique
 * identifier is the name of a genetics file. Slot 0 is a creature's actual genome. Other slots
 * are used in pregnant creatures, eggs and other places.
 * #Genetics
 *
 * @rvalue
 * @param {slot} (integer)
 * @return (string)
 *
 */
GTOS (string) slot (integer);

/*
 * Tidies or ruffles hair. Positive means tidy, negative untidy. There can be multiple stages of
 * tidiness or untidiness; the more extreme the value the tidier or untidier.
 * #Creatures
 *
 * @param {stage} (integer)
 *
 */
HAIR (command) stage (integer);

/*
 * Sets the name of the hand. Bt default this is 'hand'.
 * #Agents
 *
 * @param {nameForTheHand} (string)
 *
 */
HAND (command) nameForTheHand (string);

/*
 * This returns the name of the hand.
 * #Agents
 *
 * @rvalue
 * @return (string)
 */
HAND (string);

/*
 * Returns heap and garbage collection information.
 * 0 - current allocated heap memory (development builds only)
 * 1 - total agents, including ones waiting to be garbage collected
 * 2 - similar, but just for creatures
 * #Debug
 *
 * @rvalue
 * @param {index} (integer)
 * @return (integer)
 *
 */
HEAP (integer) index (integer);

/*
 * This returns the X position of the [TARG] creature's specified attachment point in absolute (map)
 * coordinates. Attachments go in this order: 0 - neck 1- mouth 2 - left ear 3- right ear 4 - hair
 * (top of head)
 * #Agents
 *
 * @rvalue
 * @param {attachmentIndex} (integer)
 * @return (float)
 *
 */
HEDX (float) attachmentIndex (integer);

/*
 * This returns the Y position of the [TARG] creature's specified attachment point in absolute (map)
 * coordinates. Attachments go in this order: 0 - neck 1- mouth 2 - left ear 3- right ear 4 - hair
 * (top of head)
 * #Agents
 *
 * @rvalue
 * @param {attachmentIndex} (integer)
 * @return (float)
 *
 */
HEDY (float) attachmentIndex (integer);

/*
 * Returns the item currently held by the target. For vehicles this returns a random carried agent
 * if carrying more than one. Consider using [EPAS] instead.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
HELD (agent);

/*
 * Lists all command names to the output stream.
 * #Debug
 *
 */
HELP (command);

/*
 * Returns the height of target.
 * #AgentBounds
 *
 * @rvalue
 * @return (integer)
 */
HGHT (integer);

/*
 * Returns the creature currently holding hands with the pointer agent. [NULL] if no agent is
 * holding hands.
 * #Creatures
 *
 * @rvalue
 * @return (agent)
 */
HHLD (agent);

/*
 * Returns id of the room adjacent to this one with the highest concentration of the given CA.
 * direction is 0 for left/right, 1 for any direction.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @param {caIndex} (integer)
 * @param {directions} (integer)
 * @return (integer)
 *
 */
HIRP (integer) roomId (integer) caIndex (integer) directions (integer);

/*
 * Returns the life stage of the creature when the given life event happened.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (integer)
 *
 */
HIST CAGE (integer) moniker (string) eventNo (integer);

/*
 * Returns the number of life events that there are for the given moniker. Returns 0 of there are
 * no events, or the moniker doesn't exist.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
HIST COUN (integer) moniker (string);

/*
 * Returns the number of crossover points when the genome was made by splicing its parents
 * genomes.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
HIST CROS (integer) moniker (string);

/*
 * Returns the day within the current season. This is the same as [DATE]. See also [WTIK] and HIST
 * [WTIK].
 * #Time
 *
 * @rvalue
 * @param {worldTick} (integer)
 * @return (integer)
 *
 */
HIST DATE (integer) worldTick (integer);

/*
 * Triggers a life event of the given type. Some events are triggered automatically by the engine,
 * some events need triggering from [CAOS], others are custom events that you can use for your own
 * purposes. See [HIST TYPE] for details of the event numbers. All new events made call the Life
 * Event script.
 * #History
 *
 * @param {moniker} (string)
 * @param {eventType} (integer)
 * @param {relatedMoniker1} (string)
 * @param {relatedMoniker2} (string)
 *
 */
HIST EVNT (command) moniker (string) eventType (integer) relatedMoniker1 (string) relatedMoniker2 (string);

/*
 * Searches for a life event of a certain [HIST TYPE] for the given moniker. The search begins at
 * the life event after the from index. Specify -1 to find the first event. Returns the event
 * number, or -1 if there is no matching event.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventType} (integer)
 * @param {fromIndex} (integer)
 * @return (integer)
 *
 */
HIST FIND (integer) moniker (string) eventType (integer) fromIndex (integer);

/*
 * Reverse searches for a life event of a certain [HIST TYPE] for the given moniker. The search
 * begins at the life event before the from index. Specify -1 to find the last event. Returns the
 * event number, or -1 if there is no matching event.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventType} (integer)
 * @param {fromIndex} (integer)
 * @return (integer)
 *
 */
HIST FINR (integer) moniker (string) eventType (integer) fromIndex (integer);

/*
 * For the given life event, returns the filename of the associated photograph, or an empty string
 * if there is no photo.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (string)
 *
 */
HIST FOTO (string) moniker (string) eventNo (integer);

/*
 * For the given life event, sets the associated photograph. Use [SNAP] to take the photograph
 * first.
 * If there was already a photograph for the event, then it is automatically marked for the attic
 * as in [LOFT], and overwritten with the new photo. Hence you can use an empty string to clear a
 * photo. If [HIST WIPE] is used to clear the event, the photo is similarly stored in the attic.
 * It is considered an error to send a photograph that is in use (unless cloned with [TINT]) to the
 * attic. If this happens, you will get a runtime error. You should either be confident that no
 * agents are using the photo, or call [LOFT] first to test if they are.
 * #History
 *
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @param {newValue} (string)
 *
 */
HIST FOTO (command) moniker (string) eventNo (integer) newValue (string);

/*
 * Returns the sex that the creature with the given moniker has or had. 1 for male, 2 for female.
 * If the creature hasn't been born yet, returns -1.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
HIST GEND (integer) moniker (string);

/*
 * Returns the genus of the moniker. This is 1 for Norn, 2 for Grendel, 3 for Ettin by convention.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
HIST GNUS (integer) moniker (string);

/*
 * For the given life event, returns the first associated moniker.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (string)
 *
 */
HIST MON1 (string) moniker (string) eventNo (integer);

/*
 * For the given life event, returns the second associated moniker.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (string)
 *
 */
HIST MON2 (string) moniker (string) eventNo (integer);

/*
 * Returns the number of point mutations the genome received during crossover from its parents.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
HIST MUTE (integer) moniker (string);

/*
 * Returns the name of the creature with the given moniker.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (string)
 *
 */
HIST NAME (string) moniker (string);

/*
 * Renames the creature with the given moniker.
 * #History
 *
 * @param {moniker} (string)
 * @param {newName} (string)
 *
 */
HIST NAME (command) moniker (string) newName (string);

/*
 * Returns the next moniker which has a history, or an empty string if we're at the end already.
 * If the specified moniker is an empty string or doesn't have a history, then the first moniker
 * with a history entry is returned, or an empty string if there isn't one.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (string)
 *
 */
HIST NEXT (string) moniker (string);

/*
 * Returns the previous moniker which has a history. If the specified moniker is an empty string
 * or doesn't have a history, then the last moniker with a history entry is returned, or an empty
 * string if there isn't one.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (string)
 *
 */
HIST PREV (string) moniker (string);

/*
 * Returns the real world time when the given life event happened. This is measured in seconds
 * since midnight, 1 January 1970 in UTC. To display, use [RTIF].
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (integer)
 *
 */
HIST RTIM (integer) moniker (string) eventNo (integer);

/*
 * Returns the current season for a given world tick. This is the same as [SEAN]. See also [WTIK] and
 * [HIST WTIK].
 * #Time
 *
 * @rvalue
 * @param {worldTick} (integer)
 * @return (integer)
 *
 */
HIST SEAN (integer) worldTick (integer);

/*
 * Returns the age in ticks of the creature when the given life event happened to it. If the
 * creature was not in the world, wasn't born yet, or was fully dead, then -1 is returned. If the
 * creature was dead, but its body still in the world, then its age on death is returned. See also
 * [TAGE].
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (integer)
 *
 */
HIST TAGE (integer) moniker (string) eventNo (integer);

/*
 * Returns the time of day for a given world tick. This is the same as [TIME]. See also [WTIK] and
 * [HIST WTIK].
 * #Time
 *
 * @rvalue
 * @param {worldTick} (integer)
 * @return (integer)
 *
 */
HIST TIME (integer) worldTick (integer);

/*
 * For the given life event, returns its type.
 * All histories begin with one of the following four events. You can read the associated monikers
 * with [HIST MON1] and [HIST MON2].
 * 0 Conceived - a natural start to life, associated monikers are the mother's and father's
 * 1 Spliced - created using [GENE CROS] to crossover the two associated monikers
 * 2 Engineered - from a human made genome with [GENE LOAD], the first associated moniker is blank,
 * and the second is the filename
 * 14 Cloned - such as when importing a creature that already exists in the world and reallocating
 * the new moniker, when [TWIN]ing or [GENE CLON]ing; associated moniker is who we were cloned from
 * The following events happen during a creature's life:
 * 3 Born - triggered by the [BORN] command, associated monikers are the parents.
 * 4 Aged - reached the next life stage, either naturally from the ageing loci or with [AGES]
 * 5 Exported - emmigrated to another world
 * 6 Imported - immigrated back again
 * 7 Died - triggered naturally with the death trigger locus, or by the [DEAD] command
 * 8 Became pregnant - the first associated moniker is the child, and the second the father
 * 9 Impregnated - first associated moniker is the child, second the mother
 * 10 Child born - first moniker is the child, second the other parent
 * 15 Clone source - someone was cloned from you, first moniker is whom
 * 16 Warped out - exported through a worm hole with NET: EXPO
 * 17 Warped in - imported through a worm hole
 * These events aren't triggered by the engine, but reserved for [CAOS] to use with these numbers:
 * 11 Laid by mother
 * 12 Laid an egg
 * 13 Photographed
 * Other numbers can also be used for custom life events. Start with numbers 100 and above, as
 * events below that are reserved for the engine. You send your own events using [HIST EVNT].
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (integer)
 *
 */
HIST TYPE (integer) moniker (string) eventNo (integer);

/*
 * For the given life event, sets the user text.
 * #History
 *
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @param {newValue} (string)
 *
 */
HIST UTXT (command) moniker (string) eventNo (integer) newValue (string);

/*
 * For the given life event, returns the user text.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (string)
 *
 */
HIST UTXT (string) moniker (string) eventNo (integer);

/*
 * Returns the variant that the creature with the given moniker has or had. If the creature hasn't
 * been born yet, returns -1.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
HIST VARI (integer) moniker (string);

/*
 * Purge the creature history for the given moniker. Only applies if the genome isn't referenced
 * by any slot, and the creature is fully dead or exported. Use [OOWW] to test this first.
 * #History
 *
 * @param {moniker} (string)
 *
 */
HIST WIPE (command) moniker (string);

/*
 * Returns the name of the world the given life event happened in.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (string)
 *
 */
HIST WNAM (string) moniker (string) eventNo (integer);

/*
 * Returns the world tick when the life event happened, for the world that the event happened in.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (integer)
 *
 */
HIST WTIK (integer) moniker (string) eventNo (integer);

/*
 * Returns the unique identifier of the world the given life event happened in.
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @param {eventNo} (integer)
 * @return (string)
 *
 */
HIST WUID (string) moniker (string) eventNo (integer);

/*
 * Returns the number of game years elapsed for a given world tick. This is the same as [YEAR]. See
 * also [WTIK] and [HIST WTIK].
 * #Time
 *
 * @rvalue
 * @param {worldTick} (integer)
 * @return (integer)
 *
 */
HIST YEAR (integer) worldTick (integer);

/*
 * Returns the agent nearest the screen under the hotspot of the pointer. For each agent, [TRAN]
 * decides whether this allows for transparent pixels.
 * #Input
 *
 * @rvalue
 * @return (agent)
 */
HOTS (agent);

/*
 * Returns the target creature's current agent of attention. Compare [_IT_].
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
IITT (agent);

/*
 * The agent will save its current sprite file to a file with the given name. The file is saved to
 * the images folder within the local world directory.This doesn't work for creatures
 * #AgentSprites
 *
 * @param {fileName} (string)
 *
 */
IMGE (command) fileName (string);

/*
 * Set the input event mask. Indicates which types of global input events the agent is interested
 * in, if any. For example, if the flag for "key up" events is set here, the agents "key up"
 * script will be run every time a key is released.
 * Input event bit flags are
 * 1 Raw Key Down
 * 2 Raw Key Up
 * 4 Raw Mouse Move
 * 8 Raw Mouse Down
 * 16 Raw Mouse Up
 * 32 Raw Mouse Wheel
 * 64 Raw Translated Char
 * You can find the script numbers executed by following the links above.
 * #Input
 *
 * @param {mask} (integer)
 *
 */
IMSK (command) mask (integer);

/*
 * Returns the input event mask.
 * #Input
 *
 * @rvalue
 * @return (integer)
 */
IMSK (integer);

/*
 * Injures an organ, -1 to randomly choose the organ, 0 for the body organ.
 * #Creatures
 *
 * @param {organ} (integer)
 * @param {amount} (integer)
 *
 */
INJR (command) organ (integer) amount (integer);

/*
 * Retrieves a float from the input stream, delimited by white space. Defaults to 0.0 if no valid
 * data.
 * #Files
 *
 * @rvalue
 * @return (float)
 */
INNF (float);

/*
 * Retrieves an integer from the input stream, delimited by white space. Defaults to 0 if no valid
 * data.
 * #Files
 *
 * @rvalue
 * @return (integer)
 */
INNI (integer);

/*
 * Retrieves a line of text from the input stream.
 * #Files
 *
 * @rvalue
 * @return (string)
 */
INNL (string);

/*
 * Returns 1 if the input stream is good, or 0 if it is bad. A bad stream could be a non existent
 * file, or the end of file reached. If the stream has never been opened at all, an error is
 * displayed.
 * #Files
 *
 * @rvalue
 * @return (integer)
 */
INOK (integer);

/*
 * Number of instincts still queued to be processed.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
INS# (integer);

/*
 * This command indicates that the following commands should execute in a single tick - ie the
 * script cannot be interrupted by the script 'scheduler'. This can be important for certain tasks
 * which might leave an agent in an undefined (and dangerous) state if interrupted. The INST state
 * is broken either manually, using a [SLOW] command, or implictly, if a blocking instruction is
 * encountered (eg [WAIT]). Blocking instructions force the remainder of the script's timeslice to
 * be discarded.
 * #Scripts
 *
 */
INST (command);

/*
 * Converts an integer value into its floating-point equivalent.
 * #Variables
 *
 * @rvalue
 * @param {numberToConvert} (integer)
 * @return (float)
 *
 */
ITOF (float) numberToConvert (integer);

/*
 * Returns 1 if the specified key is currently pressed down, 0 if not.
 * #Input
 *
 * @rvalue
 * @param {keycode} (integer)
 * @return (integer)
 *
 */
KEYD (integer) keycode (integer);

/*
 * Destroys an agent. The pointer won't be destroyed. For creatures, you probably want to use [DEAD]
 * first.
 * #Agents
 *
 * @param {agent} (agent)
 *
 */
KILL (command) agent (agent);

/*
 * Returns preferred language id eg fr - french german - de.
 * #World
 *
 * @rvalue
 * @return (string)
 */
LANG (string);

/*
 * Returns the value of the left constant.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
LEFT (integer);

/*
 * State a personal opinion about a creature.
 * #Creatures
 *
 * @param {creatureStateOpinionAbout} (agent)
 *
 */
LIKE (command) creatureStateOpinionAbout (agent);

/*
 * Adds a line to target's drawing list. The line goes between the start and end points (world
 * coordinates) in the specified colour. Set stipple_on and stipple_off to 0 to draw a solid line,
 * or to the number of pixels to alternate for a stippled line. To clear all the lines for an
 * agent, call LINE with the start and end points the same.
 * #Camera
 *
 * @param {x1} (integer)
 * @param {y1} (integer)
 * @param {x2} (integer)
 * @param {y2} (integer)
 * @param {r} (integer)
 * @param {g} (integer)
 * @param {b} (integer)
 * @param {stippleOn} (integer)
 * @param {stippleOff} (integer)
 *
 */
LINE (command) x1 (integer) y1 (integer) x2 (integer) y2 (integer) r (integer) g (integer) b (integer) stippleOn (integer) stippleOff (integer);

/*
 * Sets the permiability of the link between the rooms specified, creating the link if none exists
 * before. Set to 0 to close (destroy) the link. This is used for CAs. See also [DOOR].
 * #Map
 *
 * @param {room1} (integer)
 * @param {room2} (integer)
 * @param {permiability} (integer)
 *
 */
LINK (command) room1 (integer) room2 (integer) permiability (integer);

/*
 * Returns the permiability of the link between the rooms specified or 0 if no link exists.
 * #Map
 *
 * @rvalue
 * @param {room1} (integer)
 * @param {room2} (integer)
 * @return (integer)
 *
 */
LINK (integer) room1 (integer) room2 (integer);

/*
 * Loads the specified world at the start of the next tick. See also [QUIT] for important
 * information about using [INST].
 * #World
 *
 * @param {worldName} (string)
 *
 */
LOAD (command) worldName (string);

/*
 * Sets a biochemical locus value. See Receptor Locus Numbers and Emitter Locus Numbers
 * #Creatures
 *
 * @param {type} (integer)
 * @param {organ} (integer)
 * @param {tissue} (integer)
 * @param {id} (integer)
 * @param {newValue} (float)
 *
 */
LOCI (command) type (integer) organ (integer) tissue (integer) id (integer) newValue (float);

/*
 * Reads a biochemical locus value.
 * #Creatures
 *
 * @rvalue
 * @param {type} (integer)
 * @param {organ} (integer)
 * @param {tissue} (integer)
 * @param {id} (integer)
 * @return (float)
 *
 */
LOCI (float) type (integer) organ (integer) tissue (integer) id (integer);

/*
 * Prevent the current script being interrupted until [UNLK]. Normally, events other than timer
 * scripts interrupt (abort) currently running scripts. You can also use [INST] for similar,
 * stronger protection.
 * #Scripts
 *
 */
LOCK (command);

/*
 * Declares that you have finished with a photograph image file taken by [SNAP]. If the file is in
 * use in a gallery, this function fails and returns 1. Otherwise it returns 0. The file will be
 * marked for the attic, and moved there later.
 * #Camera
 *
 * @rvalue
 * @param {filename} (string)
 * @return (integer)
 *
 */
LOFT (integer) filename (string);

/*
 * Begin a LOOP..[UNTL] or LOOP..[EVER] loop.
 * #Flow
 *
 */
LOOP (command);

/*
 * Returns id of the room adjacent to this one with the lowest concentration of the given CA.
 * direction is 0 for left/right, 1 for any direction.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @param {caIndex} (integer)
 * @param {directions} (integer)
 * @return (integer)
 *
 */
LORP (integer) roomId (integer) caIndex (integer) directions (integer);

/*
 * Sets latency time on involuntary actions to a random value between min and max. After an
 * involuntary action occurs, the same action will not be able to kick in again until after that
 * many ticks. Min and max must range between 0 and 255.
 * #Creatures
 *
 * @param {action} (integer)
 * @param {min} (integer)
 * @param {max} (integer)
 *
 */
LTCY (command) action (integer) min (integer) max (integer);

/*
 * Outputs help on the given command to the output stream.
 * #Debug
 *
 * @param {command} (string)
 *
 */
MANN (command) command (string);

/*
 * Sets the dimensions of the map. These are the maximum world coordinates. Metarooms are
 * rectangles within this area.
 * #Map
 *
 * @param {width} (integer)
 * @param {height} (integer)
 *
 */
MAPD (command) width (integer) height (integer);

/*
 * Returns the total height of the map.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
MAPH (integer);

/*
 * Resets the map to be empty.
 * #Map
 *
 */
MAPK (command);

/*
 * Returns the total width of the map.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
MAPW (integer);

/*
 * Male creature mates with the IT agent - if IT is a female of the same genus! The female doesn't
 * need to be in reach. If successful, the sperm is transmitted to the female and there is a
 * chance of conception. If pregnancy occurs, gene slot 1 of the mother contains the genome of the
 * child.
 * #Creatures
 *
 */
MATE (command);

/*
 * Clear the music for the metaroom at the given location.
 * #Sounds
 *
 * @param {x} (integer)
 * @param {y} (integer)
 *
 */
MCLR (command) x (integer) y (integer);

/*
 * Sends information about the memory allocated to the output stream. In order, these are the
 * Memory Load (unknown), Total Physical (size in bytes of physical memory), Available Physical
 * (free physical space), Total Page File (maximum possible size of page file), Available Page
 * File (size in bytes of space available in paging file), Total Virtual (size of user mode
 * portion of the virtual address space of the engine), Available Virtual (size of unreserved and
 * uncommitted memory in the user mode portion of the virtual address space of the engine).
 * #Debug
 *
 */
MEMX (command);

/*
 * Send a message to another agent. The message_id is from the table of Message Numbers; remember
 * that early Message Numbers differ slightly from Script Numbers. If used from an install script,
 * then [FROM] for the message to [NULL] rather than [OWNR].
 * #Agents
 *
 * @param {agent} (agent)
 * @param {messageId} (integer)
 *
 */
MESG WRIT (command) agent (agent) messageId (integer);

/*
 * Send a message with parameters to another agent. Waits delay ticks before sending the message.
 * The message_id is from the table of Message Numbers.
 * #Agents
 *
 * @param {agent} (agent)
 * @param {messageId} (integer)
 * @param {param1} (any)
 * @param {param2} (any)
 * @param {delay} (integer)
 *
 */
MESG WRT+ (command) agent (agent) messageId (integer) param1 (any) param2 (any) delay (integer);

/*
 * Change the current camera (set with [SCAM]) to a new meta room. Moves the top left coordinate of
 * the camera to the given coordinates.
 * Transition can be:
 * 0 - no transition effect
 * 1 - flip horizontally
 * 2 - burst
 * #Camera
 *
 * @param {metaroomId} (integer)
 * @param {cameraX} (integer)
 * @param {cameraY} (integer)
 * @param {transition} (integer)
 *
 */
META (command) metaroomId (integer) cameraX (integer) cameraY (integer) transition (integer);

/*
 * Returns the metaroom id that the current camera is looking at.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
META (integer);

/*
 * Plays a MIDI file. Set to an empty string to stop the MIDI player.
 * #Sounds
 *
 * @param {midiFile} (string)
 *
 */
MIDI (command) midiFile (string);

/*
 * Tell the agent to draw the current sprite mirrored (send 1 as a parameter) or normally (send 0
 * as a parameter)
 * #AgentSprites
 *
 * @param {onOff} (integer)
 *
 */
MIRA (command) onOff (integer);

/*
 * Is the current sprite for this agent mirrored (returns 1) or not (returns 0)
 * #AgentSprites
 *
 * @rvalue
 * @return (integer)
 */
MIRA (integer);

/*
 * Tell the agent to draw the whole scene mirrored (send 1 as a parameter) or normally (send 0 as
 * a parameter), the second paramater mirrors just the agents.
 * #Camera
 *
 * @param {sceneOnOff} (integer)
 * @param {agentsOnOff} (integer)
 *
 */
MIRR (command) sceneOnOff (integer) agentsOnOff (integer);

/*
 * Returns the location of the specified metaroom as a string formated as follows: x y width
 * height.
 * #Map
 *
 * @rvalue
 * @param {metaroomId} (integer)
 * @return (string)
 *
 */
MLOC (string) metaroomId (integer);

/*
 * Associates a music track with the meta room at the specified coordinates.
 * #Sounds
 *
 * @param {x} (integer)
 * @param {y} (integer)
 * @param {trackName} (string)
 *
 */
MMSC (command) x (integer) y (integer) trackName (string);

/*
 * Returns the name of the music track played at the metaroom in the given location.
 * #Sounds
 *
 * @rvalue
 * @param {x} (integer)
 * @param {y} (integer)
 * @return (string)
 *
 */
MMSC (string) x (integer) y (integer);

/*
 * Gives the remainder (or modulus) when a variable is divided by an integer, so var = var % mod.
 * Both values should to be integers.
 * #Math
 *
 * @param {var} (variable)
 * @param {mod} (integer)
 *
 */
MODV (command) var (variable) mod (integer);

/*
 * Returns the month of the year
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
MONT (integer);

/*
 * Returns x position of mouse in world coordinates.
 * #Input
 *
 * @rvalue
 * @return (integer)
 */
MOPX (integer);

/*
 * Returns y position of mouse in world coordinates.
 * #Input
 *
 * @rvalue
 * @return (integer)
 */
MOPY (integer);

/*
 * Defines the behaviour of the mouse button for the default pointer behaviour - see [PURE].
 * 0 is normal
 * 1 means the right button does what the left button does
 * 2 means the left button does what the right button does
 * #Input
 *
 * @param {behaviour} (integer)
 *
 */
MOUS (command) behaviour (integer);

/*
 * Returns the movement status of the target.
 * 0 Autonomous
 * 1 Mouse driven
 * 2 Floating
 * 3 In vehicle
 * 4 Carried
 * #Motion
 *
 * @rvalue
 * @return (integer)
 */
MOVS (integer);

/*
 * Returns horizontal mouse velocity.
 * #Input
 *
 * @rvalue
 * @return (float)
 */
MOVX (float);

/*
 * Returns vertical mouse velocity.
 * #Input
 *
 * @rvalue
 * @return (float)
 */
MOVY (float);

/*
 * Returns whether the lawn was cut last Sunday or not.
 * #Agents
 *
 * @rvalue
 * @return (integer)
 */
MOWS (integer);

/*
 * Returns a time stamp measured in milliseconds. It is not specified when the time is measured
 * from; the stamp is only guaranteed to be consistent during one session.
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
MSEC (integer);

/*
 * This returns the X position of the [TARG] creature's mouth attachment point in absolute (map)
 * coordinates.
 * #Agents
 *
 * @rvalue
 * @return (float)
 */
MTHX (float);

/*
 * This returns the Y position of the [TARG] creature's mouth attachment point in absolute (map)
 * coordinates.
 * #Agents
 *
 * @rvalue
 * @return (float)
 */
MTHY (float);

/*
 * Returns the agent which references the given moniker. The moniker could be stored in any of the
 * gene slots for that agent, including the special slot 0 for a creature. If the moniker is not
 * currently used in the game, then returns [NULL]. This command can be slow - use [MTOC] if possible.
 * #Genetics
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (agent)
 *
 */
MTOA (agent) moniker (string);

/*
 * Returns the creature with the given moniker. If there is no agent alive with that moniker, then
 * returns [NULL]. See also [MTOA].
 * #Genetics
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (agent)
 *
 */
MTOC (agent) moniker (string);

/*
 * Multiplies a variable by an integer or float, so var = var * mul.
 * #Math
 *
 * @param {var} (variable)
 * @param {mul} (decimal)
 *
 */
MULV (command) var (variable) mul (decimal);

/*
 * This returns (and potentially sets) the mute values for the sound managers in the game.
 * Sensible settings for the parameters are as follows:
 * andMask	eorMask	returns
 * 0	3	3 - Mutes both sound and music
 * 3	0	0 for no mute
 * 1 for sound muted
 * 2 for music muted
 * 3 for both muted
 * Sets nothing
 * 1	2	Returns 2 for music muted, or 3 for both muted
 * Only sets mute on music, leaves sound alone
 * #Sounds
 *
 * @rvalue
 * @param {andmask} (integer)
 * @param {eormask} (integer)
 * @return (integer)
 *
 */
MUTE (integer) andmask (integer) eormask (integer);

/*
 * Move the target agent by relative distances, which can be negative or positive.
 * #Motion
 *
 * @param {deltaX} (float)
 * @param {deltaY} (float)
 *
 */
MVBY (command) deltaX (float) deltaY (float);

/*
 * Move creature's down foot to position x,y. Use this instead of [MVTO] for creatures.
 * #Creatures
 *
 * @param {x} (float)
 * @param {y} (float)
 *
 */
MVFT (command) x (float) y (float);

/*
 * Move the target agent into a safe map location somewhere in the vicinity of x, y. Only works on
 * autonomous agents - see [MOVS]. Works like a safe [MVFT] for creatures.
 * #Motion
 *
 * @param {x} (float)
 * @param {y} (float)
 *
 */
MVSF (command) x (float) y (float);

/*
 * Move the top left corner of the target agent to the given world coordinates. Use [MVFT] instead
 * to move creatures.
 * #Motion
 *
 * @param {x} (float)
 * @param {y} (float)
 *
 */
MVTO (command) x (float) y (float);

/*
 *
 * #Variables
 *
 * @lvalue
 * @rvalue
 * @return (variable)
 */
MVXX (variable);

/*
 * Finds the next agent in the agent list which also matches the given classifier. If the previous
 * agent doesn't exist or doesn't match the classifier then the first agent matching it is
 * returned. If none match the classifier, then [NULL] is returned.
 * #AgentVars
 *
 * @rvalue
 * @param {previous} (agent)
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @return (agent)
 *
 */
NCLS (agent) previous (agent) family (integer) genus (integer) species (integer);

/*
 * Reverse the sign of the given integer or float variable, so var = 0 - var.
 * #Math
 *
 * @param {var} (variable)
 *
 */
NEGV (command) var (variable);

/*
 * Create a new compound agent. The sprite file is for the first part, which is made
 * automatically. Similarly, image_count and first_image are for that first part. The plane is the
 * absolute plane of part 1 - the planes of other parts are relative to the first part.
 * #AgentConstructors
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {spriteFile} (string)
 * @param {imageCount} (integer)
 * @param {firstImage} (integer)
 * @param {plane} (integer)
 *
 */
NEW: COMP (command) family (integer) genus (integer) species (integer) spriteFile (string) imageCount (integer) firstImage (integer) plane (integer);

/*
 * Makes a creature using the genome from the given gene slot in another agent. You'll want to use
 * [GENE CROS] or [GENE LOAD] to fill that slot in first. The gene slot is cleared, as control of that
 * genome is moved to the special slot 0 of the new creature, where it is expressed. Sex is 1 for
 * male, 2 for female or 0 for random. The variant can also be 0 for a random value between 1 and
 * 8. See also [NEWC].
 * #Creatures
 *
 * @param {family} (integer)
 * @param {geneAgent} (agent)
 * @param {geneSlot} (integer)
 * @param {sex} (integer)
 * @param {variant} (integer)
 *
 */
NEW: CREA (command) family (integer) geneAgent (agent) geneSlot (integer) sex (integer) variant (integer);

/*
 * Create a new simple agent, using the specified sprite file. The agent will have image_count
 * sprites available, starting at first_image in the file. The plane is the screen depth to show
 * the agent at - the higher the number, the nearer the camera.
 * #AgentConstructors
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {spriteFile} (string)
 * @param {imageCount} (integer)
 * @param {firstImage} (integer)
 * @param {plane} (integer)
 *
 */
NEW: SIMP (command) family (integer) genus (integer) species (integer) spriteFile (string) imageCount (integer) firstImage (integer) plane (integer);

/*
 * Create a new vehicle. Parameters are the same as [NEW: COMP].
 * #Vehicles
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {spriteFile} (string)
 * @param {imageCount} (integer)
 * @param {firstImage} (integer)
 * @param {plane} (integer)
 *
 */
NEW: VHCL (command) family (integer) genus (integer) species (integer) spriteFile (string) imageCount (integer) firstImage (integer) plane (integer);

/*
 * This version of [NEW: CREA] executes over a series of ticks, helping to prevent the pause caused
 * by the creation of a creature with the [NEW: CREA] command. However, it cannot be used in install
 * scripts (e.g. the bootstrap) and so [NEW: CREA] should be used for that.
 * #Creatures
 *
 * @param {family} (integer)
 * @param {geneAgent} (agent)
 * @param {geneSlot} (integer)
 * @param {sex} (integer)
 * @param {variant} (integer)
 *
 */
NEWC (command) family (integer) geneAgent (agent) geneSlot (integer) sex (integer) variant (integer);

/*
 * Closes an enumeration loop. The loop can begin with [ENUM], [ESEE], [ETCH] or [EPAS].
 * #Enumeration
 *
 */
NEXT (command);

/*
 * Tell the creature to immediately stop holding hands with the pointer. Useful when you are about
 * to teleport a norn, it prevents the pointer from continuosly changing his position back to
 * where it was.
 * #Creatures
 *
 */
NOHH (command);

/*
 * Chooses the active creature. Script 120 is executed on that creature, to inform them that
 * they've been selected.
 * #Creatures
 *
 * @param {creature} (agent)
 *
 */
NORN (command) creature (agent);

/*
 * Returns the creature currently selected by the user.
 * #Creatures
 *
 * @rvalue
 * @return (agent)
 */
NORN (agent);

/*
 * Returns the number of available pages for current text part.
 * #CompoundAgents
 *
 * @rvalue
 * @return (integer)
 */
NPGS (integer);

/*
 * Removes all clothes from a creature. Any changed layer 0 will revert to drawing the body part
 * again. See [WEAR].
 * #Creatures
 *
 */
NUDE (command);

/*
 * Returns a null agent pointer.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
NULL (agent);

/*
 * Returns the number of world directories.
 * #World
 *
 * @rvalue
 * @return (integer)
 */
NWLD (integer);

/*
 * Returns the distance from the agent to the nearest wall that it might collide with in the given
 * direction. Directions are [LEFT], [RGHT], [_UP_], or [DOWN]. If the distance to the collsion is greater
 * than [RNGE] then a very large number is returned.
 * #Motion
 *
 * @rvalue
 * @param {direction} (integer)
 * @return (float)
 *
 */
OBST (float) direction (integer);

/*
 * Checks if the given agent, or any of its parts, is on screen and returns 1 if it is or 0 if it
 * is not. Set to 0 to check if the agent is on the main camera. Set to 1 to check if the agent is
 * on the main camera or any remote cameras
 * #Agents
 *
 * @rvalue
 * @param {agent} (agent)
 * @param {checkallcameras} (integer)
 * @return (integer)
 *
 */
ONTV (integer) agent (agent) checkallcameras (integer);

/*
 * Returns the status of the moniker.
 * 0 - never existed, or history purged
 * 1 - genome referenced by a slot, for example an egg
 * 2 - creature made with [NEW: CREA]
 * 3 - creature properly [BORN]
 * 4 - out of world, exported
 * 5 - dead, body still exists
 * 6 - dead, body [KILL]ed
 * 7 - unreferenced genome
 * #History
 *
 * @rvalue
 * @param {moniker} (string)
 * @return (integer)
 *
 */
OOWW (integer) moniker (string);

/*
 * Sends a spoken command from target to all creatures that can hear it. As well as the usual
 * speech that Creatures can understand, there is a special syntax that can be used for learning
 * machines. This is as follows:
 * learn|perfect verb|noun|drive|qualifier|special|personal|nice_drive [number] [word]
 * Here the | means "or", the [number] is the id slot to learn, and [word] is the new text to fill
 * that word in with. "perfect" makes the Creature learn it perfectly straight away, whereas
 * "learn" does a gradually learning. See the Creatures 3 learning machine cos file for an example
 * use.
 * #Creatures
 *
 * @param {speech} (string)
 *
 */
ORDR SHOU (command) speech (string);

/*
 * Sends a spoken command from target to all creatures that can see it.
 * #Creatures
 *
 * @param {speech} (string)
 *
 */
ORDR SIGN (command) speech (string);

/*
 * Sends a spoken command from target to all creatures that are touching it.
 * #Creatures
 *
 * @param {speech} (string)
 *
 */
ORDR TACT (command) speech (string);

/*
 * Sends a spoken command from target to the specified creature.
 * #Creatures
 *
 * @param {creature} (agent)
 * @param {speech} (string)
 *
 */
ORDR WRIT (command) creature (agent) speech (string);

/*
 * Returns floating point data about the specified organ. The organ number is from 0 to [ORGN] - 1.
 * The data parameter specifies what information is returned:
 * 0 - Clock rate in updates per tick (as locus)
 * 1 - Short term life force as a proportion of intial (as locus)
 * 2 - Factor to modulate rate of repair (as locus)
 * 3 - Injury to apply (as locus)
 * 4 - Initial life force, a million is the largest initial value
 * 5 - Short term life force, temporary damage
 * 6 - Long term life force, permanent damage
 * 7 - Long term rate damage during repair
 * 8 - Energy cost to run this organ, calculated from the number of receptors, emitters and
 * reactions
 * 9 - Damage done to the organ if no energy is available
 * #Creatures
 *
 * @rvalue
 * @param {organNumber} (integer)
 * @param {data} (integer)
 * @return (float)
 *
 */
ORGF (float) organNumber (integer) data (integer);

/*
 * Returns integer data about the specified organ. The organ number is from 0 to [ORGN] - 1. The
 * data parameter specifies what information is returned:
 * 0 - receptor count
 * 1 - emitter count
 * 2 - reaction count.
 * #Creatures
 *
 * @rvalue
 * @param {organNumber} (integer)
 * @param {data} (integer)
 * @return (integer)
 *
 */
ORGI (integer) organNumber (integer) data (integer);

/*
 * Returns the number of organs in target creature.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
ORGN (integer);

/*
 * Peform a bitwise OR on an integer variable, so var = var | value.
 * #Math
 *
 * @param {var} (variable)
 * @param {value} (integer)
 *
 */
ORRV (command) var (variable) value (integer);

/*
 * Sends a string to the output stream. When running a script, the stream is null and this command
 * does nothing. For an externally injected command, the data from the stream is returned to the
 * calling process. For the [CAOS] command, the text is returned as a string. You can use [FILE OOPE]
 * to set the stream to a journal file.
 * #Files
 *
 * @param {text} (string)
 *
 */
OUTS (command) text (string);

/*
 * Similar to [OUTS] only outputs a float or integer as a decimal string.
 * #Files
 *
 * @param {value} (decimal)
 *
 */
OUTV (command) value (decimal);

/*
 * This sends the string text to the output stream. However it first transforms any escapes into
 * quoted escapes, and it also quotes the entire string for you.
 * e.g.:
 * outx "Moooose\n"
 * Would produce:
 * "Moooose\n"
 * on the output stream instead of:
 * Moooose
 * #Files
 *
 * @param {text} (string)
 *
 */
OUTX (command) text (string);

/*
 * Wait until the current agent/part's [ANIM]ation is over before continuing. Looping anims stop
 * this command terminating until the animation is changed to a non-looping one.
 * #AgentAnimation
 *
 */
OVER (command);

/*
 *
 * #Variables
 *
 * @lvalue
 * @rvalue
 * @return (variable)
 */
OVXX (variable);

/*
 * Returns the agent who's virtual machine the script is running on. Returns [NULL] for injected or
 * install scripts.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
OWNR (agent);

/*
 * Returns the tick rate satisfaction factor.
 * Factor 1 - ticks are taking the time we would expect them to, which is 0.05 secs.
 * Factor more than 1 - the engine is running too slowly.
 * Factor less than 1 - the engine is leaving spare processing time.
 * This is averaged over the last 10 ticks.
 * Agents can look at this to adjust the resources they use according to current spare processing
 * time. For example, if you have a random snowflake generator in winter, you could increase the
 * chance of generation if PACE is low, and decrease the chance if PACE is high. When you do this
 * remember that computers will be arbitarily faster in the future, so you should place an extra
 * upper limit on the number of snowflakes to stop them filling the whole screen.
 * Note that PACE only measures the time the engine takes for tick processing, not for handling
 * requests from external applications, or adding Windows events to its internal queue. Because of
 * this, you should aim for a value which is a bit less than 1.
 * Compare [RACE].
 * #Time
 *
 * @rvalue
 * @return (float)
 */
PACE (float);

/*
 * Sets current page for text part. The page number should be equal or greater than zero and less
 * than the number returned by [NPGS]. Use [PAT: TEXT] or [PAT: FIXD] to make a text part, and [PART] to
 * set the current part.
 * #CompoundAgents
 *
 * @rvalue
 * @return (integer)
 */
PAGE (integer);

/*
 * Returns the current page for current text part. See the PAGE command for more information.
 * #CompoundAgents
 *
 * @rvalue
 * @return (integer)
 */
PAGE (integer);

/*
 * Sets the working part number. Future command such as [POSE] and [ANIM], amongst others, act on that
 * part of a compound agent.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 *
 */
PART (command) partId (integer);

/*
 * Create a button on a compound agent. anim_hover is an animation, as in the [ANIM] command, to use
 * when the mouse is over the button - when the mouse is moved off, it returns to any previous
 * animation that was going. message_id is sent when the button is clicked. option is 0 for the
 * mouse to hit anywhere in the bounding box, 1 to hit only non-transparent pixels.
 * [_P1_] of the message is set to the part number of the buttons allowing you to overload your
 * messages by button group and then switch on input value in the script.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 * @param {spriteFile} (string)
 * @param {firstImage} (integer)
 * @param {imageCount} (integer)
 * @param {relX} (decimal)
 * @param {relY} (decimal)
 * @param {relPlane} (integer)
 * @param {animHover} [anim]
 * @param {messageId} (integer)
 * @param {option} (integer)
 *
 */
PAT: BUTT (command) partId (integer) spriteFile (string) firstImage (integer) imageCount (integer) relX (decimal) relY (decimal) relPlane (integer) animHover [anim] messageId (integer) option (integer);

/*
 * Creates a part that will recieve keyboard input and translate key codes.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 *
 */
PAT: CHAR (command) partId (integer);

/*
 * Create a camera with possible overlay sprite whose name may be blank. Use [SCAM] to change the
 * camera's view.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 * @param {overlaySprite} (string)
 * @param {baseimage} (integer)
 * @param {relx} (decimal)
 * @param {rely} (decimal)
 * @param {relplane} (integer)
 * @param {viewwidth} (integer)
 * @param {viewheight} (integer)
 * @param {camerawidth} (integer)
 * @param {cameraheight} (integer)
 *
 */
PAT: CMRA (command) partId (integer) overlaySprite (string) baseimage (integer) relx (decimal) rely (decimal) relplane (integer) viewwidth (integer) viewheight (integer) camerawidth (integer) cameraheight (integer);

/*
 * Create a dull part for a compound agent. A dull part does nothing except show an image from the
 * given sprite file. You should number part ids starting at 1, as part 0 is automatically made
 * when the agent is made. The dull part's position is relative to part 0, as is its plane. Use
 * [PART] to select it before you change [POSE] or [ANIM], or use various other commands.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 * @param {spriteFile} (string)
 * @param {firstImage} (integer)
 * @param {relX} (decimal)
 * @param {relY} (decimal)
 * @param {relPlane} (integer)
 *
 */
PAT: DULL (command) partId (integer) spriteFile (string) firstImage (integer) relX (decimal) relY (decimal) relPlane (integer);

/*
 * Create a fixed text part. The text is wrapped on top of the supplied gallery image. new-line
 * characters may be used. Use [PTXT] to set the text.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 * @param {spriteFile} (string)
 * @param {firstImage} (integer)
 * @param {relX} (decimal)
 * @param {relY} (decimal)
 * @param {relPlane} (integer)
 * @param {fontSprite} (string)
 *
 */
PAT: FIXD (command) partId (integer) spriteFile (string) firstImage (integer) relX (decimal) relY (decimal) relPlane (integer) fontSprite (string);

/*
 * Creates a graph part on a compound agent. Use [GRPL] to add a line to the graph and [GRPV] to add a
 * value to a graph line.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 * @param {overlaySprite} (string)
 * @param {baseimage} (integer)
 * @param {relx} (decimal)
 * @param {rely} (decimal)
 * @param {relplane} (integer)
 * @param {numvalues} (integer)
 *
 */
PAT: GRPH (command) partId (integer) overlaySprite (string) baseimage (integer) relx (decimal) rely (decimal) relplane (integer) numvalues (integer);

/*
 * Destroys the specified part of a compound agent. You can't destroy part 0.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 *
 */
PAT: KILL (command) partId (integer);

/*
 * Creates a text entry part. Gains the focus when you click on it, or with the [FCUS] command.
 * Sends the message_id when return is pressed - a good place to use [PTXT] to get the text out, and
 * to set the focus elsewhere. Set message_id to 0 to not call any script, or to -1 to not send
 * any message and instead insert a carriage return.
 * #CompoundAgents
 *
 * @param {partId} (integer)
 * @param {spriteFile} (string)
 * @param {firstImage} (integer)
 * @param {relX} (decimal)
 * @param {relY} (decimal)
 * @param {relPlane} (integer)
 * @param {messageId} (integer)
 * @param {fontSprite} (string)
 *
 */
PAT: TEXT (command) partId (integer) spriteFile (string) firstImage (integer) relX (decimal) relY (decimal) relPlane (integer) messageId (integer) fontSprite (string);

/*
 * Stops the target agent from running - it'll freeze completely, scripts and physics. Set to 1 to
 * pause, 0 to run. You might want to use [WPAU] with this to implement a pause game option.
 * #Agents
 *
 * @param {paused} (integer)
 *
 */
PAUS (command) paused (integer);

/*
 * Returns 1 if the target agent is paused, or 0 otherwise.
 * #Agents
 *
 * @rvalue
 * @return (integer)
 */
PAUS (integer);

/*
 * Returns 1 for debug pawsed, 0 for playing. See [DBG: PAWS].
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
PAWS (integer);

/*
 * Same as [NCLS], only cycles the other way.
 * #AgentVars
 *
 * @rvalue
 * @param {next} (agent)
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @return (agent)
 *
 */
PCLS (agent) next (agent) family (integer) genus (integer) species (integer);

/*
 * Value from 1 to 100. Sets which room boundaries the agent can pass through. The smaller the
 * PERM the more it can go through. [DOOR] sets the corresponding room boundary permiability. Also
 * used for [ESEE], to decide what it can see through.
 * #Map
 *
 * @param {permiability} (integer)
 *
 */
PERM (command) permiability (integer);

/*
 * Returns the target's map permiability.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
PERM (integer);

/*
 * Sets the target agent's principal drawing plane. The higher the value, the nearer the camera.
 * For compound agents, the principal plane is the one for the automatically made first part. The
 * plane of other parts is relative to this one.
 * #AgentBounds
 *
 * @param {plane} (integer)
 *
 */
PLNE (command) plane (integer);

/*
 * Returns the screen depth plane of the principal part.
 * #AgentBounds
 *
 * @rvalue
 * @return (integer)
 */
PLNE (integer);

/*
 * Returns the mouse pointer, which is also known as the hand.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
PNTR (agent);

/*
 * Returns bottom position of target's bounding box.
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
POSB (float);

/*
 * Specify a frame in the sprite file for the target agent/part. Relative to any index specified
 * by [BASE].
 * #AgentSprites
 *
 * @rvalue
 * @return (integer)
 */
POSE (integer);

/*
 * Return the current POSE of the target agent/part, or -1 if invalid part.
 * #AgentSprites
 *
 * @rvalue
 * @return (integer)
 */
POSE (integer);

/*
 * Returns left position of target's bounding box.
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
POSL (float);

/*
 * Returns right position of target's bounding box.
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
POSR (float);

/*
 * Returns top position of target's bounding box.
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
POST (float);

/*
 * Returns X position of centre of target.
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
POSX (float);

/*
 * Returns Y position of centre of target.
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
POSY (float);

/*
 * This returns the value of the integer tag associated with the named resource. If the resource
 * does not contain such a tag, then the default value specified is returned. This call pairs with
 * [PRAY AGTS].
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @param {integerTag} (string)
 * @param {defaultValue} (integer)
 * @return (integer)
 *
 */
PRAY AGTI (integer) resourceName (string) integerTag (string) defaultValue (integer);

/*
 * This returns the value of the string tag associated with the named resource. If the resource
 * does not contain such a tag, then the default value specified is returned. This call pairs with
 * [PRAY AGTI].
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @param {stringTag} (string)
 * @param {defaultValue} (string)
 * @return (string)
 *
 */
PRAY AGTS (string) resourceName (string) stringTag (string) defaultValue (string);

/*
 * This returns the number of resource chunks which are tagged with the resource type passed in.
 * Resource types are four characters only. Anything over that length will be silently truncated.
 * #Pray
 *
 * @rvalue
 * @param {resourceType} (string)
 * @return (integer)
 *
 */
PRAY COUN (integer) resourceType (string);

/*
 * This performs a scan of the specified resource, and checks out the dependency data. The primary
 * use for this would be in the preparation for injection of agents. If you pass zero in the
 * do_install parameter, then the dependencies are only checked. If do_install is non-zero, then
 * they are installed also. The return values are as follows:
 * 0 = Success
 * -1 = Agent Type not found
 * -2 = Dependency Count not found
 * -3 to -(2 + count) is the dependency string missing
 * -(3+count) to -(2+2*count) is the dependency type missing
 * 2*count to 3*count is the category ID for that dependency being invalid
 * 1 to count is the dependency failing
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @param {doInstall} (integer)
 * @return (integer)
 *
 */
PRAY DEPS (integer) resourceName (string) doInstall (integer);

/*
 * This function exports the target creature. If the creature is exported successfully then it has
 * been removed from the world. Returns value is one of the following:
 * 0 for success
 * 1 if the creature, or if pregnant any of its offspring, are already on disk in some form.
 * The chunk type should be used to find the creature again to import it. In Creatures 3, most
 * exported creatures have a chunk type EXPC, and the starter family uses SFAM.
 * For new games, you should not use SFAM, as its data would get confused with that of an EXPC
 * with the same moniker. This is for backwards compatibility with Creatures 3's use of SFAM,
 * which works because the [CAOS] code guarantees different monikers.
 * For other chunk names, creatures exported with a different type are kept entirely separately,
 * and will not get confused with each other. The chunk type is added to the end of the moniker to
 * form the chunk name.
 * The exported creature has some fields associated with it, that can be read by [PRAY AGTI] or PRAY
 * AGTS before importing:
 * "Exported At World Time" integer
 * "Creature Age In Ticks" integer
 * "Exported At Real Time" integer
 * "Creature Life Stage" integer
 * "Exported From World Name" string
 * "Exported From World UID" string
 * "Native Network User" string
 * "Last Network User" (could be faked, NET: FROM is safer) string
 * "Creature Name" string
 * "Gender" integer
 * "Genus" integer
 * "Variant" integer
 * "Head Gallery" string (this is calculated on the sending computer, so the file may be missing
 * on the receiving one - try LIMB instead)
 * "Pregnancy Status" integer
 * In addition you can add custom fields by setting NAME variables on the Creature before export.
 * Any strings or integers whose name begin "Pray Extra " are added as entries to the export file.
 * #Pray
 *
 * @rvalue
 * @param {chunkType} (string)
 * @return (integer)
 *
 */
PRAY EXPO (integer) chunkType (string);

/*
 * This performs the "installation" of one file from the resource files. The resource_type is
 * defined in the agent resource guide. If do_install is zero, the command simply checks if the
 * file install should succeed. Return value is 0 for success, 1 for error.
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @param {resourceType} (integer)
 * @param {doInstall} (integer)
 * @return (integer)
 *
 */
PRAY FILE (integer) resourceName (string) resourceType (integer) doInstall (integer);

/*
 * This command clears the manager's cached resource data. Execute this after a lot of resource
 * accesses (E.g. installing an agent) to clean up the memory used during the process. If you
 * don't do this, excess memory can be held for a while, If the parameter is zero (the most usual)
 * then the manager will only forget resources which are not in use at the moment. If force is
 * non-zero, then the manager will forget all the previously loaded resources. As the resources
 * currently in use go out of scope, they are automatically garbage collected.
 * #Pray
 *
 * @param {force} (integer)
 *
 */
PRAY GARB (command) force (integer);

/*
 * This function imports the creature with the requested moniker and chunk type. Returns one of
 * the following codes:
 * 0 - success
 * 1 - couldn't reconcile histories so creature was cloned
 * 2 - moniker not found in PRAY system
 * 3 - unused error code
 * 4 - internal / file format error
 * Set actually_do_it to 1 to try and perform the import, or 0 to perform a query giving just the
 * return value. You can use the query to test if the creature is available, and if the creature
 * would have to be cloned upon importing, and warn the user. The new creature is [TARG]etted after
 * import. If you set keep file to 1, then the exported file won't be deleted (moved to the
 * porch). The creature will appear in the same place that it was exported, but as with [NEW: CREA],
 * it will be in limbo, and won't function until moved to a valid place.
 * #Pray
 *
 * @rvalue
 * @param {monikerChunk} (string)
 * @param {actuallyDoIt} (integer)
 * @param {keepFile} (integer)
 * @return (integer)
 *
 */
PRAY IMPO (integer) monikerChunk (string) actuallyDoIt (integer) keepFile (integer);

/*
 * This command injects an agent. The agent must be in the chunk named. If do_install is zero, the
 * command simply checks for the presence of the required scripts and dependencies. If non-zero,
 * it attempts to inject the agent. The report var is a string variable, and is set to the name of
 * the offending script if the injection/check fails.
 * Return is 0 for success, -1 for "Script not found" and if injecting, -2 for "Injection failed".
 * Return value -3 indicates that a dependency evaluation failed, and in this case, the report var
 * is the return code from PRAY DEPS
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @param {doInstall} (integer)
 * @param {reportVar} (variable)
 * @return (integer)
 *
 */
PRAY INJT (integer) resourceName (string) doInstall (integer) reportVar (variable);

/*
 * Please see the documentation accompanying the praybuilder on CDN
 * Suffice it to say: return value is zero for success, otherwise non-zero, and report is set to
 * the praybuilder output for you
 * Also, the which_journal_spot is zero for world journal, 1 for global journal. Also the
 * which_pray_spot is zero for "My Agents" and 1 for "My Creatures"
 * #Pray
 *
 * @rvalue
 * @param {whichJournalSpot} (integer)
 * @param {journalName} (string)
 * @param {whichPraySpot} (integer)
 * @param {prayName} (string)
 * @param {reportDestination} (variable)
 * @return (integer)
 *
 */
PRAY MAKE (integer) whichJournalSpot (integer) journalName (string) whichPraySpot (integer) prayName (string) reportDestination (variable);

/*
 * This returns the name of the resource chunk directly after the named one, given that they are
 * of the same type. It loops when it reaches the end. If the named resource cannot be found in
 * the list of resources of the type specified, then the last resource of that type is returned.
 * This call pairs with [PRAY PREV]. Compare PRAY FORE.
 * #Pray
 *
 * @rvalue
 * @param {resourceType} (string)
 * @param {lastKnown} (string)
 * @return (string)
 *
 */
PRAY NEXT (string) resourceType (string) lastKnown (string);

/*
 * This returns the name of the resource chunk directly before the named one, given that they are
 * of the same type. It loops when it reaches the end. If the named resource cannot be found in
 * the list of resources of the type specified, then the first resource of that type is returned.
 * This call pairs with [PRAY NEXT]. Compare PRAY BACK.
 * #Pray
 *
 * @rvalue
 * @param {resourceType} (string)
 * @param {lastKnown} (string)
 * @return (string)
 *
 */
PRAY PREV (string) resourceType (string) lastKnown (string);

/*
 * This command refreshes the engine's view of the Resource directory. Execute this if you have
 * reason to believe that the files in the directory may have changed. It only detects changes if
 * there is a new file or a deleted file - if a file has only changed it won't notice. This is
 * awkward during development, you can use PRAY KILL to kill the old file before copying the new
 * one over. PRAY REFR forces a [PRAY GARB] to happen automatically.
 * #Pray
 *
 */
PRAY REFR (command);

/*
 * The return value for this is the size of the chunk. This can be used to determine chunk
 * information for decisions on time criteria. E.g. a large compressed chunk will take a short
 * while to decompress.
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @return (integer)
 *
 */
PRAY SIZE (integer) resourceName (string);

/*
 * This checks for the existence of a chunk, returning zero if it is not found, and a value from
 * 1-3 indicating the cost to load if it is.
 * Return values are currently defined as:
 * 0 - Chunk not available at this time
 * 1 - Chunk Available, Cached and ready for use
 * 2 - Chunk available, on disk uncompressed and fine for loading
 * 3 - Chunk available, on disk compressed and ready for loading.
 * Thus the return value could be thought of as the cost of loading, where 1 is no cost, and 3 is
 * high cost.
 * #Pray
 *
 * @rvalue
 * @param {resourceName} (string)
 * @return (integer)
 *
 */
PRAY TEST (integer) resourceName (string);

/*
 * Prints an image from the [TARG] agent's sprite file. The pose is taken to be from the current
 * base image.
 * #Camera
 *
 * @param {pose} (integer)
 *
 */
PRNT (command) pose (integer);

/*
 * Sets the level of a CA (cellular automata) in a particular room. There are 16 CAs, and their
 * meaning depends on the game. The level is between 0 and 1.
 * #Map
 *
 * @param {roomId} (integer)
 * @param {caIndex} (integer)
 * @param {caValue} (float)
 *
 */
PROP (command) roomId (integer) caIndex (integer) caValue (float);

/*
 * Returns the value of a CA in a room.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @param {caIndex} (integer)
 * @return (float)
 *
 */
PROP (float) roomId (integer) caIndex (integer);

/*
 * Breaks connections randomly with other machines (as if the machine had been 'banged'. Use a
 * bang_strength of 100 to disconnect all ports, 50 to disconnect about half etc.
 * #Ports
 *
 * @param {bangStrength} (integer)
 *
 */
PRT: BANG (command) bangStrength (integer);

/*
 * Returns the agent from which the input port is fed. Returns NULLHANDLE if that port does not
 * exist, or is not connected.
 * #Ports
 *
 * @rvalue
 * @param {inputport} (integer)
 * @return (agent)
 *
 */
PRT: FRMA (agent) inputport (integer);

/*
 * Returns the output port index on the source agent, feeding that input port on the [TARG] agent.
 * Return values are -ve for error.
 * #Ports
 *
 * @rvalue
 * @param {inputport} (integer)
 * @return (integer)
 *
 */
PRT: FROM (integer) inputport (integer);

/*
 * Create a new input port on target. You should number input port ids starting at 0. The
 * message_num is the message that will be sent to the agent when a signal comes in through the
 * input port. [_P1_] of that message will contain the data value of the signal. The position of the
 * port, relative to the agent, is given by x, y.
 * #Ports
 *
 * @param {id} (integer)
 * @param {name} (string)
 * @param {description} (string)
 * @param {x} (integer)
 * @param {y} (integer)
 * @param {messageNum} (integer)
 *
 */
PRT: INEW (command) id (integer) name (string) description (string) x (integer) y (integer) messageNum (integer);

/*
 * Returns the number of input ports, assuming they are indexed sequentially.
 * #Ports
 *
 * @rvalue
 * @return (integer)
 */
PRT: ITOT (integer);

/*
 * Remove the specified input port.
 * #Ports
 *
 * @param {id} (integer)
 *
 */
PRT: IZAP (command) id (integer);

/*
 * Connect an output port on the source agent to an input port on the destination. An input may
 * only be connected to one output at at time, but an output may feed any number of inputs.
 * #Ports
 *
 * @param {sourceAgent} (agent)
 * @param {outputId} (integer)
 * @param {destAgent} (agent)
 * @param {inputId} (integer)
 *
 */
PRT: JOIN (command) sourceAgent (agent) outputId (integer) destAgent (agent) inputId (integer);

/*
 * Breaks a specific connection on a machine. If in_or_out is zero, it is an input port whose
 * connection is broken, if it is an output port, then all inputs are disconnected.
 * #Ports
 *
 * @param {agent} (agent)
 * @param {inOrOut} (integer)
 * @param {portIndex} (integer)
 *
 */
PRT: KRAK (command) agent (agent) inOrOut (integer) portIndex (integer);

/*
 * Returns the name of the indexed port (input port if in_or_out is zero, output port if non-zero)
 * on the specified agent. Returns "" in error.
 * #Ports
 *
 * @rvalue
 * @param {agent} (agent)
 * @param {inOrOut} (integer)
 * @param {portIndex} (integer)
 * @return (string)
 *
 */
PRT: NAME (string) agent (agent) inOrOut (integer) portIndex (integer);

/*
 * Create a new output port on target. You should number input port ids starting at 0. The port's
 * relative position is given by x, y.
 * #Ports
 *
 * @param {id} (integer)
 * @param {name} (string)
 * @param {description} (string)
 * @param {x} (integer)
 * @param {y} (integer)
 *
 */
PRT: ONEW (command) id (integer) name (string) description (string) x (integer) y (integer);

/*
 * Returns the number of output ports, assuming they are indexed sequentially.
 * #Ports
 *
 * @rvalue
 * @return (integer)
 */
PRT: OTOT (integer);

/*
 * Remove the specified output port.
 * #Ports
 *
 * @param {id} (integer)
 *
 */
PRT: OZAP (command) id (integer);

/*
 * Send a signal from the specified output port to all connected inputs. The data can be any
 * integer.
 * Resources
 * #Ports
 *
 * @param {id} (integer)
 * @param {data} (any)
 *
 */
PRT: SEND (command) id (integer) data (any);

/*
 * Sets the password of the current world.
 * #World
 *
 * @param {worldName} (string)
 *
 */
PSWD (command) worldName (string);

/*
 * Returns the password for the specified world. If the world is not password protected the return
 * value will be an empty string.
 * #World
 *
 * @rvalue
 * @param {worldindex} (integer)
 * @return (string)
 *
 */
PSWD (string) worldindex (integer);

/*
 * Set string of current text part. Use [PAT: TEXT] or [PAT: FIXD] to make a text part, and [PART] to
 * set the current part.
 * #CompoundAgents
 *
 * @param {text} (string)
 *
 */
PTXT (command) text (string);

/*
 * Returns the string of the current text part. See the PTXT command for more information.
 * #CompoundAgents
 *
 * @rvalue
 * @return (string)
 */
PTXT (string);

/*
 * Set the relative x and y coordinate of the handle that target is picked up by, for the given
 * pose. This pose is measured from the absolute base specified in the NEW: command, rather than
 * the relative base specified by the [BASE] command. Pose -1 sets the same point for all poses.
 * #AgentInteractions
 *
 * @param {pose} (integer)
 * @param {x} (integer)
 * @param {y} (integer)
 *
 */
PUHL (command) pose (integer) x (integer) y (integer);

/*
 * Returns the x or y coordinate of the handle that target is picked up by for the given pose.
 * x_or_y is 1 for x, 2 for y.
 * #AgentInteractions
 *
 * @rvalue
 * @param {pose} (integer)
 * @param {xOrY} (integer)
 * @return (integer)
 *
 */
PUHL (integer) pose (integer) xOrY (integer);

/*
 * Set the relative x and y coordinate of the place where target picks agents up, for the given
 * pose. This pose is measured from the absolute base specified in the NEW: command, rather than
 * the relative base specified by the [BASE] command. Pose -1 sets the same point for all poses. For
 * vehicles use the [CABN] command.
 * #AgentInteractions
 *
 * @param {pose} (integer)
 * @param {x} (integer)
 * @param {y} (integer)
 *
 */
PUPT (command) pose (integer) x (integer) y (integer);

/*
 * Returns the x or y coordinate of the place where target picks agents up for the given pose.
 * x_or_y is 1 for x, 2 for y.
 * #AgentInteractions
 *
 * @rvalue
 * @param {pose} (integer)
 * @param {xOrY} (integer)
 * @return (integer)
 *
 */
PUPT (integer) pose (integer) xOrY (integer);

/*
 * Enables or disables the default clicking and moving behaviour of the pointer. This default
 * behaviour is to implement [CLAC] and [CLIK], and to operate ports. Set to 1 to enable, 0 to
 * disable. When disabled, use [IMSK] to hook mouse events.
 * #Input
 *
 * @param {value} (integer)
 *
 */
PURE (command) value (integer);

/*
 * Returns whether default pointer behaviour is disabled or enabled. 1 if enabled, 0 if disabled.
 * #Input
 *
 * @rvalue
 * @return (integer)
 */
PURE (integer);

/*
 * Quits the engine at the start of the next tick, without saving any changes. Call [SAVE] first to
 * make it save the current world. If doing a sequence like "SAVE QUIT" or "SAVE LOAD menu", do it
 * in an [INST] section. Otherwise it will sometimes save between the two instructions, meaning it
 * quits (or loads menu) immediately upon reloading.
 * #World
 *
 */
QUIT (command);

/*
 * Returns the time in milliseconds which the last tick took overall. This differs from [PACE] in
 * that on fast machines it will have a minimum of 50 milliseconds. It accounts for all the time
 * in the tick, including event handling and window processing.
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
RACE (integer);

/*
 * Returns a random integer between value1 and value2 inclusive of both values. You can use
 * negative values, and have them either way round.
 * #Variables
 *
 * @rvalue
 * @param {value1} (integer)
 * @param {value2} (integer)
 * @return (integer)
 *
 */
RAND (integer) value1 (integer) value2 (integer);

/*
 * Sets various rates for a CA (cellular automata) in a particular type of room. The values can be
 * from 0 to 1. Gain is the susceptibility to absorb from agents in the room, and loss is the
 * amount lost to the atmosphere. The diffusion is the amount it spreads to adjacent rooms.
 * #Map
 *
 * @param {roomType} (integer)
 * @param {caIndex} (integer)
 * @param {gain} (float)
 * @param {loss} (float)
 * @param {diffusion} (float)
 *
 */
RATE (command) roomType (integer) caIndex (integer) gain (float) loss (float) diffusion (float);

/*
 * Returns a string containing gain, loss and diffusion rates for that combination of room type
 * and CA.
 * #Map
 *
 * @rvalue
 * @param {roomType} (integer)
 * @param {caIndex} (integer)
 * @return (string)
 *
 */
RATE (string) roomType (integer) caIndex (integer);

/*
 * Clear the music for the room at the given location.
 * #Sounds
 *
 * @param {x} (integer)
 * @param {y} (integer)
 *
 */
RCLR (command) x (integer) y (integer);

/*
 * Returns a string from the catalogue. This is used for localisation. offset 0 is the first
 * string after the TAG command in the catalogue file. See also [REAN] and [WILD].
 * #Catalogue
 *
 * @rvalue
 * @param {catalogueTag} (string)
 * @param {offset} (integer)
 * @return (string)
 *
 */
READ (string) catalogueTag (string) offset (integer);

/*
 * Refreshes the catalogue from files on disk, from the main catalogue directory and the world
 * catalogue directory. These are normally read in at startup, when a new world is read in, or
 * when the PRAY resources system installs a catalogue file. Use while developing [CAOS] programs to
 * refresh the catalogue as you add entries.
 * #Catalogue
 *
 */
REAF (command);

/*
 * Returns the number of entries in the catalogue for the given tag. For the same tag, you can
 * [READ] values from 0 to one less than REAN returns.
 * #Catalogue
 *
 * @rvalue
 * @param {catalogueTag} (string)
 * @return (integer)
 *
 */
REAN (integer) catalogueTag (string);

/*
 * Returns 1 if the catalogue tag is present, 0 if not.
 * #Catalogue
 *
 * @rvalue
 * @param {catalogueTag} (string)
 * @return (integer)
 *
 */
REAQ (integer) catalogueTag (string);

/*
 * Returns the relative X distance of the centre point of the second agent from the centre point
 * of the first.
 * #Motion
 *
 * @rvalue
 * @param {first} (agent)
 * @param {second} (agent)
 * @return (float)
 *
 */
RELX (float) first (agent) second (agent);

/*
 * Returns the relative Y distance of the centre point of the second agent from the centre point
 * of the first.
 * #Motion
 *
 * @rvalue
 * @param {first} (agent)
 * @param {second} (agent)
 * @return (float)
 *
 */
RELY (float) first (agent) second (agent);

/*
 * Closes a [REPS] loop.
 * #Flow
 *
 */
REPE (command);

/*
 * Loop through a block of code a number of times. Must have a matching [REPE] command to close the
 * block.
 * #Flow
 *
 * @param {count} (integer)
 *
 */
REPS (command) count (integer);

/*
 * Return from subroutine. Do not use this instruction from inside a block of code (eg a
 * [LOOP]#..[EVER] or [ENUM]...[NEXT] etc...)! See [SUBR] and [GSUB].
 * #Flow
 *
 */
RETN (command);

/*
 * Refresh all settings that are always read from game variables at start up e.g. the length of a
 * day. This allows you to change such setting on the fly.
 * #World
 *
 */
RGAM (command);

/*
 * Returns the value of the right constant.
 * #Map
 *
 * @rvalue
 * @return (integer)
 */
RGHT (integer);

/*
 * Returns the location of the specified room as a string formated as follows: xLeft xRight
 * yLeftCeiling yRightCeiling yLeftFloor yRightFloor.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @return (string)
 *
 */
RLOC (string) roomId (integer);

/*
 * Associates a music track with the room at the specified coordinates. This overrides any track
 * specified for the metaroom that the room is in.
 * #Sounds
 *
 * @param {x} (integer)
 * @param {y} (integer)
 * @param {trackName} (string)
 *
 */
RMSC (command) x (integer) y (integer) trackName (string);

/*
 * Returns the name of the music track played at the room in the given location.
 * #Sounds
 *
 * @rvalue
 * @param {x} (integer)
 * @param {y} (integer)
 * @return (string)
 *
 */
RMSC (string) x (integer) y (integer);

/*
 * Sets the distance that the target can see and hear, and the distance used to test for potential
 * collisions. See also [ESEE], [OBST].
 * #AgentBounds
 *
 * @param {distance} (float)
 *
 */
RNGE (command) distance (float);

/*
 * Returns the target's range. See [ESEE], [OBST].
 * #AgentBounds
 *
 * @rvalue
 * @return (float)
 */
RNGE (float);

/*
 * Returns the id of the room containing the midpoint of the specified agent.
 * #Map
 *
 * @rvalue
 * @param {agent} (agent)
 * @return (integer)
 *
 */
ROOM (integer) agent (agent);

/*
 * Specified vehicle drops the specified passenger.
 * #Vehicles
 *
 * @param {vehicle} (agent)
 * @param {passenger} (agent)
 *
 */
RPAS (command) vehicle (agent) passenger (agent);

/*
 * This clothes the [TARG] creature with the last stored clothing set - see [STRE] command.
 * #Creatures
 *
 */
RSET (command);

/*
 * Randomly chooses an agent which matches the given classifier, and targets it.
 * #AgentVars
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
RTAR (command) family (integer) genus (integer) species (integer);

/*
 * Takes a real world time, as returned by [RTIM] or [HIST RTIM] and converts it to a localised string
 * for display. The format string is made up of any text, with the following special codes:
 * %a - Abbreviated weekday name
 * %A - Full weekday name
 * %b - Abbreviated month name
 * %B - Full month name
 * %c - Date and time representation appropriate for locale
 * %d - Day of month as decimal number (01 - 31)
 * %H - Hour in 24-hour format (00 - 23)
 * %I - Hour in 12-hour format (01 - 12)
 * %j - Day of year as decimal number (001 - 366)
 * %m - Month as decimal number (01 - 12)
 * %M - Minute as decimal number (00 - 59)
 * %p - Current locale’s AM/PM indicator for 12-hour clock
 * %S - Second as decimal number (00 - 59)
 * %U - Week of year as decimal number, with Sunday as first day of week (00 - 53)
 * %w - Weekday as decimal number (0 - 6; Sunday is 0)
 * %W - Week of year as decimal number, with Monday as first day of week (00 - 53)
 * %x - Date representation for current locale
 * %X - Time representation for current locale
 * %y - Year without century, as decimal number (00 - 99)
 * %Y - Year with century, as decimal number
 * %z, %Z - Time-zone name or abbreviation; no characters if time zone is unknown
 * %% - Percent sign
 * The # flag may prefix any formatting code, having the following meanings:
 * %#a, %#A, %#b, %#B, %#p, %#X, %#z, %#Z, %#% # flag is ignored.
 * %#c Long date and time representation, appropriate for current locale. For example: Tuesday,
 * March 14, 1995, 12:41:29.
 * %#x Long date representation, appropriate to current locale. For example: Tuesday, March 14,
 * 1995.
 * %#d, %#H, %#I, %#j, %#m, %#M, %#S, %#U, %#w, %#W, %#y, %#Y Remove leading zeros (if any).
 * You probably want to [READ] any formatted string you use from a catalogue file.
 * #Time
 *
 * @rvalue
 * @param {realTime} (integer)
 * @param {format} (string)
 * @return (string)
 *
 */
RTIF (string) realTime (integer) format (string);

/*
 * Returns the current real world time. This is measured in seconds since midnight, 1 January 1970
 * in UTC. To display, use [RTIF].
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
RTIM (integer);

/*
 * Sets the type of a room. The meaning of the types depends on the game. [RATE] also uses the room
 * type.
 * #Map
 *
 * @param {roomId} (integer)
 * @param {roomType} (integer)
 *
 */
RTYP (command) roomId (integer) roomType (integer);

/*
 * Returns the type of a room, or -1 if not a valid room id.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @return (integer)
 *
 */
RTYP (integer) roomId (integer);

/*
 * Saves the current world at the start of the next tick. See also [QUIT] for important information
 * about using [INST].
 * #World
 *
 */
SAVE (command);

/*
 * Creature expresses need, by speaking.
 * #Creatures
 *
 */
SAYN (command);

/*
 * Sets the current camera to be used in subsequent camera macro commands. This uses the given
 * [TARG] and the given [PART] number. If you set this to [NULL] then the Main Camera will be used. This
 * is the default setting
 * #Camera
 *
 * @param {compoundagent} (agent)
 * @param {partnumber} (integer)
 *
 */
SCAM (command) compoundagent (agent) partnumber (integer);

/*
 * Scales an image from the [TARG] agent's sprite file by the given percentage. The scale factor
 * always refers to the original size of the image. If the pose number is -1 then the whole sprite
 * file will be cloned and scaled. Note that this takes up lots of memory.
 * #AgentSprites
 *
 * @param {pose} (integer)
 * @param {scaleby} (float)
 *
 */
SCLE (command) pose (integer) scaleby (float);

/*
 * Set an AND and an EOR mask, to control the following scrolling functions:
 * 1 - Screen edge nudgy scrolling
 * 2 - Keyboard scrolling
 * 4 - Middle mouse button screen dragging
 * 8 - Mouse wheel screen scrolling
 * The byte strings is used for nudgy and keyboard scrolling. The defaults are [1 2 4 8 16 32 64]
 * and [0 1 2 4 8 16 32]. They represent the number of pixels scrolled each consecutive tick, as
 * the scrolling gets slower and faster.
 * If you use [] for a byte string, then the string won't be changed at all.
 * #Time
 *
 * @rvalue
 * @param {andMask} (integer)
 * @param {eorMask} (integer)
 * @param {upSpeeds} [byte_string]
 * @param {downSpeeds} [byte_string]
 * @return (integer)
 *
 */
SCOL (integer) andMask (integer) eorMask (integer) upSpeeds [byte_string] downSpeeds [byte_string];

/*
 * This turns off all scrolling capabilities these are the automatic scrolling with the mouse and
 * cursor keys.
 * #Camera
 *
 * @param {toggleOnOff} (integer)
 *
 */
SCRL (command) toggleOnOff (integer);

/*
 * Remove specified script from the scriptorium.
 * #Scripts
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {event} (integer)
 *
 */
SCRX (command) family (integer) genus (integer) species (integer) event (integer);

/*
 * Returns the current season. This can be
 * 0 - spring
 * 1 - summer
 * 2 - autumn
 * 3 - winter
 * The [GAME] variable engine_LengthOfSeasonInDays sets the season length. See also [HIST SEAN].
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
SEAN (integer);

/*
 * Returns 1 if the first agent can see the second, or 0 if it can't. See [ESEE].
 * #Agents
 *
 * @rvalue
 * @param {first} (agent)
 * @param {second} (agent)
 * @return (integer)
 *
 */
SEEE (integer) first (agent) second (agent);

/*
 * Stores a reference to an agent in a variable.
 * #Variables
 *
 * @param {var} (variable)
 * @param {value} (agent)
 *
 */
SETA (command) var (variable) value (agent);

/*
 * Sets a variable to a string value.
 * #Variables
 *
 * @param {var} (variable)
 * @param {value} (string)
 *
 */
SETS (command) var (variable) value (string);

/*
 * Stores an integer or float in a variable.
 * #Variables
 *
 * @param {var} (variable)
 * @param {value} (decimal)
 *
 */
SETV (command) var (variable) value (decimal);

/*
 * Makes the [TARG] agent speak the specified text with voice as set by [VOIS] or [VOIC]. If [TARG] is a
 * creature then it will be spoken properly (speech bubble et al).
 * #Sounds
 *
 * @param {text} (string)
 *
 */
SEZZ (command) text (string);

/*
 * Set the parameter to 0 to hide the agent and to 1 to show the agent on camera. This removes or
 * adds the agent to the main camera and any remote cameras. A non-shown agent can still be
 * visible to creatures, and can still be clicked on or picked up. It just doesn't appear on the
 * cameras.
 * #Agents
 *
 * @param {visibility} (integer)
 *
 */
SHOW (command) visibility (integer);

/*
 * Returns true if the [TARG] is currently on visible, false otherwise.
 * #Agents
 *
 * @rvalue
 * @return (integer)
 */
SHOW (integer);

/*
 * Returns sine of theta. Theta should be in degrees.
 * #Variables
 *
 * @rvalue
 * @param {theta} (float)
 * @return (float)
 *
 */
SIN_ (float) theta (float);

/*
 * Turn off [INST] state.
 * #Scripts
 *
 */
SLOW (command);

/*
 * This takes a photograph of the world at a particular place. The zoom parameter should be <=
 * 100. 100 means at original size, 50 means half size etc. It makes a new image file in the world
 * images directory - you can use it to make agents and parts as with any image file. Call [SNAX]
 * first to check your filename isn't already in use in any images directory. When you have
 * finished with the file, call [LOFT].
 * #Camera
 *
 * @param {filename} (string)
 * @param {xCentre} (integer)
 * @param {yCentre} (integer)
 * @param {width} (integer)
 * @param {height} (integer)
 * @param {zoomFactor} (integer)
 *
 */
SNAP (command) filename (string) xCentre (integer) yCentre (integer) width (integer) height (integer) zoomFactor (integer);

/*
 * Returns 1 if the specified image file exists, or 0 if it doesn't. Use with [SNAP] to find a
 * unique filename to use.
 * #Camera
 *
 * @rvalue
 * @param {filename} (string)
 * @return (integer)
 *
 */
SNAX (integer) filename (string);

/*
 * Plays a controlled sound effect emitted from the target. Updates volume and panning as the
 * agent moves.
 * #Sounds
 *
 * @param {soundFile} (string)
 *
 */
SNDC (command) soundFile (string);

/*
 * Play a sound effect audible as if emitted from target's current location.
 * #Sounds
 *
 * @param {soundFile} (string)
 *
 */
SNDE (command) soundFile (string);

/*
 * Play a sound effect as in [SNDC], only the sound is looped.
 * #Sounds
 *
 * @param {soundFile} (string)
 *
 */
SNDL (command) soundFile (string);

/*
 * As [SNDE], only with a delay before playing.
 * #Sounds
 *
 * @param {soundFile} (string)
 * @param {delay} (integer)
 *
 */
SNDQ (command) soundFile (string) delay (integer);

/*
 * Returns the source code for the specified script. Use the GIDS commands to find available
 * scripts.
 * #Scripts
 *
 * @rvalue
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {event} (integer)
 * @return (string)
 *
 */
SORC (string) family (integer) genus (integer) species (integer) event (integer);

/*
 * Returns 1 if the script is in the scriptorium, or if there is a general event script for the
 * entire genus, or family. Returns 0 if there is no matching script.
 * #Scripts
 *
 * @rvalue
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {event} (integer)
 * @return (integer)
 *
 */
SORQ (integer) family (integer) genus (integer) species (integer) event (integer);

/*
 * Specified vehicle picks up the specified passenger.
 * #Vehicles
 *
 * @param {vehicle} (agent)
 * @param {newPassenger} (agent)
 *
 */
SPAS (command) vehicle (agent) newPassenger (agent);

/*
 * Returns species of target. See also [FMLY], [GNUS].
 * #AgentAttributes
 *
 * @rvalue
 * @return (integer)
 */
SPCS (integer);

/*
 * This sets the input of the neuron in the lobe specified to be the value given.
 * #Creatures
 *
 * @param {lobeMoniker} (string)
 * @param {neuronId} (integer)
 * @param {value} (float)
 *
 */
SPNL (command) lobeMoniker (string) neuronId (integer) value (float);

/*
 * Calculates a square root.
 * #Math
 *
 * @rvalue
 * @param {value} (float)
 * @return (float)
 *
 */
SQRT (float) value (float);

/*
 * Randomly chooses an agent which matches the given classifier and can be seen by the owner of
 * the script. It then sets [TARG] to that agent. See [ESEE] for an explanation of seeing.
 * #AgentVars
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
STAR (command) family (integer) genus (integer) species (integer);

/*
 * Shout a stimulus to all creatures who can hear [OWNR]. The strength is a multiplier for the
 * stimulus. Set to 1 for a default stimulation, 2 for a stronger stimulation and so on. It is
 * important you use this, rather than send several stims, as it affects learning. Set strength to
 * 0 to prevent learning altogether, and send a strength 1 chemical change. See the table of
 * Stimulus Numbers.
 * #Creatures
 *
 * @param {stimulus} (integer)
 * @param {strength} (float)
 *
 */
STIM SHOU (command) stimulus (integer) strength (float);

/*
 * Send a stimulus to all creatures who can see [OWNR].
 * #Creatures
 *
 * @param {stimulus} (integer)
 * @param {strength} (float)
 *
 */
STIM SIGN (command) stimulus (integer) strength (float);

/*
 * Send a stimulus to all creatures who are touching [OWNR].
 * #Creatures
 *
 * @param {stimulus} (integer)
 * @param {strength} (float)
 *
 */
STIM TACT (command) stimulus (integer) strength (float);

/*
 * Send stimulus to a specific creature. Can be used from an install script, but the stimulus will
 * be from [NULL], so the creature will react but not learn.
 * #Creatures
 *
 * @param {creature} (agent)
 * @param {stimulus} (integer)
 * @param {strength} (float)
 *
 */
STIM WRIT (command) creature (agent) stimulus (integer) strength (float);

/*
 * Converts a string in decimal to a floating point number. Characters in the string after an
 * initial number are quietly ignored. If there is no obvious number then zero is returned.
 * #Variables
 *
 * @rvalue
 * @param {value} (string)
 * @return (float)
 *
 */
STOF (float) value (string);

/*
 * Converts a string in decimal to an integer. Characters in the string after an initial number
 * are quietly ignored. If there is no obvious number then zero is returned.
 * #Variables
 *
 * @rvalue
 * @param {value} (string)
 * @return (integer)
 *
 */
STOI (integer) value (string);

/*
 * Stops running the current script. Compare [STPT].
 * #Scripts
 *
 */
STOP (command);

/*
 * Stops a controlled sound.
 * #Sounds
 *
 */
STPC (command);

/*
 * Stops any currently running script in the target agent. See also [STOP].
 * #Scripts
 *
 */
STPT (command);

/*
 * This stores the current clothing set for the [TARG] creature. If the creature is not wearing
 * clothes this will be recorded.
 * #Creatures
 *
 */
STRE (command);

/*
 * This triggers the music track specified. The track will play for at least latency seconds
 * before being overridden by room or metaroom music.
 * #Sounds
 *
 * @param {latency} (integer)
 * @param {track} (string)
 *
 */
STRK (command) latency (integer) track (string);

/*
 * Returns the length of a string.
 * #Variables
 *
 * @rvalue
 * @param {string} (string)
 * @return (integer)
 *
 */
STRL (integer) string (string);

/*
 * Defines the start of a subroutine. Specify a label after the SUBR command - the label is case
 * sensitive, and should start with a letter. If this instruction is hit during normal program
 * flow, it works as a [STOP] instruction. See [GSUB] and [RETN].
 * #Flow
 *
 */
SUBR (command);

/*
 * Slices up a string, returning the substring starting at position start, with length count.
 * String indices begin at 1.
 * #Variables
 *
 * @rvalue
 * @param {value} (string)
 * @param {start} (integer)
 * @param {count} (integer)
 * @return (string)
 *
 */
SUBS (string) value (string) start (integer) count (integer);

/*
 * Subtracts an integer or float from a variable, so var = var - sub.
 * #Math
 *
 * @param {var} (variable)
 * @param {sub} (decimal)
 *
 */
SUBV (command) var (variable) sub (decimal);

/*
 * Swap the specified part of the body with the equivalent body part of the given variant.
 * #Creatures
 *
 * @param {variant} (integer)
 * @param {bodypartId} (integer)
 * @param {commitChanges} (integer)
 *
 */
SWAP (command) variant (integer) bodypartId (integer) commitChanges (integer);

/*
 * Stimulate all creatures that can hear [OWNR] to adjust four drives by the given amounts.
 * #Creatures
 *
 * @param {drive1} (integer)
 * @param {adjust1} (float)
 * @param {drive2} (integer)
 * @param {adjust2} (float)
 * @param {drive3} (integer)
 * @param {adjust3} (float)
 * @param {drive4} (integer)
 * @param {adjust4} (float)
 *
 */
SWAY SHOU (command) drive1 (integer) adjust1 (float) drive2 (integer) adjust2 (float) drive3 (integer) adjust3 (float) drive4 (integer) adjust4 (float);

/*
 * Stimulate all creatures that can see [OWNR] to adjust four drives by the given amounts.
 * #Creatures
 *
 * @param {drive1} (integer)
 * @param {adjust1} (float)
 * @param {drive2} (integer)
 * @param {adjust2} (float)
 * @param {drive3} (integer)
 * @param {adjust3} (float)
 * @param {drive4} (integer)
 * @param {adjust4} (float)
 *
 */
SWAY SIGN (command) drive1 (integer) adjust1 (float) drive2 (integer) adjust2 (float) drive3 (integer) adjust3 (float) drive4 (integer) adjust4 (float);

/*
 * Stimulate all creatures that are touching [OWNR] to adjust four drives by the given amounts.
 * #Creatures
 *
 * @param {drive1} (integer)
 * @param {adjust1} (float)
 * @param {drive2} (integer)
 * @param {adjust2} (float)
 * @param {drive3} (integer)
 * @param {adjust3} (float)
 * @param {drive4} (integer)
 * @param {adjust4} (float)
 *
 */
SWAY TACT (command) drive1 (integer) adjust1 (float) drive2 (integer) adjust2 (float) drive3 (integer) adjust3 (float) drive4 (integer) adjust4 (float);

/*
 * Stimulate a specific creature to adjust four drives by the given amounts.
 * #Creatures
 *
 * @param {creature} (agent)
 * @param {drive1} (integer)
 * @param {adjust1} (float)
 * @param {drive2} (integer)
 * @param {adjust2} (float)
 * @param {drive3} (integer)
 * @param {adjust3} (float)
 * @param {drive4} (integer)
 * @param {adjust4} (float)
 *
 */
SWAY WRIT (command) creature (agent) drive1 (integer) adjust1 (float) drive2 (integer) adjust2 (float) drive3 (integer) adjust3 (float) drive4 (integer) adjust4 (float);

/*
 * Returns the agent currently being [DBG: TACK]ed.
 * #Debug
 *
 * @rvalue
 * @return (agent)
 */
TACK (agent);

/*
 * Returns the age in ticks since the target creature was [BORN]. Ticking stops when the creature
 * dies - see [DEAD].
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
TAGE (integer);

/*
 * Returns tangent of theta. Theta should be in degrees. Watch out for those nasty discontinuities
 * at 90 and 270.
 * #Math
 *
 * @rvalue
 * @param {theta} (float)
 * @return (float)
 *
 */
TAN_ (float) theta (float);

/*
 * Returns current target, on whom many commands act.
 * #AgentVars
 *
 * @rvalue
 * @return (agent)
 */
TARG (agent);

/*
 * This sets the TARG variable to the agent specified.
 * #AgentVars
 *
 * @param {agent} (agent)
 *
 */
TARG (command) agent (agent);

/*
 * Start agent timer, calling Timer script every tick_rate ticks. Set to 0 to turn off the timer.
 * #Agents
 *
 * @param {tickRate} (integer)
 *
 */
TICK (command) tickRate (integer);

/*
 * Returns the current timer rate set by the command TICK.
 * #Agents
 *
 * @rvalue
 * @return (integer)
 */
TICK (integer);

/*
 * Returns the time of day. This can be
 * 0 - dawn
 * 1 - morning
 * 2 - afternoon
 * 3 - evening
 * 4 - night
 * The [GAME] variable engine_LengthOfDayInMinutes sets the day length. See also [HIST TIME].
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
TIME (integer);

/*
 * This tints the [TARG] agent with the r,g,b tint and applies the colour rotation and swap as per
 * pigment bleed genes. Specify the [PART] first for compound agents. The tinted agent or part now
 * uses a cloned gallery, which means it takes up more memory, and the save world files are
 * larger. However it also no longer needs the sprite file. Also, tinting resets camera shy and
 * other properties of the gallery.
 * #AgentSprites
 *
 * @param {redTint} (integer)
 * @param {greenTint} (integer)
 * @param {blueTint} (integer)
 * @param {rotation} (integer)
 * @param {swap} (integer)
 *
 */
TINT (command) redTint (integer) greenTint (integer) blueTint (integer) rotation (integer) swap (integer);

/*
 * Similar to [TMVT] only tests a [MVBY].
 * #Motion
 *
 * @rvalue
 * @param {deltaX} (float)
 * @param {deltaY} (float)
 * @return (integer)
 *
 */
TMVB (integer) deltaX (float) deltaY (float);

/*
 * Test if a creature could move it's down foot to position x,y.
 * #Motion
 *
 * @rvalue
 * @param {x} (float)
 * @param {y} (float)
 * @return (integer)
 *
 */
TMVF (integer) x (float) y (float);

/*
 * Test if target can move to the given location and still lie validly within the room system.
 * Returns 1 if it can, 0 if it can't.
 * #Motion
 *
 * @rvalue
 * @param {x} (float)
 * @param {y} (float)
 * @return (integer)
 *
 */
TMVT (integer) x (float) y (float);

/*
 * Tint the specified part of the body with the given world tint. Use [WTNT] to create the world
 * tint.
 * #Creatures
 *
 * @param {worldTintIndex} (integer)
 * @param {bodypartId} (integer)
 * @param {commitChanges} (integer)
 *
 */
TNTC (command) worldTintIndex (integer) bodypartId (integer) commitChanges (integer);

/*
 * This tints the given set of clothing (overlay) for the [TARG] norn. The file index cannot be zero
 * since that set of clothing is not tintable.
 * #Camera
 *
 * @param {worldTint} (integer)
 * @param {bodyPartIndex} (integer)
 * @param {setNumber} (integer)
 * @param {fileindex} (integer)
 *
 */
TNTO (command) worldTint (integer) bodyPartIndex (integer) setNumber (integer) fileindex (integer);

/*
 * This tints the [TARG] agent with the global tint manager at index. Specify the [PART] first for
 * compound agents. See also [TINT].
 * #World
 *
 * @param {index} (integer)
 *
 */
TNTW (command) index (integer);

/*
 * Returns relative X position of the centre of the given room from target's top left corner.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @return (float)
 *
 */
TORX (float) roomId (integer);

/*
 * Returns relative Y position of the centre of the given room from target's top left corner.
 * #Map
 *
 * @rvalue
 * @param {roomId} (integer)
 * @return (float)
 *
 */
TORY (float) roomId (integer);

/*
 * Counts the number of agents in the world matching the classifier.
 * #Agents
 *
 * @rvalue
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @return (integer)
 *
 */
TOTL (integer) family (integer) genus (integer) species (integer);

/*
 * Returns 1 if the two specified agents are touching, or 0 if they are not. Agents are said to be
 * touching if their bounding rectangles overlap.
 * #Agents
 *
 * @rvalue
 * @param {first} (agent)
 * @param {second} (agent)
 * @return (integer)
 *
 */
TOUC (integer) first (agent) second (agent);

/*
 * Make creature reach out to touch the IT agent. Blocks the script until the creature either
 * reaches the agent, or it's fully stretched and still can't.
 * #Creatures
 *
 */
TOUC (command);

/*
 * Returns true if the given x y position coincides with a non transparent pixel on the [TARG]
 * agent. This does not work for creatures.
 * #AgentSprites
 *
 * @rvalue
 * @param {xpos} (integer)
 * @param {ypos} (integer)
 * @return (integer)
 *
 */
TRAN (integer) xpos (integer) ypos (integer);

/*
 * The currently selected character code translator will translates the given key code to a
 * character.
 * #CompoundAgents
 *
 * @rvalue
 * @param {keyCode} (integer)
 * @return (string)
 *
 */
TRAN (string) keyCode (integer);

/*
 * Sets pixel transparency awareness. 1 for pixel perfect, so transparent parts of the agent can't
 * be clicked. 0 to allow anywhere on the agent rectangle to be clicked. See also the option
 * parameter on [PAT: BUTT] which overrides this.
 * #Input
 *
 * @param {transparency} (integer)
 * @param {partNo} (integer)
 *
 */
TRAN (command) transparency (integer) partNo (integer);

/*
 * Camera follows the given agent. Set to [NULL] to stop tracking. x% and y% are percentages (0-100)
 * of the screen size. They describe a rectangle centred on the screen which the target stays
 * within.
 * Style 0 is brittle - if you move the camera so the target is out of the rectangle, then the
 * tracking is broken.
 * Style 1 is flexible - you can move the camera away from the target. If you move it back, then
 * tracking resumes.
 * Style 2 is hard - you can't move the camera so the target is out of the rectangle.
 * The transition is the sort of fade to use if the tracking causes a change in meta room. The
 * values are the same as for the transition in the [META] command.
 * #Camera
 *
 * @param {agent} (agent)
 * @param {x%} (integer)
 * @param {y%} (integer)
 * @param {style} (integer)
 * @param {transition} (integer)
 *
 */
TRCK (command) agent (agent) x% (integer) y% (integer) style (integer) transition (integer);

/*
 * Returns the agent being tracked by the camera, if any.
 * #Camera
 *
 * @rvalue
 * @return (agent)
 */
TRCK (agent);

/*
 * Randomly chooses an agent which matches the given classifier and is touching the owner of the
 * script. It then sets [TARG] to that agent. See [ETCH].
 * #AgentVars
 *
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 *
 */
TTAR (command) family (integer) genus (integer) species (integer);

/*
 * Clones an agent, and returns the replica. If agent_null is set to 1 the agents that this agent
 * points to (in OVxx, or VAxx in its running script) are set to [NULL] in the clone. If agent_null
 * is 0, then the clone points to the same agents as the original. When using agent_null 1, you
 * might want to call [STPT] first so variables being used mid-script aren't cleared under the
 * agent's nose.
 * #Agents
 *
 * @rvalue
 * @param {original} (agent)
 * @param {agentNull} (integer)
 * @return (agent)
 *
 */
TWIN (agent) original (agent) agentNull (integer);

/*
 * Determines the type of a variable. The type is one of the following:
 * 0 - integer
 * 1 - floating-point
 * 2 - string
 * 3 - simple agent
 * 4 - pointer agent
 * 5 - compound agent
 * 6 - vehicle
 * 7 - creature
 * ERROR codes for agents:
 * -1 - [NULL] agent handle
 * -2 - Unknown agent - you should never get this
 * #Variables
 *
 * @rvalue
 * @param {something} (any)
 * @return (integer)
 *
 */
TYPE (integer) something (any);

/*
 * Returns X coordinate of creature's up foot.
 * #Creatures
 *
 * @rvalue
 * @return (float)
 */
UFTX (float);

/*
 * Returns Y coordinate of creature's up foot.
 * #Creatures
 *
 * @rvalue
 * @return (float)
 */
UFTY (float);

/*
 * Make the creature conscious or unconscious. 0 for conscious, 1 for unconscious.
 * #Creatures
 *
 * @param {unconscious} (integer)
 *
 */
UNCS (command) unconscious (integer);

/*
 * Returns 1 if the creature is unconscious, 0 otherwise.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
UNCS (integer);

/*
 * Returns unique identifier for target agent. [AGNT] goes the opposite way. NOTE: This should only
 * be used for external programs to persistently refer to an agent. Variables can use [SETA] to
 * store agent r-values directly for internal use.
 * #Debug
 *
 * @rvalue
 * @return (integer)
 */
UNID (integer);

/*
 * End the [LOCK] section.
 * #Scripts
 *
 */
UNLK (command);

/*
 * Forms the end of a [LOOP]..UNTL loop. The loop will execute until the condition is met. See
 * [DOIF] for information on the form of the condition.
 * #Flow
 *
 * @param {condition} (condition)
 *
 */
UNTL (command) condition (condition);

/*
 * Urge all creatures who can hear [OWNR] to perform the verb_id action on [OWNR]. Stimuli can range
 * from -1 to 1, ranging from discourage to encourage.
 * #Creatures
 *
 * @param {nounStim} (float)
 * @param {verbId} (integer)
 * @param {verbStim} (float)
 *
 */
URGE SHOU (command) nounStim (float) verbId (integer) verbStim (float);

/*
 * Urge all creatures who can see [OWNR] to perform an action on [OWNR].
 * #Creatures
 *
 * @param {nounStim} (float)
 * @param {verbId} (integer)
 * @param {verbStim} (float)
 *
 */
URGE SIGN (command) nounStim (float) verbId (integer) verbStim (float);

/*
 * Urge all creatures who are touching [OWNR] to perform an action on [OWNR].
 * #Creatures
 *
 * @param {nounStim} (float)
 * @param {verbId} (integer)
 * @param {verbStim} (float)
 *
 */
URGE TACT (command) nounStim (float) verbId (integer) verbStim (float);

/*
 * Urge a specific creature to perform a specific action on a specific noun. A stimulus greater
 * than 1 will force the Creature to perform an action, or to set its attention (mind control!).
 * Use an id -1 and stim greater than 1 to unforce it.
 * #Creatures
 *
 * @param {creature} (agent)
 * @param {nounId} (integer)
 * @param {nounStim} (float)
 * @param {verbId} (integer)
 * @param {verbStim} (float)
 *
 */
URGE WRIT (command) creature (agent) nounId (integer) nounStim (float) verbId (integer) verbStim (float);

/*
 *
 * #Variables
 *
 * @lvalue
 * @rvalue
 * @return (variable)
 */
VAXX (variable);

/*
 * Set velocity, measured in pixels per tick.
 * #Motion
 *
 * @param {xVelocity} (float)
 * @param {yVelocity} (float)
 *
 */
VELO (command) xVelocity (float) yVelocity (float);

/*
 * Horizontal velocity in pixels per tick - floating point.
 * #Motion
 *
 * @lvalue
 * @rvalue
 * @return (variable)
 */
VELX (variable);

/*
 * Vertical velocity in pixels per tick - floating point.
 * #Motion
 *
 * @lvalue
 * @rvalue
 * @return (variable)
 */
VELY (variable);

/*
 * Checks if the agent, or any of its parts, is on screen and returns 1 if it is or 0 if it is
 * not. Set to 0 to check if the agent is on the main camera. Set to 1 to check if the agent is on
 * the main camera or any remote cameras
 * #Agents
 *
 * @rvalue
 * @param {checkallcameras} (integer)
 * @return (integer)
 *
 */
VISI (integer) checkallcameras (integer);

/*
 * Returns the major version number of the engine.
 * #Variables
 *
 * @rvalue
 * @return (integer)
 */
VMJR (integer);

/*
 * Returns the minor version number of the engine.
 * #Variables
 *
 * @rvalue
 * @return (integer)
 */
VMNR (integer);

/*
 * Learn all vocabulary instantly.
 * #Creatures
 *
 */
VOCB (command);

/*
 * This sets the [TARG] agent's voice to the specified creature voice, using standard cascade
 * techniques to select the nearest match. On failure, "DefaultVoice" will be reloaded. Use [SEZZ]
 * to actually say something.
 * #Sounds
 *
 * @param {genus} (integer)
 * @param {gender} (integer)
 * @param {age} (integer)
 *
 */
VOIC (command) genus (integer) gender (integer) age (integer);

/*
 * Sets the [TARG] agent's voice to the specified value. The voice name must be valid in the
 * catalogue. If it fails, then "DefaultVoice" will be reloaded. Use [SEZZ] to actually say
 * something.
 * #Sounds
 *
 * @param {voiceName} (string)
 *
 */
VOIS (command) voiceName (string);

/*
 * This returns the voice name for the [TARG] agent. (Unless it has been serialised in :( In which
 * case it returns "Lozenged" if the agent had a voice before the save, or "" as normal if the
 * agent can't speak.)
 * #Sounds
 *
 * @rvalue
 * @return (string)
 */
VOIS (string);

/*
 * Set overall the volume of the [MIDI] and the sound effects. Send 0 as the second parameter to
 * affect just the [MIDI], 1 to affect just the sound effects and anything else to affect both
 * modules.
 * #Sounds
 *
 * @param {volume} (integer)
 * @param {whichModule} (integer)
 *
 */
VOLM (command) volume (integer) whichModule (integer);

/*
 * Converts an integer or float into a string in decimal.
 * #Variables
 *
 * @rvalue
 * @param {value} (decimal)
 * @return (string)
 *
 */
VTOS (string) value (decimal);

/*
 * Block the script for the specified number of ticks. This command does an implicit [SLOW].
 * #Scripts
 *
 * @param {ticks} (integer)
 *
 */
WAIT (command) ticks (integer);

/*
 * Sets creature walking indefinitely. Chooses a walking gait according to chemo-receptors. Always
 * means ignore IT and walk in the current direction set by [DIRN].
 * #Creatures
 *
 */
WALK (command);

/*
 * Returns the direction of the last wall the agent collided with. Directions are [LEFT], [RGHT],
 * [_UP_], or [DOWN].
 * #Motion
 *
 * @rvalue
 * @return (integer)
 */
WALL (integer);

/*
 * Toggle full screen mode.
 * #Camera
 *
 */
WDOW (command);

/*
 * Returns 1 if in full screen mode, or 0 if in windowed mode.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WDOW (integer);

/*
 * Returns the width of target.
 * #AgentBounds
 *
 * @rvalue
 * @return (integer)
 */
WDTH (integer);

/*
 * Sets a layer of clothing on part of the creature. The set_number is the type of clothing to put
 * on from the overlay file - think of it as an outfit number. layer 0 is the actual body of the
 * creature, so unless you want to replace the body part itself use a higher layer. Higher layers
 * are on top of lower ones. e.g. 0 for a face, 1 for measels spots, 2 for a fencing mask. See
 * also [BODY] and [NUDE].
 * #Creatures
 *
 * @param {bodyId} (integer)
 * @param {setNumber} (integer)
 * @param {layer} (integer)
 *
 */
WEAR (command) bodyId (integer) setNumber (integer) layer (integer);

/*
 * Return the set number of the outfit the norn is wearing on the specified layer or -1 if it is
 * not wearing anything
 * #Creatures
 *
 * @rvalue
 * @param {bodypart} (integer)
 * @param {layer} (integer)
 * @return (integer)
 *
 */
WEAR (integer) bodypart (integer) layer (integer);

/*
 * Searches for a catalogue tag based on the given classifier, and returns the string at the given
 * offset. See also [READ]. As an example, with a tag_stub of "Agent Help" and a classifier 3 7 11
 * it would first look for the tag "Agent Help 3 7 11". If that wasn't present, it would go
 * through the wildcards, eventually trying "Agent Help 0 0 0", and throwing an error if even that
 * isn't there.
 * #Catalogue
 *
 * @rvalue
 * @param {family} (integer)
 * @param {genus} (integer)
 * @param {species} (integer)
 * @param {tagStub} (string)
 * @param {offset} (integer)
 * @return (string)
 *
 */
WILD (string) family (integer) genus (integer) species (integer) tagStub (string) offset (integer);

/*
 * Returns the name of the currently loaded world.
 * #World
 *
 * @rvalue
 * @return (string)
 */
WNAM (string);

/*
 * Returns world coordinates of bottom of current camera window.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WNDB (integer);

/*
 * Returns height of current camera window.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WNDH (integer);

/*
 * Returns world coordinates of left of current camera window.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WNDL (integer);

/*
 * Returns world coordinates of right of current camera window.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WNDR (integer);

/*
 * Returns world coordinates of top of current camera window.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WNDT (integer);

/*
 * Returns width of current camera window.
 * #Camera
 *
 * @rvalue
 * @return (integer)
 */
WNDW (integer);

/*
 * This returns the index of the world. If you pass in a world name which is not within the
 * system, -1 is returned.
 * #World
 *
 * @rvalue
 * @param {world} (string)
 * @return (integer)
 *
 */
WNTI (integer) world (string);

/*
 * Provides various functions to distort space-time and otherwise help with wolfing runs. Set an
 * AND and an EOR mask, to control the following bits:
 * 1 - Display rendering. Turning it off speeds the game up.
 * 2 - Fastest ticks. The game usually runs at a maximum of 20 frames per second. If this is set,
 * it instead runs as fast as it can.
 * 4 - Refresh display at end of tick. If set, then the display is updated at the end of the tick,
 * and the flag is cleared.
 * 8 - Autokill. If set, agents which generate run errors are automatically killed, as the command
 * line option.
 * #Time
 *
 * @rvalue
 * @param {kangaMask} (integer)
 * @param {eeyoreMask} (integer)
 * @return (integer)
 *
 */
WOLF (integer) kangaMask (integer) eeyoreMask (integer);

/*
 * Stops world ticks from running. Days, seasons and years won't change and any delayed messages
 * are paused, as are CAs and some sound effects. Set to 1 to pause, 0 to run. Use along with
 * [PAUS].
 * #Time
 *
 * @param {paused} (integer)
 *
 */
WPAU (command) paused (integer);

/*
 * Returns 1 if world ticks are paused, or 0 otherwise.
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
WPAU (integer);

/*
 * Creates a new world directory for the specified world.
 * #World
 *
 * @param {worldName} (string)
 *
 */
WRLD (command) worldName (string);

/*
 * Returns the name of the world specified by world_index which must be in the range 0 to
 * ([NWLD]-1).
 * #World
 *
 * @rvalue
 * @param {worldIndex} (integer)
 * @return (string)
 *
 */
WRLD (string) worldIndex (integer);

/*
 * Returns the number of ticks since the world was first made. For debugging purposes only you can
 * change this value with [DBG: WTIK].
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
WTIK (integer);

/*
 * This sets up the world (global) tint table. The index is the number associated with the tint
 * table - (keep it small please) and the r,g,b is the tint level. Rotation and Swap work as for
 * pigment bleed genes.
 * #World
 *
 * @param {index} (integer)
 * @param {redTint} (integer)
 * @param {greenTint} (integer)
 * @param {blueTint} (integer)
 * @param {rotation} (integer)
 * @param {swap} (integer)
 *
 */
WTNT (command) index (integer) redTint (integer) greenTint (integer) blueTint (integer) rotation (integer) swap (integer);

/*
 * Returns the unique identifier of the currently loaded world.
 *
 * #World
 *
 * @rvalue
 * @return (string)
 */
WUID (string);

/*
 * Returns the number of game years elapsed. The [GAME] variable engine_NumberOfSeasons sets the
 * year length. See also [HIST YEAR].
 * #Time
 *
 * @rvalue
 * @return (integer)
 */
YEAR (integer);

/*
 * Make or undo the creature's zombification factor. 1 makes creatures zombies: in a zombie state
 * creatures won't process any decision scripts but they will respond to [ANIM]s and [POSE]s. 0
 * umzombifies.
 * #Creatures
 *
 * @param {zombie} (integer)
 *
 */
ZOMB (command) zombie (integer);

/*
 * Returns 1 if the creature is zombified (has its brain to motor link severed), 0 otherwise.
 * #Creatures
 *
 * @rvalue
 * @return (integer)
 */
ZOMB (integer);

/*
 * Zoom in on the specified position by a negative amount of pixels or out by positive amount of
 * pixels. If you send -1 as the x and y coordinates then the camera zooms in on the exising view
 * port centre. This only applies to remote cameras.
 * #Camera
 *
 * @param {pixels} (integer)
 * @param {x} (integer)
 * @param {y} (integer)
 *
 */
ZOOM (command) pixels (integer) x (integer) y (integer);

@Ages {
	0 = Embryo
	1 = Baby
	2 = Child
	3 = Adolescent
	4 = Youth
	6 = Old
	7 = Senile
	5 = Adult
}

@Attributes {
	1 = Carryable - Can be picked up by things other than creatures, vehicles and the pointer.
	2 = Mouseable - Can be picked up by the mouse.
	4 = Activateable - Can be activated using the mouse - otherwise [CLAC] and [CLIK] style events don't get sent when you click on the agent.
	8 = Greedy Cabin - When set on a vehicle, it will automatically pick up things dropped in its cabin.
	16 = Invisible - Creatures don't see you - applies to [ESEE] and [STAR] on creatures, as well as internal creature code.
	32 = Floatable - Agent floats relative to the screen. Move it with [FLTO]. If you call [FREL], the agent will float relative to another agent instead of the screen.
	64 = Suffer Collisions - Will collide with room boundaries, according to its [PERM].
	128 = Suffer Physics - Agent falls with proper physics, including gravity, air resistance and friction. Otherwise, it simply moves with velocity.
	256 = Camera Shy - Agent can't be seen on a remote camera ([PAT: CMRA]) or photograph ([SNAP]). For vehicles, the contents is shy as well.
	512 = Open Air Cabin - When set on a vehicle, it allows creatures to see and activate its passengers. The default behaviour is that they can't.
	1024 = Swallow Mouse Clicks - When set on an agent, it will receive mouse clicks as if activatable but will not fire off a message.
	2048 = No Activate1 Pointer Animation - When set on an agent, the mouse pointer will not fire its default activate1 animation allowing you to create your own.
	4096 = No Walking Inside Cabin - When set on a vehicle, the passenger norn will not walk inside the cabin.
}

@Behavior {
	1 = Activate 1 - Creature can activate 1 this agent.
	2 = Activate 2 - Creature can activate 2 this agent.
	4 = Deactivate - Creature can deactivate this agent.
	8 = Hit - Creature can hit this agent.
	16 = Eat - Creature can eat this agent.
	32 = Pick Up - Creature can pick up this agent.
}

@CanMove {
	0 = Cannot Move
	1 = Can Move
}

@CanSee {
	0 = Cannot See
	1 = Can See
}

@Dreaming {
	1 = Dreaming
	0 = Awake
}

@Enabled {
	0 = Disabled
	1 = Enabled
}

@EventNumbers {
	0 = Deactivate - Called when the agent receives a deactivate message.
	1 = Activate 1 - Called when the agent receives an activate 1 message.
	2 = Activate 2 - Called when the agent receives an activate 2 message.
	3 = Hit - Called when the agent receives a hit message.
	4 = Pickup - Called when the agent has been picked up by something other than a vehicle.
	5 = Drop - Called when the agent has been dropped by something other than a vehicle.
	6 = Collision - Called when the agent collides with an obstacle. [_P1_] and [_P2_] are the x and y components of the collision velocity.
	7 = Bump - Called when a creature walks into a wall.
	9 = Timer - Called at a regular time interval, as set by [TICK].
	12 = Eat - Called when the creature eats something.
	13 = Start Hold Hands - Called when a creature starts holding hands with the pointer.
	14 = Stop Hold Hands - Called when a creature stops holding hands with the pointer.
	16 = Quiescent on Agents - Scripts 16 - 30 are executed on a creature when it decides to do something with its attention on an ordinary agent (rather than a creature). The script should perform this action. Quiescent means stand and watch it. The catalogue entry "Action Script To Neuron Mappings" maps the brain to these scripts, although which scripts require an it object are hard-wired.
	17 = Activate 1 on Agents - Activate 1 it.
	18 = Activate 2 on Agents - Activate 2 it.
	19 = Deactivate on Agents - Deactivate it.
	20 = Approach on Agents - Go up and look at it.
	21 = Retreat on Agents - Walk or run away from it.
	22 = Pickup on Agents - Pick it up.
	23 = Drop on Agents - Drop anything you're carrying.
	24 = Need on Agents - Say what's bothering you.
	25 = Rest on Agents - Becoming sleepy.
	26 = West on Agents - Walk idly to west.
	27 = East on Agents - Walk idly to east.
	28 = Eat on Agents - Eat it.
	29 = Hit on Agents - Hit it.
	30 = Undefined on Agents - For future expansion.
	31 = Undefined on Agents - For future expansion.
	32 = Quiescent on Creatures - Scripts 32 - 47 are executed on a creature when it decides to do something with its attention on another creature. Quiescent means stand and twiddle your thumbs.
	33 = Activate 1 on Creatures - Mating script.
	34 = Activate 2 on Creatures - Mating script.
	35 = Deactivate on Creatures - Deactivate it.
	36 = Approach on Creatures - Go up and look at it.
	37 = Retreat on Creatures - Walk or run away from it.
	38 = Pickup on Creatures - Pick it up.
	39 = Drop on Creatures - Drop anything you're carrying.
	40 = Need on Creatures - Say what's bothering you.
	41 = Rest on Creatures - Rest or sleep.
	42 = West on Creatures - Walk idly to west.
	43 = East on Creatures - Walk idly to east.
	44 = Eat on Creatures - Eat it.
	45 = Hit on Creatures - Hit it.
	46 = Undefined on Creatures - For future expansion.
	47 = Undefined on Creatures - For future expansion.
	64 = Flinch - Involuntary action called when the creature flinches.
	65 = Lay Egg - Involuntary action called when the creature lays an egg.
	66 = Sneeze - Involuntary action called when the creature sneezes.
	67 = Cough - Involuntary action called when the creature coughs.
	68 = Shiver - Involuntary action called when the creature shivers.
	69 = Sleep - Involuntary action called when the creature sleeps.
	70 = Fainting - Involuntary action called when the creature faints.
	71 = Unassigned - Involuntary action for future expansion.
	72 = Die - Special involuntary action called when a creature dies. Any death animations go here.
	73 = Raw Key Down - Called when a key is pressed and [IMSK] is set. The key code is sent in [_P1_].
	74 = Raw Key Up - Called when a key is released and [IMSK] is set. The key code is sent in [_P1_].
	75 = Raw Mouse Move - Called when the mouse moves and [IMSK] is set. The new x and y position is sent in [_P1_] and _P2_
	76 = Raw Mouse Down - Called when a mouse button is pressed and [IMSK] is set. The button is sent in [_P1_] - 1 left, 2 right, 4 middle.
	77 = Raw Mouse Up - Called when a mouse button is released and [IMSK] is set. The button is sent in [_P1_] - 1 left, 2 right, 4 middle.
	78 = Raw Mouse Wheel - Called when the mouse wheel is moved and [IMSK] is set. The delta value is sent in [_P1_] - 120 units per 'click'.
	79 = Raw Translated Char - Called when a translated character is received and [IMSK] is set. For example, on Japanese systems the raw key down and up codes can be in Roman characters, but the Input Method Editor converts them to Japanese characters, which are sent to the game with this message. The translated key code is sent in [_P1_]. You can use this for character input, but it is easier to use [PAT: TEXT].
	92 = UI Mouse Down - Called when the mouse clicks on an agent.
	101 = Pointer Activate 1 - Called on the pointer when an agent is activated 1. The script has the same classifier as the agent being activated.
	102 = Pointer Activate 2 - Called on the pointer when an agent is activated 2. The script has the same classifier as the agent being activated.
	103 = Pointer Deactivate - Called on the pointer when an agent is deactivated. The script has the same classifier as the agent being deactivated.
	104 = Pointer Pickup - Called on the pointer when an agent is activated 1. The script has the same classifier as the agent being activated.
	105 = Pointer Drop - Called on the pointer when an agent is dropped. The script has the same classifier as the agent being dropped.
	110 = Pointer Port Select - Called on the pointer when you manipulate a port.
	111 = Pointer Port Connect - Called on the pointer when you complete the connection between two ports.
	112 = Pointer Port Disconnect - Called on the pointer when you complete the disconnection of two previously connected ports.
	113 = Pointer Port Cancel - Called on the pointer if you cancel a port change part way through.
	114 = Pointer Port Error - Called on the pointer if there is some error with the configuration of ports the user is trying to make.
	116 = Pointer Clicked Background - Called when the pointer is clicked but there aren't any agents under it.
	117 = Pointer Action Dispatch - Called on the pointer to tell it what action clicking would take on the creature under it. [_P1_] says what will happen: 0 means no action or not above a creature, 1 means deactivate (slap), 2 means activate 1 (tickle).
	118 = Connection Break - Called on an agent when any of its ports are broken as a result of exceeding the maximum connection distance.
	120 = Selected Creature Changed - Called on all agents with this script when the selected creature is changed by [NORN]. [_P1_] is the new creature, [_P2_] is the previously selected creature.
	121 = Vehicle Pickup - Called when an agent has been picked up by a vehicle.
	122 = Vehicle Drop - Called when an agent has been dropped by a vehicle.
	123 = Window Resized - Called on all agents with this script whenever the main view is resized.
	124 = Got Carried Agent - Tells an agent that they have just picked something up.
	125 = Lost Carried Agent - Tells an agent that they have just dropped something.
	126 = Make Speech Bubble - Called when a creature speaks, so scripts can display a speech bubble. Every agent which has this script is called. [_P1_] is the text being spoken, [_P2_] is the creature who is speaking.
	127 = Life Event - Called whenever there is a new life event, whether an event build into the engine, or a custom event sent with [HIST EVNT]. [_P1_] is the moniker that the event happened to, [_P2_] is the event number as an index into the events for that moniker.
	128 = World Loaded - Called when the world had just been loaded, whether from bootstrap or from a saved file.
	200 = Mate - Reserved for use in the mating scripts, but not directly used by the engine. Tells a male to mate.
	255 = Agent Exception - This script specifies the behaviour when an agent tries to do something to an invalid agent. For example, if you try and access an OVxx with a [NULL] target. If this script isn't present for [OWNR], you get a run time error. If it is present, that script is called and you can reset variables as necessary.
}

@FullScreen {
	0 = Windowed Mode
	1 = Fullscreen Mode
}

@ImageExists {
	0 = Does Not Exist
	1 = Image Exists
}

@MessageNumbers {
	0 = Activate 1 - Calls the Activate 1 script. If the message is from a creature, and the permissions set with [BHVR] disallow it, then the script is not executed.
	1 = Activate 2 - Calls the Activate 2 script. The permissions set with [BHVR] are checked first.
	2 = Deactivate - Calls the Deactivate script. The permissions set with [BHVR] are checked first.
	3 = Hit - Calls the Hit script. If the message is from a creature, and the permissions set with [BHVR] disallow it, then the message is not sent.
	4 = Pickup - The agent is picked up by the agent that the message was [FROM]. The permissions set with [BHVR] are checked first.
	5 = Drop - If the agent is being carried, then it is dropped.
	12 = Eat - Calls the Eat script. The permissions set with [BHVR] are checked first.
	13 = Hold Hands - Causes a creature to hold hands with the pointer.
	14 = Stop Holding Hands - Causes a creature to stop holding hands with the pointer. Since messages take a tick to be procesed, calling [NOHH] is quicker than using this message.
}

@Mirrored {
	0 = Not-Mirrored
	1 = Mirrored
}

@MonikerStatus {
	0 = Never Existed
	1 = Referenced By Slot
	2 = Creature From [NEW: CREA]
	3 = Creature Properly Born
	4 = Out of World
	5 = Dead, Body Still Exists
	6 = Dead, Body [KILL]ed
	7 = Unreferenced Genome
}

@MovementStatus {
	0 = Autonomous - Default – normal object in world
	1 = Mouse-Driven - Simple Object connected to mouse
	2 = Floating - Object is in fixed place on screen
	3 = In Vehicle - Object is carried in a vehicle
	4 = Carried - Object is carried by a creature
}

@Paused {
	0 = Not-Paused
	1 = Paused
}

@PawsDisabled {
	1 = Debug Pawsed
	0 = Playing
}

@Pressed {
	0 = Not-Pressed
	1 = Pressed
}

@RectToUse {
	0 = Agent Bounds - Nearby means touching bounding rectangle of agent

	1 = Cabin Bounds - Nearby means touching cabin rectangle
}

@ScriptNumbers {
	0 = Deactivate - Called when the agent receives a deactivate message.
	1 = Activate 1 - Called when the agent receives an activate 1 message.
	2 = Activate 2 - Called when the agent receives an activate 2 message.
	3 = Hit - Called when the agent receives a hit message.
	4 = Pickup - Called when the agent has been picked up by something other than a vehicle.
	5 = Drop - Called when the agent has been dropped by something other than a vehicle.
	6 = Collision - Called when the agent collides with an obstacle. [_P1_] and [_P2_] are the x and y components of the collision velocity.
	7 = Bump - Called when a creature walks into a wall.
	9 = Timer - Called at a regular time interval, as set by [TICK].
	12 = Eat - Called when the creature eats something.
	13 = Start Hold Hands - Called when a creature starts holding hands with the pointer.
	14 = Stop Hold Hands - Called when a creature stops holding hands with the pointer.
	16 = Quiescent on Agents - Scripts 16 - 30 are executed on a creature when it decides to do something with its attention on an ordinary agent (rather than a creature). The script should perform this action. Quiescent means stand and watch it. The catalogue entry "Action Script To Neuron Mappings" maps the brain to these scripts, although which scripts require an it object are hard-wired.
	17 = Activate 1 on Agents - Activate 1 it.
	18 = Activate 2 on Agents - Activate 2 it.
	19 = Deactivate on Agents - Deactivate it.
	20 = Approach on Agents - Go up and look at it.
	21 = Retreat on Agents - Walk or run away from it.
	22 = Pickup on Agents - Pick it up.
	23 = Drop on Agents - Drop anything you're carrying.
	24 = Need on Agents - Say what's bothering you.
	25 = Rest on Agents - Becoming sleepy.
	26 = West on Agents - Walk idly to west.
	27 = East on Agents - Walk idly to east.
	28 = Eat on Agents - Eat it.
	29 = Hit on Agents - Hit it.
	30 = Undefined on Agents - For future expansion.
	31 = Undefined on Agents - For future expansion.
	32 = Quiescent on Creatures - Scripts 32 - 47 are executed on a creature when it decides to do something with its attention on another creature. Quiescent means stand and twiddle your thumbs.
	33 = Activate 1 on Creatures - Mating script.
	34 = Activate 2 on Creatures - Mating script.
	35 = Deactivate on Creatures - Deactivate it.
	36 = Approach on Creatures - Go up and look at it.
	37 = Retreat on Creatures - Walk or run away from it.
	38 = Pickup on Creatures - Pick it up.
	39 = Drop on Creatures - Drop anything you're carrying.
	40 = Need on Creatures - Say what's bothering you.
	41 = Rest on Creatures - Rest or sleep.
	42 = West on Creatures - Walk idly to west.
	43 = East on Creatures - Walk idly to east.
	44 = Eat on Creatures - Eat it.
	45 = Hit on Creatures - Hit it.
	46 = Undefined on Creatures - For future expansion.
	47 = Undefined on Creatures - For future expansion.
	64 = Flinch - Involuntary action called when the creature flinches.
	65 = Lay Egg - Involuntary action called when the creature lays an egg.
	66 = Sneeze - Involuntary action called when the creature sneezes.
	67 = Cough - Involuntary action called when the creature coughs.
	68 = Shiver - Involuntary action called when the creature shivers.
	69 = Sleep - Involuntary action called when the creature sleeps.
	70 = Fainting - Involuntary action called when the creature faints.
	71 = Unassigned - Involuntary action for future expansion.
	72 = Die - Special involuntary action called when a creature dies. Any death animations go here.
	73 = Raw Key Down - Called when a key is pressed and [IMSK] is set. The key code is sent in [_P1_].
	74 = Raw Key Up - Called when a key is released and [IMSK] is set. The key code is sent in [_P1_].
	75 = Raw Mouse Move - Called when the mouse moves and [IMSK] is set. The new x and y position is sent in [_P1_] and _P2_
	76 = Raw Mouse Down - Called when a mouse button is pressed and [IMSK] is set. The button is sent in [_P1_] - 1 left, 2 right, 4 middle.
	77 = Raw Mouse Up - Called when a mouse button is released and [IMSK] is set. The button is sent in [_P1_] - 1 left, 2 right, 4 middle.
	78 = Raw Mouse Wheel - Called when the mouse wheel is moved and [IMSK] is set. The delta value is sent in [_P1_] - 120 units per 'click'.
	79 = Raw Translated Char - Called when a translated character is received and [IMSK] is set. For example, on Japanese systems the raw key down and up codes can be in Roman characters, but the Input Method Editor converts them to Japanese characters, which are sent to the game with this message. The translated key code is sent in [_P1_]. You can use this for character input, but it is easier to use [PAT: TEXT].
	92 = UI Mouse Down - Called when the mouse clicks on an agent.
	101 = Pointer Activate 1 - Called on the pointer when an agent is activated 1. The script has the same classifier as the agent being activated.
	102 = Pointer Activate 2 - Called on the pointer when an agent is activated 2. The script has the same classifier as the agent being activated.
	103 = Pointer Deactivate - Called on the pointer when an agent is deactivated. The script has the same classifier as the agent being deactivated.
	104 = Pointer Pickup - Called on the pointer when an agent is activated 1. The script has the same classifier as the agent being activated.
	105 = Pointer Drop - Called on the pointer when an agent is dropped. The script has the same classifier as the agent being dropped.
	110 = Pointer Port Select - Called on the pointer when you manipulate a port.
	111 = Pointer Port Connect - Called on the pointer when you complete the connection between two ports.
	112 = Pointer Port Disconnect - Called on the pointer when you complete the disconnection of two previously connected ports.
	113 = Pointer Port Cancel - Called on the pointer if you cancel a port change part way through.
	114 = Pointer Port Error - Called on the pointer if there is some error with the configuration of ports the user is trying to make.
	116 = Pointer Clicked Background - Called when the pointer is clicked but there aren't any agents under it.
	117 = Pointer Action Dispatch - Called on the pointer to tell it what action clicking would take on the creature under it. [_P1_] says what will happen: 0 means no action or not above a creature, 1 means deactivate (slap), 2 means activate 1 (tickle).
	118 = Connection Break - Called on an agent when any of its ports are broken as a result of exceeding the maximum connection distance.
	120 = Selected Creature Changed - Called on all agents with this script when the selected creature is changed by [NORN]. [_P1_] is the new creature, [_P2_] is the previously selected creature.
	121 = Vehicle Pickup - Called when an agent has been picked up by a vehicle.
	122 = Vehicle Drop - Called when an agent has been dropped by a vehicle.
	123 = Window Resized - Called on all agents with this script whenever the main view is resized.
	124 = Got Carried Agent - Tells an agent that they have just picked something up.
	125 = Lost Carried Agent - Tells an agent that they have just dropped something.
	126 = Make Speech Bubble - Called when a creature speaks, so scripts can display a speech bubble. Every agent which has this script is called. [_P1_] is the text being spoken, [_P2_] is the creature who is speaking.
	127 = Life Event - Called whenever there is a new life event, whether an event build into the engine, or a custom event sent with [HIST EVNT]. [_P1_] is the moniker that the event happened to, [_P2_] is the event number as an index into the events for that moniker.
	128 = World Loaded - Called when the world had just been loaded, whether from bootstrap or from a saved file.
	200 = Mate - Reserved for use in the mating scripts, but not directly used by the engine. Tells a male to mate.
	255 = Agent Exception - This script specifies the behaviour when an agent tries to do something to an invalid agent. For example, if you try and access an OVxx with a [NULL] target. If this script isn't present for [OWNR], you get a run time error. If it is present, that script is called and you can reset variables as necessary.
}

@Season {
	0 = Spring
	1 = Summer
	2 = Autumn
	3 = Winter
}

@Sleeping {
	0 = Awake
	1 = Sleeping
}

@Stimulus {
	0 = Disappoint - Issue to disappoint (punish) a creature for a pointless action (eg. failed to activate)
	1 = Pointerpat - User has patted creature
	2 = Creaturepat - Another creature has patted you
	3 = Pointerslap - User has slapped creature
	4 = Creatureslap - Another creature has slapped you
	5 = Approaching deprecated - Object is approaching
	6 = Retreating deprecated - Object is retreating
	7 = Bump - Creature has hit a wall
	8 = Newobj deprecated - New object has come into view
	9 = Gobbledygook - Heard unrecognised speech
	10 = Pointerword - Heard user speak
	11 = Creatureword - Heard creature speak
	12 = Quiescent - Emit PERIODICALLY while quiescent
	13 = Activate1 - Emit AFTER activation
	14 = Activate2
	15 = Deactivate
	16 = Approach - Emit PERIODICALLY while watching (after approach phase over)
	17 = Retreat - Emit AFTER retreat
	18 = Get - Emit AFTER get
	19 = Drop
	20 = Expressneed - Emit AFTER say need
	21 = Rest - Emit after resting but before falling asleep
	22 = Sleep - Emit PERIODICALLY while sleeping (later in REST action)
	23 = Travwesteast - Emit PERIODICALLY while walking west OR east
	24 = Push - Emit AFTER being pushed
	25 = Hit - Emit AFTER being hit
	26 = Eat - Emit AFTER eating
	27 = Ac6
	28 = Invol0
	29 = Invol1
	30 = Invol2
	31 = Invol3
	32 = Invol4
	33 = Invol5
	34 = Invol6
	35 = Invol7
	36 = Approaching edge deprecated - Emit AFTER moving towards an edge object
	37 = Retreating edge deprecated - Emit AFTER moving away from an edge object
	38 = Falling deprecated - Emit whilst falling under gravity
	39 = Impact - Emit after a collision
	40 = Pointeryes - Emit after user spoken verb YES
	41 = Creatureyes - Emit after creature spoken verb YES
	42 = Pointerno - Emit after user spoken verb NO
	43 = Creatureno - Emit after creature spoken verb NO
	44 = Aggression - Emit after performing a HIT
	45 = Mate - Emit after mating
	46 = Oppsex tickle
	47 = Samesex tickle
	48 = Go nowhere
	49 = Go in
	50 = Go out
	51 = Go up
	52 = Go down
	53 = Go left
	54 = Go right
	55 = Reached peak of smell0
	56 = Reached peak of smell1
	57 = Reached peak of smell2
	58 = Reached peak of smell3
	59 = Reached peak of smell4
	60 = Reached peak of smell5
	61 = Reached peak of smell6
	62 = Reached peak of smell7
	63 = Reached peak of smell8
	64 = Reached peak of smell9
	65 = Reached peak of smell10
	66 = Reached peak of smell11
	67 = Reached peak of smell12
	68 = Reached peak of smell13
	69 = Reached peak of smell14
	70 = Reached peak of smell15
	71 = Reached peak of smell16
	72 = Reached peak of smell17
	73 = Reached peak of smell18
	74 = Reached peak of smell19
	75 = Wait
	76 = Discomfort
	77 = Eaten plant
	78 = Eaten fruit
	79 = Eaten food
	80 = Eaten animal
	81 = Eaten detritus
	82 = Consume alchohol
	83 = Danger plant
	84 = Friendly plant
	85 = Play bug
	86 = Play critter
	87 = Hit critter
	88 = Play danger animal
	89 = Activate button
	90 = Activate machine
	91 = Got machine
	92 = Hit machine
	93 = Got creature egg
	94 = Travelled in lift
	95 = Travelled through meta door
	96 = Travelled through internal door
	97 = Played with toy
}

@StreamStatus {
	0 = Stream Bad
	1 = Stream OK
}

@TimeOfDay {
	0 = Dawn
	1 = Morning
	2 = Afternoon
	3 = Evening
	4 = Night
}

@Unconscious {
	0 = Conscious
	1 = Unconcious
}

@VarTypeAsInt {
	0 = integer
	1 = floating-point
	2 = string
	3 = simple agent
	4 = pointer agent
	5 = compound agent
	6 = vehicle
	7 = creature
	-1 = NULL agent handle
	-2 = Unknown agent - you should never get this
}

@WallDirectionConstants {
	LEFT = Left
	RGHT = Right
	_UP_ = Up
	DOWN = Down
}

@Zombied {
	1 = Zombied
	0 = False
}