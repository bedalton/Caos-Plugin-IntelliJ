/** retn curr targ object* as integer */
-TARG(pointer)

/** default object (owner of script, or pet if DDE) */
-OWNR(pointer)

/** obj who caused event leading to this script */
-FROM(pointer)

/** current pet creature */
-NORN(pointer)

/** mouse pointer object */
-PNTR(pointer)

/**
 * IT - obj that OWNR creature is attending to (may be NULL)
 * NOTE: only OWNR's IT can be determined, not TARG's
 */
-ATTN(pointer)

/** object that's carrying OWNR (may be NULL) */
-CARR(pointer)

/**
 * object who EXECuted the tool who owns this
 * return (int)Exec; dde macro. NOTE: only valid for DDE
 * tools who *know* that they were executed by an object
 */
-EXEC(pointer)

/** obj that Owner creature was attending to */
-_IT_(pointer)

/**
 * the contents of the EditObject variable (addr of object being
 * placed/repositioned/deleted; EditObject is set by the EDIT macro or by shift-clicking an object. Use this rvalue to delete selected objects, etc.
 */
-EDIT(pointer)

/** a pointer to objects that will survive */
-OBJP(pointer)

/*
 * convert 4 characters into an integer
 * eg. {TOKN 1234} = integer '4321'
 */
-TOKN(int) XXXX(string)

/*
 * Sound Status
 * Bit 0 = Sound on/off
 * Bit 1 = Sound Mode (foreground only, continuous)
 */
-SNDS(bit)

/** Max allowed view window width (World Coordinates)
-WINW(int)

/** Max allowed view window height (World Coordinates)
-WINH(int)

/**
 *	Objects attributes (INVISIBLE, CARRYABLE, etc)
 */
-ATTR(int)

/** objects left coordinates */
-POSL(int)
/** objects right coordinates */
-POSR(int)
/** objects top coordinates */
-POST(int)
/** objects bottom coordinates */
-POSB(int)

/** family+genus+specie (Classifier) */
-CLAS(classifier)
/** Family (in range 0-255) */
-FMLY(int)
/** Genus (in range 0-255) */
-GNUS(int)
/** Species (in range 0-255) */
-SPCS(int)

/** Movement status (FLOATING, MOUSEDRIVEN, etc) */
-MOVS(MovementStatus)

/** Objects active flag (INACTIVE=0, ACTIVE1, ACTIVE2) */
-ACTV(int)

/** objects neural Id 0-39 */
-NEID(int)

/** [TARG] object's (and current part's) current pose
-POSE(pose)

/* === [TARG] Compound Object, Vehicle, Lift and Aircraft Operands === */

/** Vehicle's x movement vector in 1/256ths pixels */
-XVEC(number)

/** Vehicle's y movement vector in 1/256ths pixels */
-YVEC(number)

/**
 * Vehicle collision data
 * b0=Hit Left, b1=hit right, b2=hit top, b3=hit bottom
 */
-BUMP(bitflags)

/** === [TARG] Creature Operands === */

/**
 * State of creature's Drive# {n} (hunger etc)
 */
-DRIV(int) n:(int)

/**
 * Creatures most pressing drive#, returns 0 (pain) if no drives are pressing
 * can use in {DOIF DRIV DRV! GT 128}
 */
-DRIV!(int)

/**
 * Concentration of chemical {n}
 */
-CHEM(int) n(int)

/**
 * Return score stored in score.cpp -- Alima
 */
-SCOR(int)

/**
 * Hours elapsed since game started
 */
-HOUR(int)
/**
 * Minutes elapsed since game started
 */
-MINS(int)

/**
 * Moniker of child genore if [TARG] is pregnant
 */
-BABY(moniker)

/**
 * return 1 if creature is asleep
 */
-ASLP(int)
/**
 * Creature age in minutes (abus)
 */
-CAMN(int)
/**
 * Creatures age (0-7)
 */
-CAGE(int)

/**
 * Creature is dead
 */
-DEAD(int)

/** === Environmental Operands === */

/**
 * Wind speed/dir newat [TARG] object (-3 to +3)
 */
-WIND(number)
/**
 * Air temperature near [TARG] object (-3 to +3)
 */
-TEMP(number)

/**
 * Return world left, top, right, bottom or Type of given room
 * where {edge} = 0=left,1=right,2=top,3=bottom, 4=Type of room (indoors, etc)
 * Returns 0 if no such room
 */
-ROOM(int) roomNumber(int) edge(int)

/**
 * number of rooms on map
 */
-RMS#(int)
/**
 * Number of ground level data on map
 */
-GND#(int)

/**
 * Number of pixels per ground datum
 */
-GNDW(int)

/**
 * Ground level at position x (worldx/GROUNDW)
 */
-GRND(?) x(int)

/**
 * Total number of objects in the world who fit this description
 * {family}, {genus} or {species} can be {0} to act as wild cards
 */
-TOTL(int) family(int) genus(int) species(int)

/** === Truth test operands (Returns 1 if true, 0 if false) === */

/*
 * Returns whether two objects are in contact
 * eg. {DOIF TOUC TARG OWNR GT 0}, means do if [OWNR] and [TARG] are touching
 */
-TOUC(int) objPtr1(pointer) objPtr2(pointer)

/** === [TARG] Object Operands === */

/**
 * Movement status (FLOATING, MOUSEDRIVE, etc)
 */
-MOVS movementStatus(movementStatus)

-CLAS(command) family(int)+genus(int)+(species)+0

-ATTR(command) attr(bits)

-OBJP(command) pointer(pointer)

/* === [TARG] Compound Object, Vehicle, Lift and Aircraft Operands === */

/**
 * {xVect} - x movement vector in 1/256ths pixel
 */
-XVEC(command) xVect(number)

/**
 * {yVect} - x movement vector in 1/256ths pixel
 */
-YVEC(command) yVect(number)


/* === SET ACTIVITY STATE === */

/**
 * {actv} - object's active flag (INACTIVE=0, ACTIVE1, ACTIVE2)
 */
-ACTV(command) actv(number)


/* === System Operands === */

/**
 * {moniker} - Set 0 to abort pregnancy, or to moniker to make pregnant
 */
-BABY(command) moniker(moniker)

/* === System Operands === */

/**
 * {winw} - Max allowed view window width (world coords)
 */
-WINW(command) winw(int)

/**
 * {windowHeight} - Max allowed view window height (world coords)
 */
-WINH(command) windowHeight(int)


/**
 * {winw} - Max allowed view window width (world coords)
 */
-WINW(command) winw(int)

/** Fetcha  script from scriptorium and send it (used by editor for reading out existing scripts */
-DDE: SCRP(command) family(int) genus(int) species(int) event(int)

/** Sends an integer {RValue} */
-DDE: PUTV(command) RValue(int)

/**
 * Send a string - useful for debugging macros,
 * or for returning the results of macro commands to test the truth of some conditions
 */
-DDE: PUTS(command) [literal string]

/**
 * Get buffer
 * gets string and writes to dde buffer
 * eg. {dde: getb monk}
 */
-DDE: GETB option(option)

/** Get all creatures data */
-DDE: GETB(command) option=data

/** Get creatures name */
-DDE: GETB(command) option=cname

/** Get creature's moniker */
-DDE: GETB(command) option=monk

/**
 * Returns the following fields separated by a '|' symbol
 * -{name}
 * -{moniker}
 * -{sex} 1=male, 2=female
 * -{Age} as "hours:min"
 * -{pregnancy} either "N/A", "No" or <number>
 * -{Life-Force} either <number> terminated in "%" or "Dead"
 * -{Medical} either "Healthy", "Sick", or "Dead"
 * -{Room} number of the room they're in
 * -{xPos}
 * -{yPos}
 */

 /** Write from string to location set by option token
-DDE: PUTB(command) literal(string) option(option)

/** Write all creature details */
-DDE: PUTB(command) literal(string) option=data

/** Set the creatures name from string */
-DDE: PUTB(command) [literal string] option=cnam

/** Take a snapshort of the current subject, create a standard windows bmp and pass the file back to client
-DDE: PICT(command)

/** Update number of natural eggs in the world */
-DDE: NEGG(command)

/** Update number of norns in world if egg hatches voluntarily */
-DDE: HATC(command)

/** Update number of norns in world if egg hatches voluntarily */
-DDE: LIVE(command)

/** Update number of norns in world if egg hatches voluntarily */
-DDE: DIED(command)

/** Alima simple macro to pan camera to creature before the owners kit takes a photo */
-DDE: PANC(command)

/**
 * Output the locationos of the braiin lobes of the subject
 * The macro format is " 'x_start'y_start'width'height' "
 * after a leading count of the number of lobes based on the 64x48 grid of neurones
 */
-DDE: LOBE(command)

/** Output the number sof each of the 12 gene types */
-DDE: GENE(command)

/**
 * Read a word/idea from the targ BLACKBOARD's list.
 * Sends "###|text|" where ### is the vocabulary slot (WD_xxx) for the idea
 * represented by the bbd picture who's index is Index, and 'text' is the word associated with that pucture used
 * by blackboard editor tools to fetch words for editing see "WORD command for writing words into objects
 */
-DDE: WORD(command) index(int)

-DDE: CELL(command) lobe(int) cell(int) dentype(int)

-SYS: QUIT(command)

-SYS: ABRT(command)

-SYS: WRLD(command) fileName(filename.viv)

-SYS: CMND(command) id(int)

-SYS: WPOS(command) x(int) y(int) width(int) height(int)

-SYS: WTOP(command)

-SYS: EDIT(command) left(int) top(int) right(int) bottom(int)

-SYS: CMRA(command) x(int) y(int)

-SYSL CAMT(command)

-SYS: GRND(command) x(int) y(int)


/* === NEW Constructors === */

-NEW: SCEN(command) imageFile(literal) numImages(int) imageNumber(int) plane(int)

-NEW: SIMP(command) imageFile(literal) numImages(int) imageNumber(int) plane(int) clone(int)

-NEW: CBTN(command) imageFile(literal) numImages(int) imageNumber(int) plane(int)

-NEW: COMP(command) imageFile(literal) numImages(int) imageNumber(int) clone(int)

-NEW: PART(command) part(int) relX(int) relY(int) imageOffset(int) plane(int)

-NEW: VHCL(command) imageFile(literal) numImages(int) imageNumber(int)

-NEW: LIFT(command) imageFile(literal) numImages(int) imageNumber(int)

-NEW: BKBD(command) imageFile(literal) numImages(int) imageNumber(int) bgColor(int)
	chalkColor(int) aliasColor(int) textX(int) textY(int)

-NEW: CREA(command) moniker(int) sex(int)

-NEW: GENE(command) mum(int) data(int) child(LValue)

/* === Carry out 'bbd:' commands (related to blackboard objects) === */
-BBD: WORD(command) index(int) id(int) [text]

-BBD: SHOW(command) n(int)

-BBD: EMIT(command)

-BBD: EDIT(command) n(int)


/* === Execution-Flow Commands == */

-STOP(command)

-ENDM(command)

-SUBR(command) label(literal)

-GSUB(command) label(literal)

-RETN(command)

-REPS(command) repetitions(int)

-REPE(command)

-LOOP(command)

-UNTL val1(any) eq(#ComparisonOperator) val2(any)

-EVER(command)

-ENUM(command) family(int) genus(int) species(int)

-NEXT(command)

-RTAR(command) family(int) genus(int) species(int)

-RNDV(command) var(var) min(int) max(int)

-SETV(command) var value(value)

-DOIF(command) val1(value) eq(#ComparisonOperator) val2(value)

-ELSE(command)

-ENDI(command)

-WAIT(command) ticks(int)

-ADDV(command) lvalue(value) rvalue(value)

-SUBV(command) lvalue(value) rvalue(value)

-MULV(command) lvalue(value) rvalue(value)

-DIVV(command) lvalue(value) rvalue(value)

-MODV(command) lvalue(value) rvalue(value)

-NEGV(command) lvalue(value) rvalue(value)

-ANDV(command) lvalue(value) rvalue(value)

-ORRV(command) lvalue(value) rvalue(value)

-DBUG(command) rvalue(value)

-BDGM(command) string(string)

-INST(command)


/* === Application, Tool and System Commands === */

-SCRP(command) family(int) genus(int) species(int) event(int)

-SCRX(command) family(int) genus(int) species(int) event(int)

-TOOL(command) [fsp exe] [menu text] [help text] glyph(int)

-EXEC(command) [fsp.exe] [params...]

-ROOM(command) roomNumber(int) left(int) top(int) right(int) bottom(int) type(int)

/* === Sound Effects === */
-SNDF(command) function(#SoundFunction)


#SoundFunction {
	ON__ - Sound On,
	OFF_ - Sound Off,
	FORE - Sound Only plays in foreground,
	CONS - Sound plays all the time
}

-SNDV(command) [filename without .wav suffix]

-SNDE(command) fileName(token)

-SNDQ(command) fileName(token) delay(int)

-SNDC(command) fileName(token)

-SNDL(command) fileName(token)

-

#ComparionOperator {
	EQ,
	NE,
	GT,
	LT,
	GE,
	LE,
	BT,
	BF
}

