{
	parserClass="com.openc2e.plugins.intellij.caos.def.parser.CaosDefParser"
	implements="com.openc2e.plugins.intellij.caos.def.psi.api.CaosDefCompositeElement"
	extends="com.openc2e.plugins.intellij.caos.def.psi.impl.CaosDefCompositeElementImpl"
	elementTypeHolderClass="com.openc2e.plugins.intellij.caos.def.lexer.CaosDefTypes"
	elementTypePrefix="CaosDef_"
	elementTypeClass="com.openc2e.plugins.intellij.caos.def.psi.types.CaosDefElementType"
	tokenTypeClass="com.openc2e.plugins.intellij.caos.def.lexer.CaosDefTokenType"
	psiClassPrefix="CaosDef"
	psiImplClassSuffix="Impl"
	psiPackage="com.openc2e.plugins.intellij.caos.def.psi.api"
	psiImplPackage="com.openc2e.plugins.intellij.caos.def.psi.impl"
	elementTypeFactory("comment|tagLine")="com.openc2e.plugins.intellij.caos.def.psi.CaosDefElementTypeFactory.factory"
	psiImplUtilClass="com.openc2e.plugins.intellij.caos.def.parser.CaosDefParserUtil"
	tokens = [
		DOC_COMMENT_LITERAL = "regexp:/\*[*]*.*(?=[*][/])[*][/]";
		DOC_COMMENT_OPEN = 'regexp:/[*]+';
		DOC_COMMENT_CLOSE = 'regexp:[*]+/'
		LINE_COMMENT = "regexp://[^\n]*"
		WORD = "regexp:[a-zA-Z_][a-zA-Z0-9#!$_]{3}"
		ID = "regexp:[_a-zA-Z][_a-zA-Z0-9]*";
		EQ = "=";
		COMMA = ',';
		SEMI = ';'
		SINGLE_QUO = "'";
		DOUBLE_QUO = '"';
		COLON = ':';
		OPEN_PAREN = '(';
		CLOSE_PAREN = ")";
		space = "regexp:\s+";
		OPEN_BRACKET = '[';
		CLOSE_BRACKET = ']';
		OPEN_BRACE = '{';
		CLOSE_BRACE = '}';
		LEADING_ASTRISK = '*';
		DASH = '-';
		CODE_BLOCK_LITERAL = 'regexp:#\{[^}]*\}';
		WORD_LINK = 'regexp:\[[a-zA-Z_0-9#$!]+]'
		TYPE_LINK = 'regexp:\@\{[a-zA-Z_0-9#$!]+\}'
		AT_RVALUE = "regexp:[@][rR][vV][aA][lL][uU][eE]";
		AT_LVALUE = "regexp:[@][lL][vV][aA][lL][uU][eE]";
		AT_PARAM = "regexp:[@][pP][aA][rR][aA][mM]"
		AT_RETURNS = "regexp:[@][rR][eE][tT][uU][rR][nN][sS]?"

		AT_ID = "regexp:[@][a-zA-Z_][a-zA-Z_0-9]";
		LINK = 'regexp:\[[^\]]*\]';
		SINGLE_QUO_STRING = "regexp:'[^\n']*'";
		DOUBLE_QUO_STRING = 'regexp:"[^\n"]*"';
		STRING_LITERAL_TYPE
		space = "regexp:\s+"
	]
}

def	::= (!<<eof>> def_element)*
	;


def_element
	::= command_def_element
	|	type_definition_element
	| 	comment
	| 	NEWLINE
	| 	';'
	;


command_def_element
	::= doc_comment? command_name return_type arguments_list?
	{
		pin = 2;
		methods = [
			isCommand
		]
	}
	;

arguments_list
	::= variable+
	{
		recoverWhile = arguments_list_recover
	}
	;
private arguments_list_recover
	::= !(';'|NEWLINE|DOC_COMMENT_LITERAL|LINE_COMMENT)
	;


type_definition_element
	::= type_def_name type_definition_body
	;

type_definition
	::= type_definition_key '=' type_definition_value '-' type_definition_description
	;
private type_definition_body
	::= '{' type_definition_list? '}'
	;

type_definition_list
	::= type_definition+
	{
		recoverWhile=type_definition_list_recover
	}
	;

private type_definition_list_recover
	::= !('}')
	;

variable
	::= variable_name '(' variable_type ')'
	{
		pin = 2;
	}
	;


variable_name
	::= ID
	|	WORD
	;

return_type
	::= '(' variable_type ')'
	{
		pin = 1
	}
	;

variable_type
	::= ID
	|	WORD
	|	STRING_LITERAL_TYPE
	;

command_name
	::= WORD
	;

type_def_name
	::= AT_ID
	;

type_definition_key
	::= TYPE_DEF_KEY
	;

type_definition_value
	::= TYPE_DEF_VALUE
	;

type_definition_description
	::= TEXT
	;

doc_comment
	::= DOC_COMMENT_OPEN doc_comment_element* DOC_COMMENT_CLOSE
	;

private doc_comment_element
	::= doc_comment_param
	|	doc_comment_return
	|	doc_comment_line
	|	rvalue
	|	lvalue
	|	LEADING_ASTRISK
	;

doc_comment_line
	::= doc_comment_line_items+
	;

private doc_comment_line_items
	::= code_block
	|	WORD_LINK
	|	TYPE_LINK
	|	TEXT
	;

code_block
	::= CODE_BLOCK_LITERAL
	;

rvalue
	::= AT_RVALUE
	;
lvalue
	::= AT_LVALUE
	;

doc_comment_return
	::= AT_RETURN doc_comment_variable_type
	;

doc_comment_param
	::= AT_PARAM '{' variable_name '}' doc_comment_variable_type doc_comment_param_text
	;

doc_comment_param_text
	::= TEXT
	;

doc_comment_variable_type
	::= '(' variable_type type_def_name ')'
	;

comment
	::= DOC_COMMENT_LITERAL
	|	LINE_COMMENT
	;