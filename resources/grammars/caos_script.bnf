{
	parserClass="com.openc2e.plugins.intellij.caos.parser.CaosScriptParser"
	parserUtilClass="com.openc2e.plugins.intellij.caos.parser.CaosScriptParserUtil"
	implements="com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
	extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptCompositeElementImpl"
	elementTypeHolderClass="com.openc2e.plugins.intellij.caos.lexer.CaosScriptTypes"
	elementTypePrefix="CaosScript_"
	elementTypeClass="com.openc2e.plugins.intellij.caos.psi.types.CaosScriptElementType"
	tokenTypeClass="com.openc2e.plugins.intellij.caos.lexer.CaosScriptTokenType"
	psiClassPrefix="CaosScript"
	psiImplClassSuffix="Impl"
	psiPackage="com.openc2e.plugins.intellij.caos.psi.api"
	psiImplPackage="com.openc2e.plugins.intellij.caos.psi.impl"
	elementTypeFactory("command|command_call|command_token|expression|var_token")="com.openc2e.plugins.intellij.caos.psi.types.CaosScriptElementTypeFactory.factory"
	psiImplUtilClass="com.openc2e.plugins.intellij.caos.psi.util.CaosScriptPsiImplUtil"
	generateTokenAccessors=true
	generateTokens=true
	tokens = [
		NEWLINE = "regexp:\n";
		ENDM = "regexp:[eE][nN][dD][mM]"
		SUBR = "regexp:[sS][uU][bB][rR]"
		REPS = "regexp:[rR][eE][pP][sS]"
		REPE = "regexp:[rR][eE][pP][eE]"
		LOOP = "regexp:[lL][oO][oO][pP]"
		UNTL = "regexp:[uU][nN][tT][lL]"
		EVER = "regexp:[eE][vV][eE][rR]"
		ENUM = "regexp:[eE][nN][uU][mM]"
		NEXT = "regexp:[nN][eE][xX][tT]"
		DOIF = "regexp:[dD][oO][iI][fF]"
		ELSE = "regexp:[eE][lL][sS][eE]"
		ENDI = "regexp:[eE][nN][dD][iI]"
		DOIF = "regexp:[dD][oO][iI][fF]"
		ENDI = "regexp:[eE][nN][dD][iI]"
		SCRP = "regexp:[sS][cC][rR][pP]"
		ESCN = "regexp:[eE][sS][cC][nN]"
		NSCN = "regexp:[nN][sS][cC][nN]"
		ETCH = "regexp:[eE][tT][cC][hH]"
		ESEE = "regexp:[eE][sS][eE][eE]"
		ISCR = "regexp:[iI][sS][cC][rR]"
		VA_XX = "regexp:[Vv][Aa][0-9][0-9]"
		OB_XX = "regexp:[Oo][Vv][0-9][0-9]"
		MV_XX = "regexp:[Mm][Vv][0-9][0-9]"
		VAR_X = "regexp:[Vv][Aa][Rr][0-9]"
		OBV_X = "regexp:[Oo][Bb][Vv][0-9]"
		COMMENT_LITERAL = "regexp:\*[^\n]*"
		DECIMAL = "regexp:[0-9]+\.[0-9]+"
		INT = "regexp:[0-9]+"
		TEXT_LITERAL = 'regexp:\[[^]]*]';
		QUOTE_STRING = 'regexp:"[^\n|"]*"'
		ID = "regexp:[_a-zA-Z][_a-zA-Z0-9!#]*";
		COLON = ':';
		PLUS = "+";
		SPACE_ = "regexp:[ ]";
		space = "regexp:\n[\t ]+";
		OPEN_BRACKET = '[';
		CLOSE_BRACKET = ']';
		COMMA = ',';
		ANIM_R = "R"


	]
}

def	::= (!<<eof>> script_body_element)*
	;

script_body_element
	::= event_script line_terminator
	|	code_block line_terminator
	{
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
        ]
	}
	;

code_block
	::= caos_statement+
	{
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
        ]
        methods = [
        	getCodeBlock
        ]
	}
	;

private caos_statement
	::= caos_element line_terminator
	|	NEWLINE
	;

caos_element
	::= comment
	|   control_statement line_terminator?
	|   command_call line_terminator
	;


event_script
	::= (SCRP|ISCR) SPACE_ classifier SPACE_ event_number line_terminator (event_script_body line_terminator)? script_terminator
	{
		pin=1
	}
	;

private event_script_body
	::= code_block
	{
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
        ]
        recoverWhile=event_script_body_recover
	}
	;

private event_script_body_recover
	::= !(ENDM|SCRP|<<eof>>|<<eos>>)
	;

classifier
	::= family SPACE_ genus SPACE_ species
	;

private control_statement
    ::= loop_statement
    |   repeat_statement
    |   enum_next_statement
    |   enum_scenery_statement
    |	doif_statement
    ;


loop_statement
    ::= LOOP SPACE_ loop_body? line_terminator loop_terminator
    {
        pin=1;
        methods = [
        	isEver
        	isUntil
        ]
    }
    ;

loop_terminator
	::= ever_terminator
	|	untl_terminator
	;

private ever_terminator
	::= EVER
	;

private untl_terminator
	::= UNTL line_terminator expression
	{
		pin=1
	}
	;


private loop_body
    ::= code_block
    {
        recoverWhile=loop_body_recover
    }
    ;

private loop_body_recover
    ::= !(UNTL|EVER|ENDM)
    ;

repeat_statement
    ::= REPS SPACE_ expression line_terminator (repeat_body line_terminator)? REPE
    {
        pin=1
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
        ]

        methods = [
        ]

    }
    ;

private repeat_body
    ::= code_block
    {
        recoverWhile=repeat_body_recover
    }
    ;

private repeat_body_recover
    ::= !(REPE|ENDM)
    ;

enum_next_statement
    ::= (ENUM|ESEE|ETCH) line_terminator classifier line_terminator (enum_body line_terminator)* NEXT
    {
        pin=1;
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
        ]
        methods = [
        ]
    }
    ;

enum_scenery_statement
    ::= ESCN SPACE_ classifier line_terminator (enum_body line_terminator)? NSCN
    {
        pin=1;
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
        ]
        methods = [

        ]
    }
    ;

private enum_body
    ::= code_block
    {
        implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
        ]
        recoverWhile=enum_body_recover
    }
    ;

private enum_body_recover
    ::= !(NEXT|<<eof>>)
    ;


command_call
    ::= command expressionList?
    {
        pin=2
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptCommandCallStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
            "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
		methods = [
			getCommandString
			getCommandTokens
			getParameterTypes
			getParametersLength
			getCommandTokens
			getCallType
			getPreviousCalls
		]
    }
    ;


private expressionList
	::= (SPACE_ expression)+
	{
        recoverWhile=command_recover
	}
	;

private command_recover
	::= !(ENDM|NEWLINE)
	;

doif_statement
	::= DOIF SPACE_ expression line_terminator (do_if_body line_terminator)? (else_if line_terminator)* (else_statement line_terminator)? ENDI
	{
		pin=1
	}
	;

else_if
	::= ELIF line_terminator expression line_terminator do_if_body?
	;

else_statement
	::= ELSE line_terminator else_block
	{
		pin=1;
	}
	;

private else_block
	::= code_block
	;

private do_if_body
	::= code_block
	{
		recoverWhile=do_if_body_recover
	}
	;

private do_if_body_recover
	::= !(ENDI|ELSE|ELIF)
	;

expression
    ::= equality_expression
    |   animation_string
    |	byte_string
    |   expression_prime
    {
    	stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptExpressionStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
    	methods = [
    		getType
    	]
    }
    ;


private expression_prime
    ::= command_call
    |   literal
    |   token
    |   var_token
    ;

equality_expression
    ::= expression_prime line_terminator eq_op line_terminator expression
    ;

eq_op ::= ID;

var_token
	::= VA_XX
	| 	OV_XX
	|	OBV_X
	|	VAR_X
	|	MV_XX
	{
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptVarTokenStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
		methods = [
			getVarGroup
			getVarIndex
		]
	}
	;

literal
    ::= string_literal
    |   number
    {
        methods = [
            intValue
            isInt
            floatValue
            isFloat
            isNumeric
            stringValue
            isString
        ]
    }
    ;

number ::=INT|DECIMAL
    ;

string_literal
    ::= QUOTE_STRING
    |   TEXT_LITERAL
    {
        methods = [
            getStringValue
        ]
    }
    ;

token
    ::= ID
    ;

command
	::= command_token (SPACE_ command_token)*
	{
		pin=1
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptCommandStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
		methods = [
			getCommandString
			getCommandTokens
		]
	}
	;

command_token
    ::= ID
	{
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptCommandTokenStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
		]
		methods = [
			getName
			setName
			getReference
			getIndex
			getCommandString
			isVariant
		]
	}
    ;

comment
    ::= COMMENT_LITERAL
    {
        methods = [
            getCommentText
        ]
    }
    ;

animation_string
    ::= '[' INT+ ANIM_R? ']'
    ;

byte_string
	::= '[' INT (SPACE_ INT)* ']'
	;

line_terminator
    ::= <<eof>>
    |   ","
    |   line_feed+
    |	SPACE_
    ;

private line_feed
	::= comment
	|	NEWLINE
	;
script_terminator
	::= ENDM
	|   <<eos>>
	|	<<eof>>
	;

family ::= INT;
genus ::= INT;
species ::= INT;

event_number
	::= INT
	;

