{
	parserClass="com.openc2e.plugins.intellij.caos.parser.CaosScriptParser"
	parserUtilClass="com.openc2e.plugins.intellij.caos.parser.CaosScriptParserUtil"
	implements="com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
	extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptCompositeElementImpl"
	elementTypeHolderClass="com.openc2e.plugins.intellij.caos.lexer.CaosScriptTypes"
	elementTypePrefix="CaosScript_"
	elementTypeClass="com.openc2e.plugins.intellij.caos.psi.types.CaosScriptElementType"
	tokenTypeClass="com.openc2e.plugins.intellij.caos.lexer.CaosScriptTokenType"
	psiClassPrefix="CaosScript"
	psiImplClassSuffix="Impl"
	psiPackage="com.openc2e.plugins.intellij.caos.psi.api"
	psiImplPackage="com.openc2e.plugins.intellij.caos.psi.impl"
	elementTypeFactory("command|command_call|command_token|expression|var_token|subroutine")="com.openc2e.plugins.intellij.caos.psi.types.CaosScriptElementTypeFactory.factory"
	psiImplUtilClass="com.openc2e.plugins.intellij.caos.psi.util.CaosScriptPsiImplUtil"
	generateTokenAccessors=true
	generateTokens=true
	name("space.*") = "space or comma"
	name("trailing_space") = ""
	tokens = [
		NEWLINE = "regexp:\n";
		K_ENDM = "regexp:[eE][nN][dD][mM]"
		K_SUBR = "regexp:[sS][uU][bB][rR]"
		K_REPS = "regexp:[rR][eE][pP][sS]"
		K_REPE = "regexp:[rR][eE][pP][eE]"
		K_LOOP = "regexp:[lL][oO][oO][pP]"
		K_UNTL = "regexp:[uU][nN][tT][lL]"
		K_EVER = "regexp:[eE][vV][eE][rR]"
		K_ENUM = "regexp:[eE][nN][uU][mM]"
		K_NEXT = "regexp:[nN][eE][xX][tT]"
		K_DOIF = "regexp:[dD][oO][iI][fF]"
		K_ELSE = "regexp:[eE][lL][sS][eE]"
		K_ENDI = "regexp:[eE][nN][dD][iI]"
		K_DOIF = "regexp:[dD][oO][iI][fF]"
		K_SCRP = "regexp:[sS][cC][rR][pP]"
		K_ESCN = "regexp:[eE][sS][cC][nN]"
		K_NSCN = "regexp:[nN][sS][cC][nN]"
		K_ETCH = "regexp:[eE][tT][cC][hH]"
		K_ESEE = "regexp:[eE][sS][eE][eE]"
		VA_XX = "regexp:[Vv][Aa][0-9][0-9]"
		OB_XX = "regexp:[Oo][Vv][0-9][0-9]"
		MV_XX = "regexp:[Mm][Vv][0-9][0-9]"
		VAR_X = "regexp:[Vv][Aa][Rr][0-9]"
		OBV_X = "regexp:[Oo][Bb][Vv][0-9]"
		K_STIM = "regexp:[sS][tT][iI][mM]"
		K_WRIT = "regexp:[wW][rR][iI][tT]"
		K_SHOU = "regexp:[sS][hH][oO][uU]"
		K_SIGN = "regexp:[sS][iI][gG][nN]"
		K_TACT = "regexp:[tT][aA][cC][tT]"
		K_NEW_COL = "regexp:[nN][eE][wW][:]"
		K_BKBD = "regexp:[bB][kK][bB][dD]"
		K_ROOM = "regexp:[rR][oO][oO][mM]"
		K_SIMP = "regexp:[sS][iI][mM][pP]"
		K_PART = "regexp:[pP][aA][rR][tT]"
		K_SPOT = "regexp:[sS][pP][oO][tT]"
		K_CBTN = "regexp:[cC][bB][tT][nN]"
		K_COMP = "regexp:[cC][oO][mM][pP]"
		K_SCEN = "regexp:[sS][cC][eE][nN]"
		K_CABN = "regexp:[cC][aA][bB][nN]"
		K_SCRX = "regexp:[sS][cC][rR][xX]"
		K_SYS_COL = "regexp:[sS][yY][sS][:]"
		K_EDIT = "regexp:[eE][dD][iI][tT]"
		K_TOOL = "regexp:[tT][oO][oO][lL]"
		K_WPOS = "regexp:[wW][pP][oO][sS]"
		K_GENE = "regexp:[gG][eE][nN][eE]"
		K_LIFT = "regexp:[lL][iI][fF][tT]"
		K_VHCL = "regexp:[vV][hH][cC][lL]"
		K_RNDV = "regexp:[rR][nN][dD][vV]"
		K_BBD_COL = "regexp:[bB][bB][dD][:]"
		K_WORD = "regexp:[wW][oO][rR][dD]"
		K_DDE_COL = "regexp:[dD][dD][eE][:]"
		K_CELL = "regexp:[cC][eE][lL][lL]"
		K_FIRE = "regexp:[fF][iI][rR][eE]"
		K_LTCY = "regexp:[lL][tT][cC][yY]"
		K_CREA = "regexp:[cC][rR][eE][aA]"
		K_RTAR = "regexp:[rR][tT][aA][rR]"
		K_TRIG = "regexp:[tT][rR][iI][gG]"
		K_ADDV = "regexp:[aA][dD][dD][vV]"
		K_ANDV = "regexp:[aA][nN][dD][vV]"
		K_DIVV = "regexp:[dD][iI][vV][vV]"
		K_MODV = "regexp:[mM][oO][dD][vV]"
		K_MULV = "regexp:[mM][uU][lL][vV]"
		K_ORRV = "regexp:[oO][rR][rR][vV]"
		K_SETV = "regexp:[sS][eE][tT][vV]"
		K_SUBV = "regexp:[sS][uU][bB][vV]"
		K_BHVR = "regexp:[bB][hH][vV][rR]"
		K_CHEM = "regexp:[cC][hH][eE][mM]"
		K_PUTB = "regexp:[pP][uU][tT][bB]"
		K_KNOB = "regexp:[kK][nN][oO][bB]"
		K_MCRT = "regexp:[mM][cC][rR][tT]"
		K_MESG = "regexp:[mM][eE][sS][gG]"
		K_MVTO = "regexp:[mM][vV][tT][oO]"
		K_SPAS = "regexp:[sS][pP][aA][sS]"
		K_STM_NUM = "regexp:[sS][tT][mM][#]"
		K_CMRA = "regexp:[cC][mM][rR][aA]"
		K_GRND = "regexp:[gG][rR][nN][dD]"
		K_TELE = "regexp:[tT][eE][lL][eE]"
		K_SNDQ = "regexp:[sS][nN][dD][qQ]"
		K_ABRT = "regexp:[aA][bB][rR][tT]"
		K_APPR = "regexp:[aA][pP][pP][rR]"
		K_CMND = "regexp:[cC][mM][nN][dD]"
		K_DIED = "regexp:[dD][iI][eE][dD]"
		K_HATC = "regexp:[hH][aA][tT][cC]"
		K_LIVE = "regexp:[lL][iI][vV][eE]"
		K_LOBE = "regexp:[lL][oO][bB][eE]"
		K_NEGG = "regexp:[nN][eE][gG][gG]"
		K_PANC = "regexp:[pP][aA][nN][cC]"
		K_PICT = "regexp:[pP][iI][cC][tT]"
		K_SCRP = "regexp:[sS][cC][rR][pP]"
		K_DONE = "regexp:[dD][oO][nN][eE]"
		K_DPAS = "regexp:[dD][pP][aA][sS]"
		K_DROP = "regexp:[dD][rR][oO][pP]"
		K_GPAS = "regexp:[gG][pP][aA][sS]"
		K_INST = "regexp:[iI][nN][sS][tT]"
		K_KILL = "regexp:[kK][iI][lL][lL]"
		K_LOCK = "regexp:[lL][oO][cC][kK]"
		K_LOOP = "regexp:[lL][oO][oO][pP]"
		K_MATE = "regexp:[mM][aA][tT][eE]"
		K_MVBY = "regexp:[mM][vV][bB][yY]"
		K_OVER = "regexp:[oO][vV][eE][rR]"
		K_POIN = "regexp:[pP][oO][iI][nN]"
		K_QUIT = "regexp:[qQ][uU][iI][tT]"
		K_SAYN = "regexp:[sS][aA][yY][nN]"
		K_SLIM = "regexp:[sS][lL][iI][mM]"
		K_SLOW = "regexp:[sS][lL][oO][wW]"
		K_SNEZ = "regexp:[sS][nN][eE][zZ]"
		K_STOP = "regexp:[sS][tT][oO][pP]"
		K_STPC = "regexp:[sS][tT][pP][cC]"
		K_CAMT = "regexp:[cC][aA][mM][tT]"
		K_WTOP = "regexp:[wW][tT][oO][pP]"
		K_TOUC = "regexp:[tT][oO][uU][cC]"
		K_UNLK = "regexp:[uU][nN][lL][kK]"
		K_WALK = "regexp:[wW][aA][lL][kK]"
		K_NEGV = "regexp:[nN][eE][gG][vV]"
		K_GSUB = "regexp:[gG][sS][uU][bB]"
		K_PLDS = "regexp:[pP][lL][dD][sS]"
		K_SNDC = "regexp:[sS][nN][dD][cC]"
		K_SNDE = "regexp:[sS][nN][dD][eE]"
		K_SNDF = "regexp:[sS][nN][dD][fF]"
		K_SNDL = "regexp:[sS][nN][dD][lL]"
		K_AIM_COL = "regexp:[aA][iI][mM][:]"
		K_ANIM = "regexp:[aA][nN][iI][mM]"
		K_ASLP = "regexp:[aA][sS][lL][pP]"
		K_BASE = "regexp:[bB][aA][sS][eE]"
		K_EMIT = "regexp:[eE][mM][iI][tT]"
		K_SHOW = "regexp:[sS][hH][oO][wW]"
		K_BDVG = "regexp:[bB][dD][vV][gG]"
		K_DBGM = "regexp:[dD][bB][gG][mM]"
		K_DBUG = "regexp:[dD][bB][uU][gG]"
		K_GETB = "regexp:[gG][eE][tT][bB]"
		K_PUTS = "regexp:[pP][uU][tT][sS]"
		K_PUTV = "regexp:[pP][uU][tT][vV]"
		K_DREA = "regexp:[dD][rR][eE][aA]"
		K_EVNT = "regexp:[eE][vV][nN][tT]"
		K_IMPT = "regexp:[iI][mM][pP][tT]"
		K_POSE = "regexp:[pP][oO][sS][eE]"
		K_PRLD = "regexp:[pP][rR][lL][dD]"
		K_RMEV = "regexp:[rR][mM][eE][vV]"
		K_SAY_DOL = "regexp:[sS][aA][yY][$]"
		K_SNDV = "regexp:[sS][nN][dD][vV]"
		K_TARG = "regexp:[tT][aA][rR][gG]"
		K_TICK = "regexp:[tT][iI][cC][kK]"
		K_VRSN = "regexp:[vV][rR][sS][nN]"
		K_WAIT = "regexp:[wW][aA][iI][tT]"
		K_WRLD = "regexp:[wW][rR][lL][dD]"
		K_TOTL = "regexp:[tT][oO][tT][lL]"
		K__IT_ = "regexp:[_][iI][tT][_]"
		K_ACTV = "regexp:[aA][cC][tT][vV]"
		K_ATTN = "regexp:[aA][tT][tT][nN]"
		K_ATTR = "regexp:[aA][tT][tT][rR]"
		K_BABY = "regexp:[bB][aA][bB][yY]"
		K_BUMP = "regexp:[bB][uU][mM][pP]"
		K_CAGE = "regexp:[cC][aA][gG][eE]"
		K_CAMN = "regexp:[cC][aA][mM][nN]"
		K_CARR = "regexp:[cC][aA][rR][rR]"
		K_CLAS = "regexp:[cC][lL][aA][sS]"
		K_DEAD = "regexp:[dD][eE][aA][dD]"
		K_DRV_EXL = "regexp:[dD][rR][vV][!]"
		K_EXEC = "regexp:[eE][xX][eE][cC]"
		K_FMLY = "regexp:[fF][mM][lL][yY]"
		K_FROM = "regexp:[fF][rR][oO][mM]"
		K_GND_NUM = "regexp:[gG][nN][dD][#]"
		K_GNDW = "regexp:[gG][nN][dD][wW]"
		K_GNUS = "regexp:[gG][nN][uU][sS]"
		K_HGHT = "regexp:[hH][gG][hH][tT]"
		K_HOUR = "regexp:[hH][oO][uU][rR]"
		K_LIMB = "regexp:[lL][iI][mM][bB]"
		K_LIML = "regexp:[lL][iI][mM][lL]"
		K_LIMR = "regexp:[lL][iI][mM][rR]"
		K_LIMT = "regexp:[lL][iI][mM][tT]"
		K_MINS = "regexp:[mM][iI][nN][sS]"
		K_MOVS = "regexp:[mM][oO][vV][sS]"
		K_NEID = "regexp:[nN][eE][iI][dD]"
		K_NORN = "regexp:[nN][oO][rR][nN]"
		K_OBJP = "regexp:[oO][bB][jJ][pP]"
		K_OWNR = "regexp:[oO][wW][nN][rR]"
		K_PNTR = "regexp:[pP][nN][tT][rR]"
		K_POSB = "regexp:[pP][oO][sS][bB]"
		K_POSL = "regexp:[pP][oO][sS][lL]"
		K_POSR = "regexp:[pP][oO][sS][rR]"
		K_POST = "regexp:[pP][oO][sS][tT]"
		K_RMS_NUM = "regexp:[rR][mM][sS][#]"
		K_SCOR = "regexp:[sS][cC][oO][rR]"
		K_SNDS = "regexp:[sS][nN][dD][sS]"
		K_SPCS = "regexp:[sS][pP][cC][sS]"
		K_TCAR = "regexp:[tT][cC][aA][rR]"
		K_TEMP = "regexp:[tT][eE][mM][pP]"
		K_WDTH = "regexp:[wW][dD][tT][hH]"
		K_WIND = "regexp:[wW][iI][nN][dD]"
		K_WINH = "regexp:[wW][iI][nN][hH]"
		K_WINW = "regexp:[wW][iI][nN][wW]"
		K_XVEC = "regexp:[xX][vV][eE][cC]"
		K_YVEC = "regexp:[yY][vV][eE][cC]"
		K_DRIV = "regexp:[dD][rR][iI][vV]"
		K_TOKN = "regexp:[tT][oO][kK][nN]"
		COMMENT_LITERAL = "regexp:\*[^\n]*"
		DECIMAL = "regexp:[0-9]+\.[0-9]+"
		INT = "regexp:[0-9]+"
		TEXT_LITERAL = 'regexp:\[[^]]*]';
		QUOTE_STRING = 'regexp:"[^\n|"]*"'
		ID = "regexp:[_a-zA-Z][_a-zA-Z0-9!#]*";
		COLON = ':';
		PLUS = "+";
		SPACE_ = "regexp:[ ]";
		space = "regexp:\n[\t ]+";
		OPEN_BRACKET = '[';
		CLOSE_BRACKET = ']';
		COMMA = ',';
		ANIM_R = "R"


	]
}

def	::= (script_body_element (!<<eof>> space_like_or_newline script_body_element)*  trailingspace?)?
	;

script_body_element
	::= event_script
	|	code_block space_like_or_newline script_terminator?
	{
      implements = [
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
      ]
	}
	;

code_block
	::= code_block_line (space_like_or_newline trailingspace? code_block_line)*
	{
		pin=1
      implements = [
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
      ]
      methods = [
      	getCodeBlock
      ]
	}
	;

code_block_line
	::= caos_element
	;

private caos_element
	::=	control_statement
	|	command_call
	|	expression_list
	;


event_script
	::= (K_SCRP|ISCR) space classifier space event_number space_like_or_newline (<<enterMode "eventScript">>event_script_body space_like_or_newline)? <<exitMode "eventScript">>script_terminator
	{
		pin=1
	}
	;
private event_script_body
	::= code_block
	{
      implements = [
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
      ]
      //recoverWhile=event_script_body_recover
	}
	;

subroutine
	::= K_SUBR space subroutine_name space_like_or_newline (subroutine_body space_like_or_newline)? K_RETN
	{
		pin=1
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptSubroutineStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
	}
	;

private subroutine_body
	::= code_block
	{
		//recoverWhile=subroutine_body_recover
	}
	;

classifier
	::= family space genus space species
	;

private control_statement
   ::= subroutine
   |	loop_statement
   |   	repeat_statement
   |   	enum_next_statement
   |   	enum_scenery_statement
   |	doif_statement
   ;

expression_list
	::= expression (!new_line_like space_like expression)* trailingspace?
	{
		pin(".*")=1
		recoverWhile=expression_list_recover
	}

private expression_list_recover
	::= !(NEWLINE|',')
	;

loop_statement
   ::= K_LOOP space_like_or_newline loop_body? space_like_or_newline loop_terminator
   {
      pin=1;
      methods = [
      	isEver
      	isUntil
      ]
   }
   ;

loop_terminator
	::= ever_terminator
	|	untl_terminator
	;

private ever_terminator
	::= K_EVER
	;

private untl_terminator
	::= K_UNTL SPACE_ expression
	{
		pin=1
	}
	;


private loop_body
   ::= code_block
   {
      //recoverWhile=loop_body_recover
   }
   ;

repeat_statement
	::= K_REPS space expression space_like_or_newline (repeat_body space_like_or_newline)? K_REPE
	{
		pin=1
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
		]

		methods = [

		]

	}
	;

private repeat_body
   ::= code_block
   {
      //recoverWhile=repeat_body_recover
   }
   ;
enum_next_statement
	::= (K_ENUM|K_ESEE|K_ETCH) space classifier space_like_or_newline (enum_body space_like_or_newline)? K_NEXT
	{
		pin=1;
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
		]
		methods = [
			codeBlock="code_block"
		]
	}
	;

enum_scenery_statement
   ::= K_ESCN space classifier space_like_or_newline (enum_body space_like_or_newline)? K_NSCN
   {
      pin=1;
      implements = [
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
      ]
      methods = [

      ]
   }
   ;

private enum_body
   ::= code_block
   {
      implements = [
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
         "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptHasCodeBlock"
      ]
      //recoverWhile=enum_body_recover
   }
   ;

doif_statement
	::= K_DOIF space equality_expression space_like_or_newline (do_if_body space_like_or_newline)? (else_if_statement space_like_or_newline)* (else_statement space_like_or_newline)? K_ENDI
	{
		pin=1
	}
	;

else_if_statement
	::= K_ELIF space expression space_like_or_newline do_if_body?
	{
		pin=1
	}
	;

else_statement
	::= K_ELSE space_like_or_newline else_block
	{
		pin=1;
	}
	;

private else_block
	::= code_block
	;

private do_if_body
	::= code_block
	{
		//recoverWhile=do_if_body_recover
	}
	;

command_call
	::= c_commands_rrrrrrrrrrrrr
	|   c_commands_rrrrrrrrrrrr
	|   c_commands_trrrrr
	|   c_commands_rrrrrr
	|   c_commands_trrrr
	|   c_commands_rrrrr
	|   c_commands_trrr
	|   c_commands_rrrr
	|   c_commands_rrl
	|   c_commands_trr
	|   c_commands_lrr
	|   c_commands_rrr
	|   c_commands_lr
	|   c_commands_rr
	|   c_commands_tr
	|   c_commands_no_args
	|   c_commands_l
	|   c_commands_t
	|	c_gsub
	|   c_commands_r
   {
   	pin=2
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptCommandCallStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
		]
		methods = [
			getCommandString
			getCommandTokens
			getParameterTypes
			getParametersLength
			getCommandTokens
			getCommand
		]
		//recoverWhile = command_recover
   }
   ;

private command_recover
	::= !(NEWLINE|COMMA)
	;
c_commands_rrrrrrrrrrrrr ::= c_kw_rrrrrrrrrrrrr space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrrrrrrrrrrrr"
		getCommandString
	]
}
;

c_commands_rrrrrrrrrrrr ::= c_kw_rrrrrrrrrrrr space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrrrrrrrrrrr"
		getCommandString
	]
}
;

c_commands_trrrrr ::= c_kw_trrrrr space token space rvalue space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_trrrrr"
		getCommandString
	]
}
;

c_commands_rrrrrr ::= c_kw_rrrrrr space rvalue space rvalue space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrrrrr"
		getCommandString
	]
}
;

c_commands_trrrr ::= c_kw_trrrr space token space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_trrrr"
		getCommandString
	]
}
;

c_commands_rrrrr ::= c_kw_rrrrr space rvalue space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrrrr"
		getCommandString
	]
}
;

c_commands_trrr ::= c_kw_trrr space token space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_trrr"
		getCommandString
	]
}
;

c_commands_rrrr ::= c_kw_rrrr space rvalue space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrrr"
		getCommandString
	]
}
;

c_commands_rrl ::= c_kw_rrl space rvalue space rvalue space lvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrl"
		getCommandString
	]
}
;

c_commands_trr ::= c_kw_trr space token space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_trr"
		getCommandString
	]
}
;

c_commands_lrr ::= c_kw_lrr space lvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_lrr"
		getCommandString
	]
}
;

c_commands_rrr ::= c_kw_rrr space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rrr"
		getCommandString
	]
}
;

c_commands_lr ::= c_kw_lr space lvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_lr"
		getCommandString
	]
}
;

c_commands_rr ::= c_kw_rr space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_rr"
		getCommandString
	]
}
;

c_commands_tr ::= c_kw_tr space token space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_tr"
		getCommandString
	]
}
;

c_commands_no_args ::= c_kw_no_args
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_no_args"
		getCommandString
	]
}
;

c_commands_l ::= c_kw_l space lvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_l"
		getCommandString
	]
}
;

c_commands_t ::= c_kw_t space token
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_t"
		getCommandString
	]
}
;

c_commands_r ::= c_kw_r space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/c_kw_r"
		getCommandString
	]
}
;

private rvalue_prime
	::= r_rvalue_rrr
	|	r_rvalue_rr
	|	r_rvalue_r
	|	r_rvalue_t
	|	r_rvalue_no_args
	| 	var_token
	;


rvalue
	::= rvalue_prime
	|	expression
	{
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptArgument"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
		]
		methods = [
			getCommandToken
     		getCommandString
     		getIndex
		]
	}
	;

r_rvalue_rrr ::= r_kw_rrr space rvalue space rvalue space rvalue
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/r_kw_rrr"
		getCommandString
	]
}
;

r_rvalue_no_args ::= r_kw_no_args
{
	pin=1
	implements = [
	  "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/r_kw_no_args"
		getCommandString
	]
}
;

r_rvalue_rr ::= r_kw_rr space rvalue space rvalue
{
	pin=1
	implements = [
	  "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/r_kw_rr"
		getCommandString
	]
}
;

r_rvalue_r ::= r_kw_r space rvalue
{
   pin=1
   implements = [
      "com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   ]
   methods = [
		commandToken="/r_kw_r"
		getCommandString
   ]
}
;

r_rvalue_t ::= r_kw_t space token
{
   pin=1
   implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   ]
   methods = [
		commandToken="/r_kw_t"
		getCommandString
   ]
}

lvalue
	::=	l_kw_no_args
	| 	var_token
{
	pin=1
	implements = [
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandElement"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptArgument"
		"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
	]
	methods = [
		commandToken="/l_kw_no_args"
		getCommandString
		isVariant
		getIndex
		getCommandToken
	]
}
;

c_kw_rrrrrrrrrrrrr
   ::= K_STIM SPACE_ K_WRIT
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   		]
   		methods = [
			getReference
			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_rrrrrrrrrrrr
   ::= K_STIM SPACE_ K_SHOU
   |   K_STIM SPACE_ K_SIGN
   |   K_STIM SPACE_ K_TACT
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_trrrrr
   ::= K_NEW_COL SPACE_ K_BKBD
	{
		pin = 3;
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
		]
		methods = [
			getReference
			getCommandString
			isVariant
			getName
			setName
		]
	}
   ;

c_kw_rrrrrr
   ::= K_ROOM
   {
   		pin = 1;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
			isVariant
			getName
			setName
			getCommandString
   		]
   }
   ;

c_kw_trrrr
   ::= K_NEW_COL SPACE_ K_SIMP
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_rrrrr
   ::= K_NEW_COL SPACE_ K_PART
   |   K_SPOT
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_trrr
   ::= K_NEW_COL SPACE_ K_CBTN
   |   K_NEW_COL SPACE_ K_COMP
   |   K_NEW_COL SPACE_ K_SCEN
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_rrrr
   ::= K_CABN
   |   K_SCRX
   |   K_SYS_COL SPACE_ K_EDIT
   |   K_TOOL
   |   K_WPOS
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_rrl
   ::= K_NEW_COL SPACE_ K_GENE
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_trr
   ::= K_NEW_COL SPACE_ K_LIFT
   |   K_NEW_COL SPACE_ K_VHCL
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_lrr
   ::= K_RNDV
   {
   		pin = 1;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_rrr
   ::= K_BBD_COL SPACE_ K_WORD
   |   K_DDE_COL SPACE_ K_CELL
   |   K_DOIF
   |   K_ENUM
   |   K_FIRE
   |   K_LTCY
   |   K_NEW_COL SPACE_ K_CREA
   |   K_RTAR
   |   K_TRIG
   |   K_UNTL
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_lr
   ::= K_ADDV
   |   K_ANDV
   |   K_DIVV
   |   K_MODV
   |   K_MULV
   |   K_ORRV
   |   K_SETV
   |   K_SUBV
   {
   		pin = 1;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_rr
   ::= K_BHVR
   |   K_CHEM
   |   K_DDE_COL SPACE_ K_PUTB
   |   K_KNOB
   |   K_MCRT
   |   K_MESG SPACE_ K_WRIT
   |   K_MVTO
   |   K_SPAS
   |   K_STM_NUM SPACE_ K_WRIT
   |   K_SYS_COL SPACE_ K_CMRA
   |   K_SYS_COL SPACE_ K_GRND
   |   K_TELE
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_tr
   ::= K_SNDQ
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_no_args
   ::= K_ABRT
   |   K_APPR
   |   K_CMND
   |   K_DDE_COL SPACE_ K_DIED
   |   K_DDE_COL SPACE_ K_GENE
   |   K_DDE_COL SPACE_ K_HATC
   |   K_DDE_COL SPACE_ K_LIVE
   |   K_DDE_COL SPACE_ K_LOBE
   |   K_DDE_COL SPACE_ K_NEGG
   |   K_DDE_COL SPACE_ K_PANC
   |   K_DDE_COL SPACE_ K_PICT
   |   K_DDE_COL SPACE_ K_SCRP
   |   K_DONE
   |   K_DPAS
   |   K_DROP
   |   K_EDIT
   |   K_GPAS
   |   K_INST
   |   K_KILL
   |   K_LOCK
   |   K_MATE
   |   K_MVBY
   |   K_OVER
   |   K_PART
   |   K_POIN
   |   K_QUIT
   |   K_SAYN
   |   K_SLIM
   |   K_SLOW
   |   K_SNEZ
   |   K_STOP
   |   K_STPC
   |   K_SYS_COL SPACE_ K_CAMT
   |   K_SYS_COL SPACE_ K_WTOP
   |   K_UNLK
   |   K_WALK
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_l
   ::= K_NEGV
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;
c_gsub
	::= K_GSUB SPACE_ subroutine_name
	;
c_kw_t
   ::= K_PLDS
   |   K_SNDC
   |   K_SNDE
   |   K_SNDF
   |   K_SNDL
   |   K_SUBR
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

c_kw_r
   ::= K_AIM_COL
   |   K_ANIM
   |   K_ASLP
   |   K_BASE
   |   K_BBD_COL SPACE_ K_EDIT
   |   K_BBD_COL SPACE_ K_EMIT
   |   K_BBD_COL SPACE_ K_SHOW
   |   K_BDVG
   |   K_DBGM
   |   K_DBUG
   |   K_DDE_COL SPACE_ K_GETB
   |   K_DDE_COL SPACE_ K_PUTS
   |   K_DDE_COL SPACE_ K_PUTV
   |   K_DDE_COL SPACE_ K_WORD
   |   K_DREA
   |   K_EVNT
   |   K_IMPT
   |   K_MESG SPACE_ K_SHOU
   |   K_MESG SPACE_ K_TACT
   |   K_POSE
   |   K_PRLD
   |   K_REPS
   |   K_RMEV
   |   K_SAY_DOL
   |   K_SNDV
   |   K_STM_NUM SPACE_ K_SHOU
   |   K_STM_NUM SPACE_ K_TACT
   |   K_TARG
   |   K_TICK
   |   K_VRSN
   |   K_WAIT
   |   K_WRLD
   {
   		pin = 3;
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;


r_kw_rrr
   ::= K_TOTL
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsRvalueKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

r_kw_no_args
   ::= K_OBVX
   |   K_VARX
   |   K__IT_
   |   K_ACTV
   |   K_ASLP
   |   K_ATTN
   |   K_ATTR
   |   K_BABY
   |   K_BUMP
   |   K_CAGE
   |   K_CAMN
   |   K_CARR
   |   K_CLAS
   |   K_DEAD
   |   K_DRV_EXL
   |   K_EDIT
   |   K_EXEC
   |   K_FMLY
   |   K_FROM
   |   K_GND_NUM
   |   K_GNDW
   |   K_GNUS
   |   K_HGHT
   |   K_HOUR
   |   K_LIMB
   |   K_LIML
   |   K_LIMR
   |   K_LIMT
   |   K_MINS
   |   K_MOVS
   |   K_NEID
   |   K_NORN
   |   K_OBJP
   |   K_OWNR
   |   K_PNTR
   |   K_POSB
   |   K_POSE
   |   K_POSL
   |   K_POSR
   |   K_POST
   |   K_RMS_NUM
   |   K_SCOR
   |   K_SNDS
   |   K_SPCS
   |   K_TARG
   |   K_TCAR
   |   K_TEMP
   |   K_VRSN
   |   K_WDTH
   |   K_WIND
   |   K_WINH
   |   K_WINW
   |   K_XVEC
   |   K_YVEC
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsRvalueKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

r_kw_rr
   ::= K_ROOM
   |   K_TOUC
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsRvalueKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

r_kw_r
   ::= K_CHEM
   |   K_DRIV
   |   K_GRND
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsRvalueKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

r_kw_t
   ::= K_TOKN
   {
   		implements = [
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsRvalueKeywordToken"
   		]
   		methods = [
   			getReference
   			getCommandString
			isVariant
			getName
			setName
   		]
   }
   ;

l_kw_no_args
	::= K_OBVX
	|   K_VARX
	|   K_ACTV
	|   K_ATTR
	|   K_BABY
	|   K_NORN
	|   K_OBJP
	|   K_WINH
	|   K_WINW
	|   K_XVEC
	|	K_YVEC
	{
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCommandLike"
   			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsLvalueKeywordToken"
		]
		methods = [
			getReference
   			getCommandString
			isVariant
			getName
			setName
		]
	}
	;

animation_string
   ::= '[' INT ANIM_R? ']'
   ;

byte_string
	::= '[' INT (space INT)* ']'
	;

new_line_like
	::= ","
	|	NEWLINE
	|	<<eof>>
	;

space_like_or_newline
	::= space_like
	|	new_line_like
	;

trailing_space
	::= space_like
	;

space_like
	::= space+
	;

private space
	::= SPACE_
	;

expression
   ::= 	equality_expression
   |   	animation_string
   |	byte_string
   |	lvalue
   |   	expression_prime
   {
   		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptExpressionStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
		methods = [
			getType
		]
   }
   ;


private expression_prime
   ::= //command_call
   		rvalue_prime
   |	literal
   |	var_token
   ;

equality_expression
   ::= expression_prime space eq_op space expression_prime
   ;

eq_op
	::= eq_op_old
	|	eq_op_new
	;

eq_op_old
	::= EQ_OP_OLD_
	;

eq_op_new
	::= EQ_OP_NEW_
	;

var_token
	::= VA_XX
	| 	OV_XX
	|	OBV_X
	|	VAR_X
	|	MV_XX
	{
		stubClass="com.openc2e.plugins.intellij.caos.stubs.api.CaosScriptVarTokenStub"
		extends="com.openc2e.plugins.intellij.caos.psi.impl.CaosScriptStubBasedElementImpl<?>"
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
		methods = [
			getVarGroup
			getVarIndex
		]
	}
	;

literal
   ::= string_literal
   |   number
   {
      methods = [
         intValue
         isInt
         floatValue
         isFloat
         isNumeric
         stringValue
         isString
      ]
   }
   ;

number
	::= INT
	|	DECIMAL
   ;

string_literal
   ::= QUOTE_STRING
   |   '[' TEXT_LITERAL ']'
   {
      methods = [
         getStringValue
      ]
   }
   ;

subroutine_name
	::= K_STIM
	|   K_WRIT
	|   K_SHOU
	|   K_SIGN
	|   K_TACT
	|   K_NEW_COL
	|   K_BKBD
	|   K_ROOM
	|   K_SIMP
	|   K_PART
	|   K_SPOT
	|   K_CBTN
	|   K_COMP
	|   SCEN
	|   K_CABN
	|   K_SCRX
	|   K_SYS_COL
	|   K_EDIT
	|   K_TOOL
	|   K_WPOS
	|   K_GENE
	|   K_LIFT
	|   K_VHCL
	|   K_RNDV
	|   K_BBD_COL
	|   K_WORD
	|   K_DDE_COL
	|   K_CELL
	|  	K_DOIF
	|   K_ENUM
	|   K_FIRE
	|   K_LTCY
	|   K_CREA
	|   K_RTAR
	|   K_TRIG
	|   K_UNTL
	|   K_ADDV
	|   K_ANDV
	|   K_DIVV
	|   K_MODV
	|   K_MULV
	|   K_ORRV
	|   K_SETV
	|   K_SUBV
	|   K_BHVR
	|   K_CHEM
	|   K_PUTB
	|   K_KNOB
	|   K_MCRT
	|   K_MESG
	|   K_MVTO
	|   K_SPAS
	|   K_STM_NUM
	|   K_CMRA
	|   K_GRND
	|   K_TELE
	|   K_SNDQ
	|   K_ABRT
	|   K_APPR
	|   K_CMND
	|   K_DIED
	|   K_HATC
	|   K_LIVE
	|   K_LOBE
	|   K_NEGG
	|   K_PANC
	|   K_PICT
	|   K_SCRP
	|   K_DONE
	|   K_DPAS
	|   K_DROP
	|   K_ELSE
	|   K_ENDI
	|   K_ENDM
	|   K_GPAS
	|   K_INST
	|   K_KILL
	|   K_LOCK
	|   K_LOOP
	|   K_MATE
	|   K_MVBY
	|   K_NEXT
	|   K_OVER
	|   K_POIN
	|   K_QUIT
	|   K_REPE
	|   K_RETN
	|   K_SAYN
	|   K_SLIM
	|   K_SLOW
	|   K_SNEZ
	|   K_STOP
	|   K_STPC
	|   K_CAMT
	|   K_WTOP
	|   K_TOUC
	|   K_UNLK
	|   K_WALK
	|   K_NEGV
	|   K_GSUB
	|   K_PLDS
	|   K_SNDC
	|   K_SNDE
	|   K_SNDF
	|   K_SNDL
	|   K_SUBR
	|   K_AIM_COL
	|   K_ANIM
	|   K_ASLP
	|   K_BASE
	|   K_EMIT
	|   K_SHOW
	|   K_BDVG
	|   K_DBGM
	|   K_DBUG
	|   K_GETB
	|   K_PUTS
	|   K_PUTV
	|   K_DREA
	|   K_EVNT
	|   K_IMPT
	|   K_POSE
	|   K_PRLD
	|   K_REPS
	|   K_RMEV
	|   K_SAY_DOL
	|   K_SNDV
	|   K_TARG
	|   K_TICK
	|   K_VRSN
	|   K_WAIT
	|   K_WRLD
	|   K_TOTL
	|   OBVX
	|   VARX
	|   K__IT_
	|   K_ACTV
	|   K_ATTN
	|   K_ATTR
	|   K_BABY
	|   K_BUMP
	|   K_CAGE
	|   K_CAMN
	|   K_CARR
	|   K_CLAS
	|   K_DEAD
	|   K_DRV_EXL
	|   K_EXEC
	|   K_FMLY
	|   K_FROM
	|   K_GND_NUM
	|   K_GNDW
	|   K_GNUS
	|   K_HGHT
	|   K_HOUR
	|   K_LIMB
	|   K_LIML
	|   K_LIMR
	|   K_LIMT
	|   K_MINS
	|   K_MOVS
	|   K_NEID
	|   K_NORN
	|   K_OBJP
	|   K_OWNR
	|   K_PNTR
	|   K_POSB
	|   K_POSL
	|   K_POSR
	|   K_POST
	|   K_RMS_NUM
	|   K_SCOR
	|   K_SNDS
	|   K_SPCS
	|   K_TCAR
	|   K_TEMP
	|   K_WDTH
	|   K_WIND
	|   K_WINH
	|   K_WINW
	|   K_XVEC
	|   K_YVEC
	|   K_DRIV
	|   K_TOKN
	|	WORD
	{
		implements = [
			"com.intellij.psi.PsiNamedElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
		]
		methods = [
			getName
			setName
			getReference
		]
	};

token
	::= K_STIM
	|   K_WRIT
	|   K_SHOU
	|   K_SIGN
	|   K_TACT
	|   K_NEW_COL
	|   K_BKBD
	|   K_ROOM
	|   K_SIMP
	|   K_PART
	|   K_SPOT
	|   K_CBTN
	|   K_COMP
	|   SCEN
	|   K_CABN
	|   K_SCRX
	|   K_SYS_COL
	|   K_EDIT
	|   K_TOOL
	|   K_WPOS
	|   K_GENE
	|   K_LIFT
	|   K_VHCL
	|   K_RNDV
	|   K_BBD_COL
	|   K_WORD
	|   K_DDE_COL
	|   K_CELL
	|  	K_DOIF
	|   K_ENUM
	|   K_FIRE
	|   K_LTCY
	|   K_CREA
	|   K_RTAR
	|   K_TRIG
	|   K_UNTL
	|   K_ADDV
	|   K_ANDV
	|   K_DIVV
	|   K_MODV
	|   K_MULV
	|   K_ORRV
	|   K_SETV
	|   K_SUBV
	|   K_BHVR
	|   K_CHEM
	|   K_PUTB
	|   K_KNOB
	|   K_MCRT
	|   K_MESG
	|   K_MVTO
	|   K_SPAS
	|   K_STM_NUM
	|   K_CMRA
	|   K_GRND
	|   K_TELE
	|   K_SNDQ
	|   K_ABRT
	|   K_APPR
	|   K_CMND
	|   K_DIED
	|   K_HATC
	|   K_LIVE
	|   K_LOBE
	|   K_NEGG
	|   K_PANC
	|   K_PICT
	|   K_SCRP
	|   K_DONE
	|   K_DPAS
	|   K_DROP
	|   K_ELSE
	|   K_ENDI
	|   K_ENDM
	|   K_GPAS
	|   K_INST
	|   K_KILL
	|   K_LOCK
	|   K_LOOP
	|   K_MATE
	|   K_MVBY
	|   K_NEXT
	|   K_OVER
	|   K_POIN
	|   K_QUIT
	|   K_REPE
	|   K_RETN
	|   K_SAYN
	|   K_SLIM
	|   K_SLOW
	|   K_SNEZ
	|   K_STOP
	|   K_STPC
	|   K_CAMT
	|   K_WTOP
	|   K_TOUC
	|   K_UNLK
	|   K_WALK
	|   K_NEGV
	|   K_GSUB
	|   K_PLDS
	|   K_SNDC
	|   K_SNDE
	|   K_SNDF
	|   K_SNDL
	|   K_SUBR
	|   K_AIM_COL
	|   K_ANIM
	|   K_ASLP
	|   K_BASE
	|   K_EMIT
	|   K_SHOW
	|   K_BDVG
	|   K_DBGM
	|   K_DBUG
	|   K_GETB
	|   K_PUTS
	|   K_PUTV
	|   K_DREA
	|   K_EVNT
	|   K_IMPT
	|   K_POSE
	|   K_PRLD
	|   K_REPS
	|   K_RMEV
	|   K_SAY_DOL
	|   K_SNDV
	|   K_TARG
	|   K_TICK
	|   K_VRSN
	|   K_WAIT
	|   K_WRLD
	|   K_TOTL
	|   OBVX
	|   VARX
	|   K__IT_
	|   K_ACTV
	|   K_ATTN
	|   K_ATTR
	|   K_BABY
	|   K_BUMP
	|   K_CAGE
	|   K_CAMN
	|   K_CARR
	|   K_CLAS
	|   K_DEAD
	|   K_DRV_EXL
	|   K_EXEC
	|   K_FMLY
	|   K_FROM
	|   K_GND_NUM
	|   K_GNDW
	|   K_GNUS
	|   K_HGHT
	|   K_HOUR
	|   K_LIMB
	|   K_LIML
	|   K_LIMR
	|   K_LIMT
	|   K_MINS
	|   K_MOVS
	|   K_NEID
	|   K_NORN
	|   K_OBJP
	|   K_OWNR
	|   K_PNTR
	|   K_POSB
	|   K_POSL
	|   K_POSR
	|   K_POST
	|   K_RMS_NUM
	|   K_SCOR
	|   K_SNDS
	|   K_SPCS
	|   K_TCAR
	|   K_TEMP
	|   K_WDTH
	|   K_WIND
	|   K_WINH
	|   K_WINW
	|   K_XVEC
	|   K_YVEC
	|   K_DRIV
	|   K_TOKN
	|	WORD
	{
		implements = [
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptCompositeElement"
			"com.openc2e.plugins.intellij.caos.psi.api.CaosScriptIsCommandToken"
		]
		methods = [
			isVariant
			getReference
			getName
			setName
		]
	}
	;
script_terminator
	::= K_ENDM
	|   <<eos>>
	|	<<eof>>
	;

family ::= INT;
genus ::= INT;
species ::= INT;

event_number
	::= INT
	;

